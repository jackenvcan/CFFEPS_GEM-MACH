!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : chm_plumerise_prep.ftn90
! Creation       : A. Kallaur, - March-April 2008
! Description    : Create connection between emission rate of major point
!                  source species in the linked list, and the Specie_master
!                  table.
!
! Extra info     : Also, connect the time independant stack info. (also in the
!                  linked list) to individually created pointer arrays.
!
!
! Arguments:  IN (none)
!
!             OUT (none-> results are pointer links between liniked list and
!                  specie_master table)
!
!==============================================================================
!
!!if_on
subroutine chm_plumerise_prep_emiss (lstack_emis, mj_names, nb_mj )
!!if_off
   use chm_utils_mod,        only: global_debug, chm_lun_out
   use chm_nml_mod,          only: chm_do_mjpts_l
   use chm_species_info_mod, only: nb_species, species_master

   implicit none
!!if_on
   integer(kind=4),         intent(in) :: nb_mj
   real(kind=4),   pointer, intent(in) :: lstack_emis(:,:)
   character(len=4),        intent(in) :: mj_names(nb_mj)
!!if_off
!
!  Local variables
!
   integer(kind=4)             :: i_me,ll,lbn
   logical(kind=4)             :: local_dbg

   local_dbg = (.false. .or. global_debug)

   if (.not. chm_do_mjpts_l) return

   if (local_dbg) then
      write(chm_lun_out, *) ' '
      write(chm_lun_out, *) '*****************************************************************'
      write(chm_lun_out, *) 'ENTER PLUMERISE PREP SUBROUTINE'
   endif

   do i_me=1,nb_mj

!
      do ll=1,nb_species
         if (  mj_names(i_me) == species_master(ll) % me_name ) then
!            write(chm_lun_out, *) ' '
!            write(chm_lun_out, *) 'Field name       : ', mj_names(i_me)
!
            species_master(ll) % me_list => lstack_emis(i_me,:)
!             write(chm_lun_out, *) 'Linked ',mj_names(i_me), &
!                                   ' to main sm table, sp % me_list(1)  ', &
!                                   species_master(ll) % me_list(1) 
            goto 10
         endif
         if ( species_master(ll) % nb_bins > 1 ) then
            do lbn = 1,species_master(ll) % nb_bins
               if ( mj_names(i_me) == species_master(ll) % bins_array(lbn) % me_name ) then
!                   write(chm_lun_out, *) ' '
!                   write(chm_lun_out, *) 'Field name       : ', mj_names(i_me
                   species_master(ll) % bins_array(lbn) % me_list => lstack_emis(i_me,:)
!                   write(chm_lun_out, *) 'Linked ',mj_names(i_me) , &
!                                         ' to main sm (aerosol) table, size, sp % me_list(1):  ' , &
!                                         species_master(ll) % bins_array(lbn) % me_list(1)
                  goto 10
               endif
            enddo
         endif
      enddo
 10   continue
   enddo

   if (local_dbg) then
      write (chm_lun_out, *) 'EXIT  PLUMERISE PREP SUBROUTINE'
      write(chm_lun_out, *) ' '
      write(chm_lun_out, *) '*****************************************************************'
   end if

   return
end subroutine chm_plumerise_prep_emiss
