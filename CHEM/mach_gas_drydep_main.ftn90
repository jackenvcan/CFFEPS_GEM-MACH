!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_gas_drydep_main.ftn90
! Creation       : A. Kallaur S. Menard, H. Landry, P.A. Beaulieu  - Jan 2008
! Description    : Prepare, and loop over all advected gaseous species to
!                  compute dry deposition velocities using mach_gas_drydep_solver
!
! Arguments:
!            IN

!              busper_size  --> Size of the permanent bus
!              busvol_size  --> Size of the volatile bus
!
!            IN/OUT
!              busper --> Permanent bus 
!              busvol --> Volatile bus 
!
!==============================================================================
!
!!if_on
subroutine mach_gas_drydep_main(busper, busvol, busper_size, busvol_size, &
                                metvar2d, deposited_species, nsp_depos    )
   use chm_ptopo_grid_mod,    only: chm_ni, chm_nk
   use chm_metvar_mod,        only: SIZE_MV2D 
!!if_off
   use chm_utils_mod,         only: chm_lun_out, global_debug
   use chm_species_info_mod,  only: sm
   use chm_species_idx_mod,   only: sp_LU15, sp_SESN
   use mach_gas_headers_mod,  only: mach_gas_drydep_solver, mach_gas_drydep_stat, mach_gas_drydep_ra, &
                                   mach_gas_drydep_ra2
   use mach_gas_chemicbi_mod, only: lucprm
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: nsp_depos
   integer(kind=4), intent   (in) :: busvol_size
   integer(kind=4), intent   (in) :: busper_size
   real(kind=4),    intent   (in) :: busper           (busper_size)
   real(kind=4),    intent(inout) :: busvol           (busvol_size)
   real(kind=4),    intent   (in) :: metvar2d         (chm_ni,SIZE_MV2D)
   integer(kind=4), intent   (in) :: deposited_species(nsp_depos)
!!if_off
!
!  Local variables
!
   integer(kind=4) :: ii, lk, il, sp_index, ra_option
   real(kind=4)    :: season(chm_ni), vd(chm_ni), diff_resist(chm_ni)
   real(kind=4)    :: lfu(chm_ni, lucprm), aero_resist(chm_ni, lucprm), surf_resist(chm_ni, lucprm)
   logical(kind=4) :: local_dbg
  
   local_dbg = (.false. .or. global_debug)
   ra_option = 1

   if (local_dbg) then
      write(chm_lun_out, *) ' Begin mach_gas_drydep_main:'
   end if

   do lk = 1, lucprm
      il = (lk - 1) * chm_ni
      lfu(1: chm_ni, lk) = busper(sm(sp_LU15) % per_offset + il : sm(sp_LU15) % per_offset + il + chm_ni - 1 )
   enddo
   season(1: chm_ni) = busper(sm(sp_SESN) % per_offset : sm(sp_SESN) % per_offset + chm_ni - 1 )

!  Calculate aerodynamic resistance for each landuse category
   if (ra_option == 1) &
   call mach_gas_drydep_ra( aero_resist, season, lfu, metvar2d )
   if (ra_option == 2) &
   call mach_gas_drydep_ra2( aero_resist, season, lfu, metvar2d )

!  Perform dry deposition for all chemical species of interest
   do sp_index = 1, nsp_depos

   if (ra_option == 1) &
       call mach_gas_drydep_solver( vd, aero_resist, diff_resist, surf_resist, &
                                   season, lfu, metvar2d,                      &
                                   deposited_species(sp_index), sp_index)
   if (ra_option == 2) &
       call mach_gas_drydep_solver2(vd, aero_resist, diff_resist, surf_resist, &
                                   season, lfu, metvar2d,                      &
                                   deposited_species(sp_index), sp_index)

       if (local_dbg) then
          call mach_gas_drydep_stat(vd, aero_resist, diff_resist, surf_resist, &
                                    season, lfu, metvar2d, deposited_species(sp_index))
      end if
      do lk = 1, lucprm
         do ii = 1, chm_ni
            il = (lk - 1) * chm_ni + (ii - 1)
            busvol(sm(sp_LU15) % ra_offset + il)                     = aero_resist(ii, lk)
            busvol(sm(deposited_species(sp_index)) % rc_offset + il) = surf_resist(ii, lk)
         enddo
      enddo
      do ii = 1, chm_ni
         busvol(sm(deposited_species(sp_index)) % vd_offset + ii - 1) = vd(ii)
         busvol(sm(deposited_species(sp_index)) % rb_offset + ii - 1) = diff_resist(ii)
      enddo

   end do

   if (local_dbg) then
      write(chm_lun_out, *) 'mach_gas_drydep_main EXIT'
   end if

end subroutine mach_gas_drydep_main
