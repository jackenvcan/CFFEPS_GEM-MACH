!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_hetv_case1.ftn90
! Creation       : P. Makar, V. Bouchet, A. Nenes, S. Gravel, B. Pabla, S. Menard
! Description    : Heterogeneous chemistry solver for case1.
!                  Based on algorithm's in Nenes et al's ISORROPIA solver,
!                  recoded to vectorize over the gridpoint dimension.
!                  All input arrays are of length npts (total number of gridpoints
!                  submitted from the calling code.  The subsection of each
!                  1-D array between index ns1 and ne1 (inclusive)
!                  has been pre-sorted, and contains the gridpoint data that must
!                  be solved using case 1's algorithm.  Operations within this
!                  subroutine therefore take place over array bounds from ns1 to ne1.
!
!                  Units on input are moles/kg air.
!
!                  Revised root search algorithm; uses subdivision of interval to
!                  find smallest root, followed by binary search (algorithm similar to ISORROPIA).
!
! Extra info :     Athanasios Nenes, Mail Code 210-41, Dept. of Chemical Engineering,
!                  California Institute of Technology, Pasadena, Ca., 91125, USA
!                  nenes@its.caltech.edu
!
!                  The conditions for which this case is called are as follows:
!                  TA/TS < 1, rh < drh_ambis
!                  The reactions representing this case are as follows(bracketed numbers
!                  indicate that the solution is done in stages, as numbered):
!                  (1)
!                    HSO4 <=> H + SO4 , kHSO4
!                    NH4HSO4 = TA - NH4
!                    TS = SO4 + HSO4 + NH4HSO4
!                    H + NH4 = 2 SO4 + HSO4
!                  (2)
!                    NH4HSO4 <=> NH4 + HSO4, kNH4HSO4
!                  The system of equations to be solved in this case are as follows:
!                  Equations
!                  (1)
!                   kHSO4 (HSO4)- (H)(SO4) = 0
!                   TA - NH4 - NH4HSO4 = 0,
!                   TS - SO4 - HSO4 - NH4HSO4 = 0,
!                   H + NH4 - 2 SO4 - HSO4 = 0.
!                  (2)
!                    kNH4HSO4 - (NH4)(HSO4) = 0
!
!                  The solution to the system of equations:
!                  (1)
!                    Let
!                    b = kHSO4 - TA + TS,
!                    c = kHSO4 (TA - NH4 - TS)
!                    SO4 = 0.5*(-b + sqrt(b**2 -4c)),
!                    NH4HSO4 = TA - NH4,
!                    H = SO4 + TS - TA,
!                    HSO4 = TS - SO4 - TA + NH4
!                  (2)
!                    kNH4HSO4 - (NH4)(HSO4) = 0
!                  Variable, Range
!                    NH4, 0 to TA
!
! Arguments  IN
!
!            OUT
!
!=============================================================================
!
!!if_on
subroutine mach_hetv_case1(npts, nr, ns1, ne1, so4, no3, nh4, hso4, hno3, h, nh3, amsul, ambis, &
                 amnit, leto, t, tc, aw, iter, itero, k0, p1, p2, eps, eps2, lwn, ta,           &
                 ts, tn, ndiv, lwmin, tstd, small, smrt)
!!if_off
   use chm_utils_mod,         only: chm_lun_out, global_debug
   use mach_hetv_headers_mod, only: mach_hetv_water, mach_hetv_activity
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: nr
   integer(kind=4), intent   (in) :: npts
   integer(kind=4), intent   (in) :: ns1
   integer(kind=4), intent   (in) :: ne1
   integer(kind=4), intent   (in) :: iter
   integer(kind=4), intent   (in) :: itero
   integer(kind=4), intent   (in) :: ndiv
   real(kind=8),    intent   (in) :: lwmin
   real(kind=8),    intent   (in) :: tstd
   real(kind=8),    intent   (in) :: small
   real(kind=8),    intent   (in) :: smrt
   real(kind=8),    intent   (in) :: eps
   real(kind=8),    intent   (in) :: eps2
   real(kind=8),    intent   (in) :: k0   (nr)
   real(kind=8),    intent   (in) :: p1   (nr)
   real(kind=8),    intent   (in) :: p2   (nr)
   real(kind=8),    intent  (out) :: so4  (npts)
   real(kind=8),    intent(inout) :: no3  (npts)
   real(kind=8),    intent  (out) :: nh4  (npts)
   real(kind=8),    intent  (out) :: hso4 (npts)
   real(kind=8),    intent(inout) :: hno3 (npts)
   real(kind=8),    intent  (out) :: h    (npts)
   real(kind=8),    intent(inout) :: nh3  (npts)
   real(kind=8),    intent(inout) :: amsul(npts)
   real(kind=8),    intent  (out) :: ambis(npts)
   real(kind=8),    intent(inout) :: amnit(npts)
   real(kind=8),    intent(inout) :: leto (npts)
   real(kind=8),    intent   (in) :: t    (npts)
   real(kind=8),    intent   (in) :: tc   (npts)
   real(kind=8),    intent   (in) :: aw   (npts)
   real(kind=8),    intent  (out) :: lwn  (npts)
   real(kind=8),    intent(inout) :: ta   (npts)
   real(kind=8),    intent(inout) :: ts   (npts)
   real(kind=8),    intent(inout) :: tn   (npts)
 !!if_off
!
!  Local variables:
!
   integer(kind=4)               :: i, jo, rooteval, rootsrch, jsum, ierr
   real(kind=8)                  :: del, delouter
   real(kind=8)                  :: tmpv, dndiv
!  Workspace arrays
   real(kind=8), dimension(npts) :: b, c, v, oh
   real(kind=8), dimension(npts) :: g_h_no3, g_h_no3_o
   real(kind=8), dimension(npts) :: g_h_hso4, g_h_hso4_o
   real(kind=8), dimension(npts) :: g_nh4_hso4, g_nh4_hso4_o
   real(kind=8), dimension(npts) :: g_nh42_so4, g_nh42_so4_o
   real(kind=8), dimension(npts) :: g_h_oh, g_h_oh_o
   real(kind=8), dimension(npts) :: g_nh4_oh, g_nh4_oh_o
   real(kind=8), dimension(npts) :: g_nh4_no3, g_nh4_no3_o
   real(kind=8), dimension(npts) :: g_h2_so4, g_h2_so4_o
   real(kind=8), dimension(npts) :: g_nh43_hso42, g_nh43_hso42_o
   real(kind=8), dimension(npts) :: lwo
   real(kind=8), dimension(npts) :: g0_h_no3, g0_h2_so4, g0_h_hso4, g0_nh4_no3, g0_nh42_so4, g0_nh4_hso4
   real(kind=8), dimension(npts) :: nh4_lo, nh4_hi
   real(kind=8), dimension(npts) :: choice, rtbis, dx, eval
   real(kind=8), dimension(npts) :: diff_lo, diff
   real(kind=8), dimension(npts) :: difflo, diff_1, locmin, avdiff
!  arrays for reaction rates:
   real(kind=8), dimension(npts) :: khso4, kh2o, kambis

!  Local variables that may be used in the solution:
   character(len=20), parameter           :: method = 'KM'
   Integer(kind=4), dimension(npts)       :: rflag, rootloc, bflag, rootmin
   logical(kind=4)                        :: local_dbg
   external qqexit

   local_dbg = (.false. .or. global_debug)
!  Array dimensioning check:
   if(ns1 < 1 .or. ns1 >  npts .or. ne1 >  npts .or. ne1 < ns1) then
      write(0, *) '### Error in mach_hetv_case1 ###'
      write(0, *) '# Error in array bounds in case1'
      write(0, *) '###         ABORT         ###'
      call qqexit(1)
   end if
!  Initial guess for components:  TS split evenly between SO4 and HSO4,
!  NH4 = TA, and H = max(0, 2 SO4 + HSO4 - NH4), NH4HSO4 = 0
   do i=ns1, ne1
      so4(i)   = 0.5*ts(i)
      hso4(i)  = 0.5*ts(i)
      nh4(i)   = ta(i)
      h(i)     = max(0.d0, 2.d0*so4(i)+hso4(i)-nh4(i))
      ambis(i) = 0.d0
   end do

   do i=ns1, ne1
      lwn(i) = 1.d0
   end do

!  Looping point for outer iteration (subdivision of function interval and search for roots):

   rooteval = 0
   rootsrch = 0

!  Set value of subdivision for root search:

   dndiv=1.0D0/dble(ndiv)
!IBM* UNROLL(8)
   do i = ns1, ne1
      dx(i) = (ta(i) - small) * dndiv
   end do

2000  continue

!   Initial guess for liquid water content (will be replaced in calculations to follow:

!IBM* UNROLL(8)
   do i=ns1, ne1
      lwo(i)=1.d0
   end do

!   Reset concentrations to starting liquid water content
!IBM* UNROLL(2)
   do i=ns1, ne1
      ta(i)    = ta(i)    * lwn(i)
      ts(i)    = ts(i)    * lwn(i)
      tn(i)    = tn(i)    * lwn(i)
      nh3(i)   = nh3(i)   * lwn(i)
      hno3(i)  = hno3(i)  * lwn(i)
      so4(i)   = so4(i)   * lwn(i)
      h(i)     = h(i)     * lwn(i)
   end do

!IBM* UNROLL(2)
   do i=ns1, ne1
      no3(i)   = no3(i)   * lwn(i)
      nh4(i)   = nh4(i)   * lwn(i)
      hso4(i)  = hso4(i)  * lwn(i)
      amnit(i) = amnit(i) * lwn(i)
      amsul(i) = amsul(i) * lwn(i)
      ambis(i) = ambis(i) * lwn(i)
      leto(i)  = leto(i)  * lwn(i)
   end do

!  Zero the 'old value' activity coefficient arrays
   do i=ns1, ne1
      g_h_no3_o(i)      = 0.D0
      g_h_hso4_o(i)     = 0.D0
      g_nh4_hso4_o(i)   = 0.D0
      g_nh4_no3_o(i)    = 0.D0
      g_nh4_oh_o(i)     = 0.D0
      g_nh42_so4_o(i)   = 0.D0
      g_h_oh_o(i)       = 0.D0
      g_h2_so4_o(i)     = 0.D0
      g_nh43_hso42_o(i) = 0.D0
   end do

   rooteval = rooteval + 1

!  First root evaluation is for lower bound, nh4 = 0
   if(rooteval == 1) then
      do i=ns1, ne1
         nh4(i) = small
      end do
   end if

   if(rooteval == 2) then

!  Store results of first root evaluation:
!  Set the indirect address for the location of the sign change (rootloc) and the
!  counter for the number of sign changes (rflag) for the given gridpoint to zero:
      do i=ns1, ne1
         difflo(i) = diff_lo(i)
         diff_1(i) = diff_lo(i)
         rootloc(i) = 0
         rflag(i)   = 0
         rootmin(i) = 0
         locmin(i)  = 1.d30
      end do
   end if

!  Subsequent root evaluations (but before the binary search refinement):  determine
!  the value of the variable to be used for the next function evaluation:
   if(rooteval > 1 .and. rooteval <= ndiv + 1) then
!IBM* UNROLL(8)
      do i = ns1, ne1
         nh4(i) = small + dx(i) * dble(rooteval - 1)
      end do
   end if

!  Save results of previous function evaluations, and check for sign change of function:
   if(rooteval > 2 .and. rooteval <= ndiv+2) then

!  Determine whether the boundaries of the current sub interval constitute the minimum
!  for the entire interval.  If so, store the right-hand index:
      do i = ns1, ne1
            avdiff(i) = 0.5d0 * abs(diff(i) + diff_1(i))
            locmin(i) = min(locmin(i), avdiff(i))
      end do
      do i=ns1, ne1
            if(avdiff(i) <= locmin(i)) rootmin(i) = rooteval - 1
      end do

!  Determine whether a sign change occurred in the last interval:

      do i = ns1, ne1
         if(sign(1.D0, diff_1(i))*sign(1.D0, diff(i)) < 0.D0) rflag(i) = rflag(i) + 1
      end do

!  If it was the first sign change detected for the given
!  gridpoint, save its location:
      do i = ns1, ne1
         if(rflag(i) == 1) then
            rootloc(i) = rooteval - 1
            rflag(i) = 2
         end if
      end do

!  Update the variable and evaluated function arrays:
!IBM* UNROLL(8)
      do i = ns1, ne1
         diff_1(i) = diff(i)
      end do
   end if

!  The next section determines the boundaries to be used in the binary search refinement
!  of the given root.  Sometimes both limits of the search are set to the same value
!  (upper or lower boundary of the entire interval), if no sign change occurred in the
!  entire interval.
   if(rooteval ==  ndiv + 2) then

!  Set the "boundary has been chosen" flag to "off":
      do i = ns1, ne1
         bflag(i) = 0
      end do

!  following block changed (see paul's e-mail dated Jan 15/03)
!  Use the lower limit of the variable space, if that lower limit
!  corresponds to a root and a sign change does not occur elsewhere:
      do i = ns1, ne1
         if(abs(difflo(i)) <= eps .and. rootloc(i) == 0) then
            nh4_lo(i) = small
            nh4_hi(i) = small
            bflag(i)  = 1
         end if
      end do

!  If a root was found in the variable space for the function at the
!  given gridpoint, use the stored index to give the boundaries:
      do i = ns1, ne1
         if(rootloc(i) /= 0 .and. bflag(i) ==  0) then
            nh4_lo(i) = small + dx(i) * dble(rootloc(i) - 2)
            nh4_hi(i) = nh4_lo(i) + dx(i)
            bflag(i) = 1
         end if
      end do

!  If no root was found in the variable space at the given gridpoint,
!  but the upper limit is a root, use that value for the root:
      do i = ns1, ne1
         if(bflag(i) == 0 .and. abs(diff(i)) <= eps .and. rootloc(i) == 0) then
            nh4_lo(i) = nh4(i)
            nh4_hi(i) = nh4(i)
            bflag(i)  = 1
         end if
      end do

!  If no root was found in the variable space at the given gridpoint,
!  and all the values of the root evaluations were positive, then
!  K(NH4HSO4) > (NH4)(HSO4) always - this implies that there will
!  never be enough NH4 to satisfy the ammonium bisulphate formation
!  equation - while local minima (not roots) may exist, the chemically
!  correct course in this case is to assume that NH4 is the maximum
!  value.  In order to ensure that this is done, both boundaries of the
!  root search are set to the upper value of NH4:
      do i = ns1, ne1
         if(bflag(i) == 0 .and. diff(i) > 0.) then
            nh4_lo(i) = nh4(i)
            nh4_hi(i) = nh4(i)
            bflag(i) = 1
         end if
      end do

!  If no root was found in the variable space at the given gridpoint,
!  and all the values of the root evaluations were negative, then
!  K(NH4HSO4) < (NH4)(HSO4) always - this implies that there will
!  always be too much NH4 to satisfy the ammonium bisulphate formation
!  equation - while local minima (not roots) may exist, the chemically
!  correct course in this case is to assume that NH4 is the minimum
!  value.  In order to ensure that this is done, both boundaries of the
!  root search are set to the minimum value of NH4:
      do i = ns1, ne1
         if(bflag(i) == 0 .and. diff(i) < 0.) then
            nh4_lo(i) = small
            nh4_hi(i) = small
            bflag(i) = 1
         end if
      end do

!  Check to make sure that some boundaries for the binary search were found:
      jsum = 0
      do i = ns1, ne1
         jsum = jsum + bflag(i)
      end do
      if(jsum < (ne1 - ns1 + 1)) then
         write(chm_lun_out, *) '> WARNING <'
         write(chm_lun_out, *) '> Root interval not set in Case 1'
         write(chm_lun_out, *) '> Condition occurred at the following gridpoint:'
         do i = ns1, ne1
            if(bflag(i) == 0) write(chm_lun_out, *) '> ', i
         end do
      end if
   end if

!  If the initial subdivision of the variable space has been completed,
!  start the bisection search refinement of the chosen function interval
   if(rooteval >= ndiv + 2) rootsrch = rootsrch + 1

!  Reevaluate the function on the lhs of the interval:
   if(rootsrch == 1) then
      do i = ns1, ne1
         nh4(i) = nh4_lo(i)
      end do
   end if

!  Reevaluate the function on the rhs of the interval:
   if(rootsrch == 2) then
      do i = ns1, ne1
         nh4(i) = nh4_hi(i)
      end do
   end if

!  On the third function evaluation, the bisection search
!  has commenced.  The first stage of this is to orient the
!  search so that the positive value of the root equation
!  lies on the right of the interval.  Note that from this
!  point forward, the "_hi" value ceases to be the upper
!  limit of the variable - it is now the increment in the
!  variable as the function proceeds towards the root.
!
   if(rootsrch == 3) then
      do i = ns1, ne1
!  "choice" is -1 if diff_lo<0, 1 otherwise:
         choice(i) = sign (1.E+0, real(diff_lo(i)))
         dx(i) = choice(i) * (nh4_lo(i) - nh4_hi(i))

!   "choice" is 1 if diff_lo<0, 0 otherwise
         choice(i) = 0.5D+0 * (1.D+0 - choice(i))
!
         rtbis(i) = choice(i) * nh4_lo(i) + (1.D+0 - choice(i)) * nh4_hi(i)
         eval(i) = min(eval(i), diff_lo(i) * diff(i))
         nh4_hi(i) = 0.5 * dx(i)
         nh4_lo(i) = rtbis(i)
         nh4(i) = nh4_lo(i) + nh4_hi(i)
!  rtbis is used to store the value of dx for future convergence calcs.
         rtbis(i) = max(abs(dx(i)), small)
      end do
   end if

!  All bisection evaluations:  determine which side of the
!  interval contains the root crossing, rearrange the bounds, and
!  subdivide the interval again:
   delouter = 0.D0
   if(rootsrch >  3) then
      do i = ns1, ne1
!  "choice" is 1 if diff<0, 0 otherwise:
         choice(i) = 0.5D+0 * (1.D+0 - sign (1.E+0, real(diff(i))))
!
         nh4_lo(i) = nh4(i) * choice(i) + (1.D+0 - choice(i)) * nh4_lo(i)
!
         delouter  = max( delouter, abs(nh4_hi(i) / rtbis(i)))
         nh4_hi(i) = nh4_hi(i) * 0.5
         nh4(i)    = nh4_lo(i) + nh4_hi(i)
      end do
   end if

!  The convergence parameter "del" and the number of bisection
!  iterations "iter" are used to exit the outer loop further
!  down in the code.
   jo = 0
1000  continue
   jo = jo + 1

!  Calculate liquid water, based on current ion concentration.

   call mach_hetv_water(npts, ns1, ne1, so4, h, no3, nh4, hso4, aw, lwo, lwn)

!  (2)  Calculate new concentrations of ions and other phases; multiply old concentration by
!  ratio of old to new liquid water contents
   do i = ns1, ne1
      tmpv     = lwo(i) / max(lwn(i), lwmin)
      ta(i)    = max(ta(i)    * tmpv, lwmin)
      ts(i)    = max(ts(i)    * tmpv, lwmin)
      tn(i)    = max(tn(i)    * tmpv, lwmin)
      nh3(i)   = max(nh3(i)   * tmpv, lwmin)
      hno3(i)  = max(hno3(i)  * tmpv, lwmin)
      so4(i)   = max(so4(i)   * tmpv, lwmin)
      h(i)     = max(h(i)     * tmpv, lwmin)
      no3(i)   = max(no3(i)   * tmpv, lwmin)
      nh4(i)   = max(nh4(i)   * tmpv, lwmin)
      hso4(i)  = max(hso4(i)  * tmpv, lwmin)
      amnit(i) = max(amnit(i) * tmpv, lwmin)
      amsul(i) = max(amsul(i) * tmpv, lwmin)
      ambis(i) = max(ambis(i) * tmpv, lwmin)
      leto(i)  = max(leto(i)  * tmpv, lwmin)
   end do
!  Update liquid water content
   do i = ns1, ne1
      lwo(i) = lwn(i)
   end do

!  Calculate rates for Equilibrium constants
   do i = ns1, ne1
!  5:  HSO4- <=> SO4= + H+
      tmpv = tstd / t(i)
      khso4(i) = k0(5) * exp( p1(5) * (tmpv - 1.D+00) + p2(5) * (1.d+00 + log( tmpv ) - tmpv ))
!  6:  NH4HSO4(s) <=> NH4+ + HSO4-
        kambis(i) = k0(6) * exp( p1(6) * (tmpv - 1.D+00) + p2(6) * (1.d+00 + log( tmpv ) - tmpv ))
   end do

!  Calculate OH concentration for activity coefficient calculations
   do i = ns1, ne1
      tmpv = tstd / t(i)
      kh2o(i) = k0(10) * exp( p1(10) * (tmpv - 1.D+00) + p2(10) * (1.d+00 + log( tmpv ) - tmpv ))
      oh(i) = aw(i) * kh2o(i) / h(i) * 0.5 * ( 1. + (sign(1., real(h(i)) - 2. * 1.E-30)) ) + 1.D-30 * 0.5    &
            * ( 1. + (sign(1., 2. * 1.E-30 - real(h(i)))) )
   end do

!  Calculate activity coefficients
      call mach_hetv_activity (method, npts, ns1, ne1, h, hso4, nh4, no3, so4, oh, g_h_no3, g_h_hso4, g_nh4_hso4,    &
                              g_nh42_so4, g_h_oh, g_nh4_oh, g_nh4_no3, g_h2_so4, g_nh43_hso42, g0_h_no3, g0_h2_so4,  &
                              g0_h_hso4, g0_nh4_no3, g0_nh42_so4, g0_nh4_hso4, tc)

!  Calculate maximum change in activity coefficients since the previous call in this subroutine
   del = 0.D0
   do i = ns1, ne1
      del               = max(del, abs((g_h_no3(i)-g_h_no3_o(i))/g_h_no3(i) ) )
      g_h_no3_o(i)      = g_h_no3(i)
      del               = max(del, abs((g_h_hso4(i)-g_h_hso4_o(i))/g_h_hso4(i) ) )
      g_h_hso4_o(i)     = g_h_hso4(i)
      del               = max(del, abs((g_nh4_hso4(i)-g_nh4_hso4_o(i))/g_nh4_hso4(i) ) )
      g_nh4_hso4_o(i)   = g_nh4_hso4(i)
      del               = max(del, abs((g_nh4_no3(i)-g_nh4_no3_o(i))/g_nh4_no3(i) ) )
      g_nh4_no3_o(i)    = g_nh4_no3(i)
      del               = max(del, abs((g_nh4_oh(i)-g_nh4_oh_o(i))/g_nh4_oh(i) ) )
      g_nh4_oh_o(i)     = g_nh4_oh(i)
      del               = max(del, abs((g_nh42_so4(i)-g_nh42_so4_o(i))/g_nh42_so4(i) ) )
      g_nh42_so4_o(i)   = g_nh42_so4(i)
      del               = max(del, abs((g_h_oh(i)-g_h_oh_o(i))/g_h_oh(i) ) )
      g_h_oh_o(i)       = g_h_oh(i)
      del               = max(del, abs((g_h2_so4(i)-g_h2_so4_o(i))/g_h2_so4(i) ) )
      g_h2_so4_o(i)     = g_h2_so4(i)
      del               = max(del, abs((g_nh43_hso42(i)-g_nh43_hso42_o(i))/g_nh43_hso42(i) ) )
      g_nh43_hso42_o(i) = g_nh43_hso42(i)
   end do
!
!  Factor activity coefficients into equilibrium constants
!  to simplify calculations.
!  *  Conversion factors:
!  *
!  *        atmospheres -> moles/kg H2O:
!  *
!  *   atmospheres *1.01325E5(kg m^-1 s^-2 /atm) /
!  *    { 8.3144 (kg m^2 s^-2 mol^-1 K^-1) * T (K) * Lw (kg H2O/kg air)
!  *          * rho (kg air/m3 air)  }    =  moles/(kg H2O)
!  *
!  *        atmospheres^-1 -> (moles/kg H2O)^-1 :
!  *
!  *         1          8.3144 * T * Lw * rho     kg H2O
!  *   ------------- * ----------------------  = --------
!  *   atmospheres      1.01325E5                 moles
!  *
   do i = ns1, ne1
! 5:  HSO4- <=> SO4= + H+
!  Multiply by the square of the H-HSO4 activity coefficient,
!  and divide by the cube of the H2SO4 activity coefficient:
      khso4(i) = khso4(i) * (g_h_hso4(i) * g_h_hso4(i)) / (g_h2_so4(i) * g_h2_so4(i) * g_h2_so4(i))

! 6:  NH4HSO4(s) <=> NH4+ + HSO4-
!  Divide by the square of the ammonium bisulphate activity coefficient:
      kambis(i) = kambis(i) / (g_nh4_hso4(i) * g_nh4_hso4(i))
   end do

!  Solve inner system of equations.
!  The value of NH4 is varied from 0 to TA in a two stage binary search. In the first stage,
!  system (1) is solved with the given value of NH4 as a constant.  The resulting HSO4 value is
!  tested using system (2):  the overall result is a search for the root of the ammonium
!  bisulphate equation as a function of the available NH4.  Note that TA/TS <1 if this
!  subroutine is called; the value within the root is always positive, since "c" is always negative
   do i = ns1, ne1
      b(i) = khso4(i) - ta(i) + ts(i)
      c(i) = khso4(i) * (ta(i) - nh4(i) - ts(i))
   end do
!  Taylor series used if round-off error possible:
   do i = ns1, ne1
      if(b(i) /= 0.D0) then
         v(i) = 4.d0 * (c(i)) / (b(i) * b(i))
      else
         v(i) = 1.D+03
      end if
   end do
   do i = ns1, ne1
         if(abs(v(i)) <= smrt .and. b(i) >  0.D0) then
            so4(i) =  - (((( 14.D0 * c(i) / (b(i) * b(i)) + 5.D0) * c(i) / (b(i) * b(i)) + 2.D0)  &
                      * c(i) / (b(i) * b(i)) + 1.D0) * c(i) / (b(i) * b(i)) + 1.D0) * c(i) / b(i)
         else
            so4(i) = 0.5d0 * (-b(i) + sqrt(b(i) * b(i) - 4.d0 * c(i)))
         end if
         so4(i) = max(so4(i), 0.0D0)
   end do
   do i = ns1, ne1
      ambis(i)   = max(ta(i) - nh4(i), 0.D0)
      h(i)       = max(so4(i) + ts(i) - ta(i), 0.D0)
      hso4(i)    = max(ts(i) - so4(i) - ta(i) + nh4(i), 0.D0)
   end do
4411  format(3(2x, 1pe14.7, 2x))

!  Convergence check:  Have the activity coefficients
!  changed by more than eps2 in the last iteration?  If
!  so, repeat the calculation with the new activity
!  coefficients.  Keep track of the number of iterations.
   if(del >  eps2 .and. jo < itero) goto 1000

!   Activity coefficients changed by less than eps2 during
!   the previous iteration; the first part of the problem, for
!   the lower limit of the variable (nh4), has converged.
!   Evaluate the root for the final equation to get the lower
!   bound value of the root.
   do i = ns1, ne1
      diff(i) = kambis(i) - nh4(i) * hso4(i)
   end do
   if(rooteval == 1 .or. rootsrch == 1) then
      do i = ns1, ne1
         diff_lo(i) = diff(i)
      end do
   end if

!  Repeat the calculations, for all ndiv+1 initial function
!  evaluations:
   if(rooteval <= ndiv + 1) goto 2000

!  Once the first midpoint has been calculated, use the
!  convergence checks from the last iteration to decide on
!  whether or not the set of problems have converged.  If
!  not, do another iteration.  If so, continue on and fill in
!  the remaining terms in the system of equations.
   if(rootsrch <= 3) goto 2000
   if(delouter >  eps  .and.  rootsrch < iter) goto 2000
   do i = ns1, ne1
      hno3(i)  = tn(i)
      no3(i)   = 0.D0
      nh3(i)   = 0.D0
      amnit(i) = 0.D0
      amsul(i) = 0.D0
      leto(i)  = 0.D0
   end do

!  Convert values back to moles/kg air from moles/kg water by
!  multiplying by the liquid water content:
   do i = ns1, ne1
      ta(i)    = ta(i)    * lwn(i)
      ts(i)    = ts(i)    * lwn(i)
      tn(i)    = tn(i)    * lwn(i)
      nh3(i)   = nh3(i)   * lwn(i)
      hno3(i)  = hno3(i)  * lwn(i)
      so4(i)   = so4(i)   * lwn(i)
      h(i)     = h(i)     * lwn(i)
      no3(i)   = no3(i)   * lwn(i)
      nh4(i)   = nh4(i)   * lwn(i)
      hso4(i)  = hso4(i)  * lwn(i)
      amnit(i) = amnit(i) * lwn(i)
      amsul(i) = amsul(i) * lwn(i)
      ambis(i) = ambis(i) * lwn(i)
      leto(i)  = leto(i)  * lwn(i)
   end do

   return
end
