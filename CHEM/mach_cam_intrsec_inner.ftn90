!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
!  Modification:  This version expects only particle mass as input,
!                 and is called from an outer routine that subdivides
!                 the particle bins to achieve higher accuracy within
!                 this stage.  P.A. Makar, W. Gong, S. Gong, Feb 2008
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_intrsec.ftn90
! Creation       : S. Gong, S. Gravel and B. Pabla for GEM-MACH, June 2008
!
! Description    : This module computes intersectional transport of aerosols
!                  due to comdensation or cloud processes
!
! Extra info     : First version created by S. Gong Aug 11 1997 for CAM
!
! Arguments:  IN
!               lev      -> chm_nk+1
!               il1      -> minimum index for chm_ni
!               il2      -> maximum index for chm_ni
!               rtcond   -> Mass transfer rate onto each particle size bin
!               totmas   -> Total mass of aerosol in each bin
!               ntr      -> Total number of trace substances (gases and aerosols)
!               nn       -> Loop index on aerosol types
!               adt2     -> Advection time step (s)
!               nbnd     -> Number of size bins
!              rtcond    -> Mass transfer rate onto each particle size bin
!               aeronum  -> Number concentration of aerosols
!                  v     ->
!                  mae   -> 0
!
!             IN/OUT
!              XROW      -> Particle tracer concentration in each bin before/after intersection tranport
!
!============================================================================
!
!!if_on
   subroutine mach_cam_intrsec_inner (lev, il1, il2, XROW, ntr,            &
                                nn, adt2, nbnd, rtcond, aeronum, v, mae)
   use chm_ptopo_grid_mod, only: chm_ni, chm_nk
!!if_off
   use mach_cam_pre_mod,     only: rhop0, icom
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: nbnd
   integer(kind=4), intent   (in) :: ntr
   integer(kind=4), intent   (in) :: lev
   integer(kind=4), intent   (in) :: il1
   integer(kind=4), intent   (in) :: il2
   integer(kind=4), intent   (in) :: nn
   integer(kind=4), intent   (in) :: mae
   real(kind=4),    intent   (in) :: adt2
   real(kind=4),    intent(inout) :: xrow   (chm_ni,lev,ntr)
   real(kind=4),    intent   (in) :: rtcond (chm_ni,chm_nk,nbnd)
   real(kind=4),    intent   (in) :: aeronum(chm_ni,chm_nk,nbnd)
   real(kind=4),    intent   (in) :: v      (nbnd)
!!if_off
!
!  local variables
!
   integer(kind=4)   :: k, np, pos, l, il, n, i, nt, no, nk, k0
   real(kind=4)      :: rcond, voij, vok, vokm1, vokp1
   real(kind=4)      :: rth  (chm_ni, chm_nk, nbnd)
   real(kind=4)      :: rgrid(chm_ni, chm_nk, ntr)
!
   rcond = 0.0
   rth   = 0.0
   voij  = 0.0
   vok   = 0.0
   vokm1 = 0.0
   vokp1 = 0.0

   do k = 1, nbnd
      do np = 1, icom
      pos = (np - 1) * nbnd + k
         do l = 1 + mae, chm_nk
            do il = il1, il2
               rgrid(il, l, pos) = xrow(il, l + 1, pos)
            end do
         end do
      end do
   end do

!  condensation rate
   do n = 1, nbnd
      rth = 0.0
      do k = n, nbnd
         do l = 1 + mae, chm_nk
            do i = il1, il2
               rcond = rtcond(i, l, n)

!  new dry volume of size bin n
               voij = v(n) + rcond * adt2 / (aeronum(i, l, n) * rhop0(nn))
               vok = v(k)
               if (k == nbnd .and. voij >= vok) then
                  rth(i, l, k) = 1.0
               end if
               if (k < nbnd) then
                  k0 = min( k+1, nbnd )
                  vokp1 = v(k0)
                  if ( voij >= vok .and. voij < vokp1 ) then
                     rth(i, l, k) = vok / voij * (vokp1 - voij) / (vokp1 - vok)
                  endif
               end if
               if (k > 1) then
                  k0 = max( 1, k-1 )
                  vokm1 = v(k0)
                  if ( voij > vokm1 .and. voij < vok ) then
                     rth(i, l, k) = 1.0 - rth(i, l, k0)
                  endif
               end if
            end do
         end do
         do nt = 1, icom
            no = n + nbnd * (nt - 1)
            nk = k + nbnd * (nt - 1)
            do l = 1 + mae, chm_nk
               do i = il1, il2
                  if (rth(i, l, k) > 0.0) then
!  zero bin n for re-distribution
                     if (n == k) then
                        xrow(i, l + 1, no) = max(0.0, xrow(i, l + 1, no) - rgrid(i, l, no))
                     end if
!  distributed into bin k
                     xrow(i, l + 1, nk) = xrow(i, l + 1, nk) + rgrid(i, l, no) * rth(i, l, k)
                     if (nt == nn) then
                        xrow(i, l + 1, nk) = xrow(i, l + 1, nk) + rth(i, l, k) * rtcond(i, l, n) * adt2
                     end if
                  end if
               end do
            end do
         end do
      end do
   end do

   return
end
