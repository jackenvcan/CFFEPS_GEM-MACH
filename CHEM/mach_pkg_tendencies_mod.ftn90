!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

module mach_pkg_tendencies_mod
#if defined(MACH_TENDENCIES)
   use chm_utils_mod,        only: chm_lun_out, global_debug, NOMV_LEN, LONG_VARNAME, DICTSTRING_LEN, MAX_DEBUG_VAR
   use chm_species_idx_mod
   use chm_species_info_mod, only: nb_species, species_master

   save


   integer(kind=4), parameter :: TEND_DIFFUSION  = 1   ! define for diffusion
   integer(kind=4), parameter :: TEND_GASCHEM    = 2   ! define for gas chemistry
   integer(kind=4), parameter :: TEND_PMCHEM     = 3   ! define for PM chemistry

   contains

!============================================================================
!>
!! Name           : pkg_tendencies_metainit
!!
!! Description    : Initialize the meta information for each species
!!
!! Arguments:  None
!============================================================================
   subroutine pkg_tendencies_metainit()
      implicit none

      external longueur
      integer(kind=4) :: longueur
      integer(kind=4) :: i, bin_nb

      character (len = NOMV_LEN)         :: var_name
      character (le n= DICTSTRING_LEN)   :: tend_string
      logical(kind=4)                    :: local_dbg

      local_dbg = (.false. .or. global_debug)
      
      if(local_dbg) then
         write (chm_lun_out, *) "Entering pkg_tendencies_metainit"
      end if
      
!         Since we're dealing with tracers, we replace the first letter T by the
!         prefix that represents the operation, there's no garanty that the forged name
!         isn't use elsewhere so be advised.
!         F = Diffusion (d was already taken)
!         G = gas phase chemistry
!         P = pm chemistry

      do i = 1, nb_species
         if (sm(i) % nb_bins <= 1) then
            if (sm(i) % dyn_name /= UNASSIGNED) then
               var_name = sm(i) % dyn_name
!                    Diffusion
               sm(i) % td_name= 'F' // var_name(2:4)
               sm(i) % td_lname = var_name // "_tend_diff"
               sm(i) % td_string = 'VN=' // sm(i) % td_lname(1:longueur(sm(i) % td_lname)) // ';ON=' // sm(i) % td_name // '; VD=' // "Tendencies of diffusion for " // var_name // '; VS=SLC; VB=v0'
!                    Gas
               sm(i) % tg_name = 'G' // var_name(2:4)
               sm(i) % tg_lname = var_name // "_tend_gas"
               sm(i) % tg_string = 'VN=' // sm(i) % tg_lname(1:longueur(sm(i) % tg_lname)) // ';ON=' // sm(i) % tg_name // '; VD=' // "Tendencies of gas phase chem for " // var_name // '; VS=SLC; VB=v0'
!                    PM
               sm(i) % tp_name = 'M' // var_name(2:4)
               sm(i) % tp_lname = var_name // "_tend_pm"
               sm(i) % tp_string = 'VN=' // sm(i) % tp_lname(1:longueur(sm(i) % tp_lname)) // ';ON=' // sm(i) % tp_name // '; VD=' // "Tendencies of pm chem for " // var_name // '; VS=SLC; VB=v0'
               if(local_dbg) then
                  write (chm_lun_out, *) "var_name = ", var_name
                  
                  write (chm_lun_out, *) "td_name = ",    sm(i) % td_name
                  write (chm_lun_out, *) "td_lname = ",   sm(i) % td_lname
                  write (chm_lun_out, *) "td_strings = ", sm(i) % td_string
                  
                  write (chm_lun_out, *) "tg_name = ",    sm(i) % tg_name
                  write (chm_lun_out, *) "tg_lname = ",   sm(i) % tg_lname
                  write (chm_lun_out, *) "tg_strings = ", sm(i) % tg_string
                  
                  write (chm_lun_out, *) "tp_name = ",    sm(i) % tp_name
                  write (chm_lun_out, *) "tp_lname = ",   sm(i) % tp_lname
                  write (chm_lun_out, *) "tp_strings = ", sm(i) % tp_string
               end if
            end if
         else
            do bin_nb = 1, sm(i) % nb_bins
               if (sm(i) % bins_array(bin_nb) % dyn_name /= UNASSIGNED) then
!                   Although we're un a "binned" section here, it's not necessary to store the tendencies
!                   varlables into bins as they're not part of any other process and their only goal is to be output.
                  var_name = sm(i) % bins_array(bin_nb) % dyn_name
                  
!                    Diffusion
                  sm(i) % bins_array(bin_nb) % td_name = 'F' // var_name(2:4)
                  sm(i) % bins_array(bin_nb) % td_lname = var_name // "_tend_diff"
                  sm(i) % bins_array(bin_nb) % td_string = 'VN=' // sm(i) % bins_array(bin_nb) % td_lname(1:longueur(sm(i) % bins_array(bin_nb) % td_lname)) // ';ON=' // sm(i) % bins_array(bin_nb) % td_name // '; VD=' // "Tendencies of diffusion for " // var_name // '; VS=SLC; VB=v0'
!                    Gas
                  sm(i) % bins_array(bin_nb) % tg_name = 'G' // var_name(2:4)
                  sm(i) % bins_array(bin_nb) % tg_lname = var_name // "_tend_gas"
                  sm(i) % bins_array(bin_nb) % tg_string = 'VN=' // sm(i) % bins_array(bin_nb) % tg_lname(1:longueur(sm(i) % bins_array(bin_nb) % tg_lname)) // ';ON=' // sm(i) % bins_array(bin_nb) % tg_name // '; VD=' // "Tendencies of gas phase chem for " // var_name // '; VS=SLC; VB=v0'
!                    PM
                  sm(i) % bins_array(bin_nb) % tp_name = 'P' // var_name(2:4)
                  sm(i) % bins_array(bin_nb) % tp_lname = var_name // "_tend_pm"
                  sm(i) % bins_array(bin_nb) % tp_string = 'VN=' // sm(i) % bins_array(bin_nb) % tp_lname(1:longueur(sm(i) % bins_array(bin_nb) % tp_lname)) // ';ON=' // sm(i) % bins_array(bin_nb) % tp_name // '; VD=' // "Tendencies of pm chem for " // var_name // '; VS=SLC; VB=v0'
                  
                  if(local_dbg) then
                     write (chm_lun_out, *) "var_name = ", var_name
                     
                     write (chm_lun_out, *) "td_name = ",    sm(i) % bins_array(bin_nb) % td_name
                     write (chm_lun_out, *) "td_lname = ",   sm(i) % bins_array(bin_nb) % td_lname
                     write (chm_lun_out, *) "td_strings = ", sm(i) % bins_array(bin_nb) % td_string
                     
                     write (chm_lun_out, *) "tg_name = ",    sm(i) % bins_array(bin_nb) % tg_name
                     write (chm_lun_out, *) "tg_lname = ",   sm(i) % bins_array(bin_nb) % tg_lname
                     write (chm_lun_out, *) "tg_strings = ", sm(i) % bins_array(bin_nb) % tg_string
                     
                     write (chm_lun_out, *) "tp_name = ",    sm(i) % bins_array(bin_nb) % tp_name
                     write (chm_lun_out, *) "tp_lname = ",   sm(i) % bins_array(bin_nb) % tp_lname
                     write (chm_lun_out, *) "tp_strings = ", sm(i) % bins_array(bin_nb) % tp_string
                  end if
               end if
            end do
         end if
      end do

      
      if(local_dbg) then
         write (chm_lun_out) "Leaving pkg_tendencies_metainit"
      end if

   end subroutine pkg_tendencies_metainit




   subroutine tendency_store(process_id, busdyn, busdyn_size, busvol, busvol_size)
!! Description    : Store the value of all species' dynamic bus content in 
!!                  order to diff it after the process' completion.
!!                  Basically: tend = dyn
!
!! @param IN process_id defines which of the defined process is involved
!! @param IN busdyn dynamic bus
!! @param IN busdyn_size dynamic bus size
!! @param INOUT busvol volatile bus
!! @param IN busvol volatile bus size
!============================================================================
      integer(kind=4), intent(in) :: process_id
      integer(kind=4), intent(in) :: busdyn_size, busvol_size
      real(kind=4)   , dimension(busdyn_size), intent(in)    :: busdyn
      real(kind=4)   , dimension(busvol_size), intent(inout) :: busvol
      
      integer(kind=4) i
      logical(kind=4) local_dbg

      local_dbg = (.false. .or. global_debug)
      
      if(local_dbg) then
         write (chm_lun_out, *) "Entering tendency_store"
      end if

      select case (process_id)
         case (TEND_DIFFUSION)
            do i = 1, nb_species
               if (sm(i) % nb_bins <= 1) then
                  if (sm(i) % td_name /= UNASSIGNED) then
!                            if(local_dbg) then
!                               write (chm_lun_out, *) "   storing (d) ", sm(i) % td_name
!                            end if
                     busvol(sm(i) % td_offset:sm(i) % td_offset + sm(i) % td_size -1 ) = busdyn(sm(i) % dyn_offset:sm(i) % dyn_offset + sm(i) % dyn_size -1 )
                  end if
               else
                  do bin_nb = 1, sm(i) % nb_bins
                     if (sm(i) % bins_array(bin_nb) % td_name /= UNASSIGNED) then
!                            if(local_dbg) then
!                               write (chm_lun_out, *) "   storing (d) ", sm(i) % bins_array(bin_nb) % td_name
!                            end if
                     busvol(sm(i) % bins_array(bin_nb) % td_offset:sm(i) % bins_array(bin_nb) % td_offset + sm(i) % bins_array(bin_nb) % td_size  -1 ) = &
                        busdyn(sm(i) % bins_array(bin_nb) % dyn_offset:sm(i) % bins_array(bin_nb) % dyn_offset + sm(i) % bins_array(bin_nb) % dyn_size -1 )
                     end if
                  end do
               end if
            end do         
         case (TEND_GASCHEM)
            do i = 1, nb_species
               if (sm(i) % nb_bins <= 1) then
                  if (sm(i) % tg_name /= UNASSIGNED) then
!                            if(local_dbg) then
!                               write (chm_lun_out, *) "   storing (G) ", sm(i) % td_name
!                            end if
                     busvol(sm(i) % tg_offset:sm(i) % tg_offset + sm(i) % tg_size -1 ) = busdyn(sm(i) % dyn_offset:sm(i) % dyn_offset + sm(i) % dyn_size -1 )
                  end if
               else
                  do bin_nb = 1, sm(i) % nb_bins
                     if (sm(i) % bins_array(bin_nb) % tg_name /= UNASSIGNED) then
!                            if(local_dbg) then
!                               write (chm_lun_out, *) "   storing (G) ", sm(i) % bins_array(bin_nb) % tg_name
!                            end if
                     busvol(sm(i) % bins_array(bin_nb) % tg_offset:sm(i) % bins_array(bin_nb) % tg_offset + sm(i) % bins_array(bin_nb) % tg_size -1 ) = &
                        busdyn(sm(i) % bins_array(bin_nb) % dyn_offset:sm(i) % bins_array(bin_nb) % dyn_offset + sm(i) % bins_array(bin_nb) % dyn_size -1 )
                     end if
                  end do
               end if
            end do            
         case (TEND_PMCHEM)
            do i = 1, nb_species
               if (sm(i) % nb_bins <= 1) then
                  if (sm(i) % tp_name /= UNASSIGNED) then
!                            if(local_dbg) then
!                               write (chm_lun_out, *) "   storing (P) ", sm(i) % tg_name
!                            end if
                     busvol(sm(i) % tp_offset:sm(i) % tp_offset + sm(i) % tp_offset) = busdyn(sm(i) % dyn_offset:sm(i) % dyn_offset + sm(i) % dyn_size -1 )
                  end if
               else
                  do bin_nb = 1, sm(i) % nb_bins
                     if (sm(i) % bins_array(bin_nb) % tp_name /= UNASSIGNED) then
!                            if(local_dbg) then
!                               write (chm_lun_out, *) "   storing (P) ", sm(i) % bins_array(bin_nb) % tg_name
!                            end if
                     busvol(sm(i) % bins_array(bin_nb) % tp_offset:sm(i) % bins_array(bin_nb) % tp_offset + sm(i) % bins_array(bin_nb) % tp_size -1 ) = &
                        busdyn(sm(i) % bins_array(bin_nb) % dyn_offset:sm(i) % bins_array(bin_nb) % dyn_offset + sm(i) % bins_array(bin_nb) % dyn_size -1 )
                     end if
                  end do
               end if
            end do            
         case default
            print *, "tendency_store: The case that should not be."
         
      end select
      
      if(local_dbg) then
         write (chm_lun_out, *) "Leaving tendency_store"
      end if

   end subroutine tendency_store


   subroutine tendency_delta(process_id, busdyn, busdyn_size, BUSVOL, busvol_size)
!============================================================================
!! Description    : Store the value of all species' dynamic bus content in 
!!                  order to diff it after the process' completion.
!!                  Basically: tend = dyn - tend
!
!! @param IN process_id defines which of the defined process is involved
!! @param IN busdyn dynamic bus
!! @param IN busdyn_size dynamic bus size
!! @param INOUT busvol volatile bus
!! @param IN busvol volatile bus size
!============================================================================
      integer(kind=4), intent(in) :: process_id
      integer(kind=4), intent(in) :: busdyn_size, busvol_size
      real(kind=4)   , dimension(busdyn_size), intent(in)    :: busdyn
      real(kind=4)   , dimension(busvol_size), intent(inout) :: busvol
      
      integer(kind=4) i
      logical(kind=4) local_dbg

      local_dbg = (.false. .or. global_debug)
      
      if(local_dbg) then
         write (chm_lun_out, *) "Entering tendency_delta"
      end if
      
      select case (process_id)
         case (TEND_DIFFUSION)
            do i = 1, nb_species
               if (sm(i) % nb_bins <= 1) then
                  if (sm(i) % td_name /= UNASSIGNED) then
                     busvol(sm(i) % td_offset:sm(i) % td_offset + sm(i) % td_size -1 ) = busdyn(sm(i) % dyn_offset:sm(i) % dyn_offset + sm(i) % dyn_size -1 ) - &
                                                             busvol(sm(i) % td_offset:sm(i) % td_offset + sm(i) % td_size -1 )
                  end if
               else
                  do bin_nb = 1, sm(i) % nb_bins
                     if (sm(i) % bins_array(bin_nb) % td_name /= UNASSIGNED) then
                     busvol(sm(i) % bins_array(bin_nb) % td_offset:sm(i) % bins_array(bin_nb) % td_offset + sm(i) % bins_array(bin_nb) % td_size -1 ) = &
                        busdyn(sm(i) % bins_array(bin_nb) % dyn_offset:sm(i) % bins_array(bin_nb) % dyn_offset + sm(i) % bins_array(bin_nb) % dyn_size -1 ) - &
                        busvol(sm(i) % bins_array(bin_nb) % td_offset:sm(i) % bins_array(bin_nb) % td_offset + sm(i) % bins_array(bin_nb) % td_size -1 )
                     end if
                  end do
               end if
            end do         
         case (TEND_GASCHEM)
            do i = 1, nb_species
               if (sm(i) % nb_bins <= 1) then
                  if (sm(i) % tg_name /= UNASSIGNED) then
                     busvol(sm(i) % tg_offset:sm(i) % tg_offset + sm(i) % tg_size -1 ) = &
                        busdyn(sm(i) % dyn_offset:sm(i) % dyn_offset + sm(i) % dyn_size -1 ) - busvol(sm(i) % tg_offset:sm(i) % tg_offset + sm(i) % tg_size -1 )
                  end if
               else
                  do bin_nb = 1, sm(i) % nb_bins
                     if (sm(i) % bins_array(bin_nb) % tg_name /= UNASSIGNED) then
                     busvol(sm(i) % bins_array(bin_nb) % tg_offset:sm(i) % bins_array(bin_nb) % tg_offset + sm(i) % bins_array(bin_nb) % tg_size -1 ) = &
                        busdyn(sm(i) % bins_array(bin_nb) % dyn_offset:sm(i) % bins_array(bin_nb) % dyn_offset + sm(i) % bins_array(bin_nb) % dyn_size -1 ) - &
                        busvol(sm(i) % bins_array(bin_nb) % tg_offset:sm(i) % bins_array(bin_nb) % tg_offset + sm(i) % bins_array(bin_nb) % tg_size -1 )
                     end if
                  end do
               end if
            end do            
         case (TEND_PMCHEM)
            do i = 1, nb_species
               if (sm(i) % nb_bins <= 1) then
                  if (sm(i) % tp_name /= UNASSIGNED) then
                     busvol(sm(i) % tp_offset:sm(i) % tp_offset + sm(i) % tp_size -1 ) = &
                        busdyn(sm(i) % dyn_offset:sm(i) % dyn_offset + sm(i) % dyn_size -1 ) - busvol(sm(i) % tp_offset:sm(i) % tp_offset + sm(i) % tp_size -1 )
                  end if
               else
                  do bin_nb = 1, sm(i) % nb_bins
                     if (sm(i) % bins_array(bin_nb) % tp_name /= UNASSIGNED) then
                     busvol(sm(i) % bins_array(bin_nb) % tp_offset:sm(i) % bins_array(bin_nb) % tp_offset + sm(i) % bins_array(bin_nb) % tp_size -1 ) = &
                        busdyn(sm(i) % bins_array(bin_nb) % dyn_offset:sm(i) % bins_array(bin_nb) % dyn_offset + sm(i) % bins_array(bin_nb) % dyn_size -1 ) - &
                        busvol(sm(i) % bins_array(bin_nb) % tp_offset:sm(i) % bins_array(bin_nb) % tp_offset + sm(i) % bins_array(bin_nb) % tp_size -1 )
                     end if
                  end do
               end if
            end do            
         case default
            print *, "tendency_delta: The case that should not be."
      end select
      

      if(local_dbg) then
         write (chm_lun_out, *) "Leaving tendency_delta"
      end if
   end subroutine tendency_delta


#else

! Here there must be a stub version of all subroutines declared above
!    subroutine pkg_tendencies_metainit()
!          implicit none
!          print *,"mach_pkg_tendencies_mod.pkg_tendencies_metainit stub"
!    end subroutine pkg_tendencies_metainit
!    
!    subroutine tendency_store(process_id)
!       implicit none
!       print *,"mach_pkg_tendencies_mod.tendency_store stub"
!    end subroutine tendency_store
!    
!    subroutine tendency_delta(process_id)
!       implicit none
!       print *,"mach_pkg_tendencies_mod.tendency_store stub"
!    end subroutine tendency_delta

#endif

end module mach_pkg_tendencies_mod
