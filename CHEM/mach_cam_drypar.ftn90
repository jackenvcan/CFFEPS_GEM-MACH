!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_drypar.ftn90
! Creation       : S. Gong, L. Zhang, S. Gravel and B. Pabla for GEM-MACH, June 2008
! Description    : Calculation of dry deposition of aerosol particles.
!
! Extra info     : - First version created by S. Gong Aug 04 1994 for CAM
!                    Method:
!                       parameterization of dry deposition scheme by Filippo Giorgi
!                       [JGR, 91(D9), 1986] was used.
!                       Two layer model.
!                  - Vectorized the whole program and added working spaces.(S. Gong, Dec 19, 1996)
!                  - Modify dry deposition parameterization (L. Zhang, Mar 19, 1998)
!                  - Pass all control variables for 15 land-use from the control file (S. Gong, Aug 01, 1999)
!                  - The gravitational velocity is now done in aeroprop (S. Gong, Sep 04, 1999)
!                  - ra, usi, seasn are now calculated in drygas (L. Zhang, Sep 10, 2000)
!
! Arguments:  IN
!               lev     -> chm_nk + 1
!               il1     -> minimum index for chm_ni
!               il2     -> maximum index for chm_ni
!               ntr     -> Total number of trace substances (gases and aerosols)
!               adt2    -> Advection time step (s)
!               luc     -> landuse categories
!               ns      -> Seasonal periods in Robichaud Dev. vel. scheme
!               throw   -> Temp
!               thlev   -> Layer thickness [m]
!               roarow  -> Air density (kg/m3)
!               pdiff   -> diffusion coefficient
!               rhsize  -> Wet radius
!               fland   -> Landuse
!               xrow    -> tracer concentration
!               seasn   -> Assigned season descriptors
!               Ra      -> Aerodynamic resistance for species "species" (s/m)
!               usi     -> friction velocity
!
!             OUT
!              RTDRY    -> deposition tendencies for each layer
!
!             IN/OUT
!              PDEPV    -> gravitational settling velocity
!
!============================================================================
!
!!if_on
subroutine mach_cam_drypar (lev, il1, il2, ntr, adt2, luc, ns,          &
                            throw, thlev, roarow, pdiff, rhsize, fland, &
                            xrow, Pdepv, RTDRY, seasn, ra, usi,         &
                            aerosize, sub_xrow, sub_r, nbnd, ntr_n      )
   use chm_ptopo_grid_mod, only: chm_ni, chm_nk
   use mach_cam_utils_mod, only: isize
!!if_off
   use chm_consphychm_mod, only: grav
   use chm_nml_mod,        only: chm_intrsec_ndiv
   use mach_cam_pre_mod,   only: pgamma, icom, iae1, pllp, aest
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: ntr_n
   integer(kind=4), intent   (in) :: ntr
   integer(kind=4), intent   (in) :: nbnd
   integer(kind=4), intent   (in) :: ns
   integer(kind=4), intent   (in) :: luc
   integer(kind=4), intent   (in) :: lev
   integer(kind=4), intent   (in) :: il1
   integer(kind=4), intent   (in) :: il2
   real(kind=4),    intent   (in) :: adt2
   real(kind=4),    intent   (in) :: throw   (chm_ni,lev)
   real(kind=4),    intent   (in) :: thlev   (chm_ni,chm_nk)
   real(kind=4),    intent   (in) :: roarow  (chm_ni,chm_nk)
   real(kind=4),    intent   (in) :: pdiff   (chm_ni,chm_nk,isize)
   real(kind=4),    intent   (in) :: rhsize  (chm_ni,chm_nk,isize)
   real(kind=4),    intent   (in) :: fland   (chm_ni,luc)
   real(kind=4),    intent   (in) :: xrow    (chm_ni,lev,ntr)
   real(kind=4),    intent(inout) :: pdepv   (chm_ni,chm_nk,isize)
   real(kind=4),    intent  (out) :: rtdry   (chm_ni,chm_nk,ntr)
   real(kind=4),    intent   (in) :: seasn   (chm_ni)
   real(kind=4),    intent   (in) :: ra      (chm_ni,luc)
   real(kind=4),    intent   (in) :: usi     (chm_ni,luc)
   real(kind=4),    intent   (in) :: aerosize(2,isize)
   real(kind=4),    intent   (in) :: sub_xrow(chm_ni,lev,ntr_n) !SLG Sub V
   real(kind=4),    intent   (in) :: sub_r   (nbnd)             !SLG Sub V
!!if_off
!
! local variables
!
!SLG Sub V
   integer (kind=4) :: l, n, i, ic, isea, nn, np
   integer (kind=4) :: j, jsub, k, il, jk
   real(kind=4)     :: amu, st, eb, eim, ein, r1, rs, vdf, qcc, xxx
   real(kind=4)     :: vdp      (chm_ni)
   real(kind=4)     :: anu      (chm_ni)
   real(kind=4)     :: schm     (chm_ni)
   real(kind=8)     :: tm       (chm_ni, chm_nk, isize)
   real(kind=8)     :: tmr      (chm_ni, chm_nk, nbnd)
   real(kind=4)     :: sub_Pdepv(chm_ni, chm_nk, nbnd)
   real(kind=8)     :: vx       (chm_ni, chm_nk, isize)

   real(kind=4)     :: aa, bb, v1, v2, cc
   real(kind=8)     :: rr1(isize)
   real(kind=8)     :: rdb, fcn1, fcn2
   real(kind=8)     :: smf1 = 1.D-20     !  minimum particle mass mixing ratio
   real(kind=8)     :: smf2 = 1.D-20     !  minimum value of vx, where vx = exp(- adt2/th * dep_vel)

   real(kind=4)     :: a1(chm_ni), b1(chm_ni)
   real(kind=4)     :: c1(chm_ni, chm_nk)

!SLG end

   amu   = 0.0
   anu   = 0.0
   eb    = 0.0
   eim   = 0.0
   ein   = 0.0
   qcc   = 0.0
   r1    = 0.0
   rs    = 0.0
   schm  = 0.0
   st    = 0.0
   vdf   = 0.0
   vdp   = 0.0
   xxx   = 0.0
   sub_Pdepv = 0.0

!  loop for the number of aerosols (size bins)
!  for the surface layer, dry deposition is calculated.
!  note: the gravitational velocity was computed in mach_cam_aeroprop
!
! SLG - Sub dry
!  Median size of the aerosols
   do i=1, isize
      rr1(i) = dlog10(0.5d0 * dble(aerosize(1, i) + aerosize(2, i)))
   end do
!
   a1 = 0.
   b1 = 0.
   c1 = 0.
!
!  On input, pdepv contains the original bin structure settling velocities.
!  Here, these will be broken up over sub-bins using a simple scaling function.
!  settling velocity only (same as non-urban for the moment, sunling to provide
!  new function
!  The function cc is a polynomial fit to typical log10(settling velocity) as a
!  function of log10(radius):
   do n = 1, isize
      cc = real(-0.02614934d0 * rr1(n)**3 -0.37534441d0 * rr1(n)**2 + &
                 0.22485540d0 * rr1(n) + 5.77001978d0)
      do l = chm_nk - 1, 1, -1
         do i = il1, il2
            c1(i, l) = c1(i, l) + log10(pdepv(i, l, n)) - cc        !settling velocity
         end do
      end do
   end do

   c1 = c1 / real(isize)
!
!  c1 now contains the average offset between the idealized
!  simple function for {log10(settling velocity) = (cc)} and
!  the precalculated more detailed settling velocity, for
!  the original bin structure.  This offset will now be used
!  to improve the fit for the simple scaling function, for
!  all vertical levels
!  Note that this is applied only for the levels above the
!  ground level (chm_nk), since the latter is corrected using a
!  separate function.
   do  n= 1, nbnd
      rdb = dble(log10(sub_r(n)))
      fcn1 = -0.02614934d0 * rdb**3 -0.37534441d0 *rdb**2 + &
              0.22485540d0 * rdb + 5.77001978d0
      do l = chm_nk - 1, 1, -1
         do i = il1, il2
! settling velocity, calculated using simple function, then offset
! according to more detailed calculation at the original bin distribution:
            sub_pdepv(i, l, n) = 10**(real( fcn1 + dble(c1(i, l))))
         end do
      end do
   end do

! sub_Pdepv now contains the scaled settling velocities at the sub-bins
! Calculate the deposition velocities at the original bins:
   l = chm_nk
   do n = 1, isize
      do i = il1, il2
         vdp(i) = 0.0
      end do
      do ic = 1, luc
         do i = il1, il2
            isea = int(seasn(i))
            if (fland(i, ic) >= 0.005) then
!  air's dynamic viscosity
               amu = 145.8 * 1.0e-8 * throw(i, l + 1) ** 1.5 / (throw(i, l + 1) + 110.4)

!  air's kinematis viscosity
               anu(i) = amu / roarow(i, l)
               schm(i) = anu(i) / pdiff(i, l, n)

!  calculate middle-variles needed for eb, ein, em, etc., then ra, rs, vdf
               if (pllp(ic, isea) <= 0.0) then
                  st = pdepv(i, l, n) / grav * usi(i, ic) * usi(i, ic) / anu(i)
               else
                  st = pdepv(i, l, n) / grav * usi(i, ic) / pllp(ic, isea) * 1000.0
               end if
               eb = schm(i) ** pgamma(ic)
               eim = (st / (st + aest(ic))) ** 2
               eim = min(eim, 0.6)
               ein = 0.0
               if (pllp(ic, isea) > 0.01) then
                  ein = (1000.0 * 2.0 * rhsize(i, l, n) / pllp(ic, isea)) ** 2 * 0.5
               end if
               ein = min(ein, 0.6)
               r1 = max(0.5, exp(-st ** 0.5))
               rs = 1.0 / 3.0 / usi(i, ic) / (eb + eim + ein) / r1
               vdf = pdepv(i, l, n) + 1.0 / (ra(i, ic) + rs)
               vdp(i) = vdp(i) + vdf * fland(i, ic)
            end if
         end do
      end do

      do i = il1, il2
         pdepv(i, l, n) = vdp(i)
      end do
!
!SLG Sub-dry calculations
!  a1 and b1 are the average displacement between the
!  3rd order polynomial describing
!  log10 (deposition velocity + settling velocity) as a
!  function of radius for the sub-bins, and the deposition
!  velocity for the full bin, at the two bin locations,
!  for all non-urban land uses and urban land uses, respectively.
!
!  non-urban
      aa = real(0.11325186d0 * rr1(n)**3 + 2.85005039d0 * rr1(n)**2 + &
               22.72885201d0 * rr1(n) + 55.053510890d0)
!  urban
      bb = real(0.21069888d0 * rr1(n)**3 + 4.69614907d0 * rr1(n)**2 + &
               33.94123621d0 * rr1(n) + 77.28509785d0)
      do i = il1, il2
         a1(i) = a1(i) + log10(pdepv(i, l, n)) - aa        !for all other landuse
         b1(i) = b1(i) + log10(pdepv(i, l, n)) - bb        !for urban category
      end do
   end do
!
   a1 = a1 / real(isize)
   b1 = b1 / real(isize)
!
! a1, b1 are now the average offset between the simple functions for
! log10(deposition velocity+settling velocity) as a function of size, and the detailed
! calculation at the original bin sizes.  The same functions will now be
! used to calculate the deposition velocity at the sub-bins, and the
! offset will be used to correct the simple parameterized curve for
! deposition velocity + settling velocity as a function of radius to
! the original bin values rough location at the original isize bins.
!
!
! calculate the deposition velocity + settling velocity for each sub-bin,
! adding in the offset to correct the values to the
! curves calculated in more detail for the full bins:
!
   l = chm_nk
   do n = 1, nbnd
      rdb = dble(log10(sub_r(n)))
      fcn1 = 0.11325186d0 * rdb**3 + 2.85005039d0 * rdb**2 + 22.72885201d0 * rdb + 55.053510890d0
      fcn2 = 0.21069888d0 * rdb**3 + 4.69614907d0 * rdb**2 + 33.94123621d0 * rdb + 77.28509785d0
      do i = il1, il2
! non-urban surfaces
         v1 = 10**real(fcn1 + dble(a1(i)))
! urban surfaces
         v2 = 10**real(fcn2 + dble(b1(i)))
!  Weighting:  deposition velocity is assumed to dominate
!  in lowest model layer and is a function of the relative
!  urban versus non-urban land use categories.  For all
!  upper layers, settling velocity function is used
! weight by land use to get sub-bin deposition velocity:
         sub_Pdepv(i, l, n) = v1 * (1.0 - fland(i, 15)) + v2 * fland(i, 15)
      end do
   end do
!
!  Create deposition and fall velocities for original bin structure which
!  preserve the net total removal during the time step of the
!  sub-bin structure.  This is done to reduce subsequent
!  computational load.
!
!  First, determine the total mass ratio at each subbin-size
!  at each gridpoint:
!
   tm  = 0.d0  !  total mass at gridpoint across all species for each original bin size
   tmr = 0.d0  !  total mass ratio for each subbin size
   do k = 1, nbnd
      do np = 1, icom
         jk = (np - 1) * nbnd + k
         do il = 1, chm_nk
            do i = il1, il2
               tmr(i, il, k) = tmr(i, il, k) + dble(sub_xrow(i, il + 1, jk))
            end do
         end do
      end do
   end do
   do k = 1, isize
      do j = 1, chm_intrsec_ndiv
         jsub = (k - 1) * chm_intrsec_ndiv + j
         do il = 1, chm_nk
            do i = il1, il2
               tm(i, il, k) = tm(i, il, k) + tmr(i, il, jsub)
            end do
         end do
      end do
   end do
!  Calculate total mass ratio at each gridpoint as a function of
!  size.  A lower cutoff is employed to prevent division by zero errors.
   do k = 1, isize
      do j = 1, chm_intrsec_ndiv
         jsub = (k - 1) * chm_intrsec_ndiv + j
         do il = 1, chm_nk
            do i = il1, il2
               tmr(i, il, jsub) = tmr(i, il, jsub) / max(smf1, tm(i, il, k))
            end do
         end do
      end do
   end do
!  Determine mass weighted deposition velocities
!  Note that the weighting preserves the total mass
!  loss due to fall and/or deposition relative to the
!  sub-bin distribution:
   vx = 0.d0
   do k = 1, isize
      do j = 1, chm_intrsec_ndiv
         jsub = (k - 1) * chm_intrsec_ndiv + j
         do il = 1, chm_nk
            do i = il1, il2
               vx(i, il, k) = vx(i, il, k) + tmr(i, il, jsub) * dexp(dble(-sub_pdepv(i, il, jsub) * adt2 / thlev(i, il)) )
            end do
         end do
      end do
   end do

!  Apply limiters: vx must be greater than zero and less than unity
!  in order for the resulting deposition velocity to be bounded:
   do k = 1, isize
      do il = 1, chm_nk
         do i = il1, il2
            vx(i, il, k) = min(vx(i, il, k), 1.0d0)
            vx(i, il, k) = max(vx(i, il, k), smf2)
         end do
      end do
   end do
! Replace original deposition velocities with recalculated ones:
   do k = 1, isize
      do il = 1, chm_nk
         do i = il1, il2
            if(vx(i, il, k) > smf2 .and. tm(i, il, k) > smf1) then
               pdepv(i, il, k) = -thlev(i, il) / adt2 * real(dlog(vx(i, il, k)))
            end if
         end do
      end do
   end do
!  diagnostic:  write out corrected deposition velocities:
!  create deposition tendencies for each layer
   do nn = 1, icom
      do n = 1, isize
         np = isize * (nn - 1) + n + (iae1 - 1)
         do l = chm_nk, 1, -1
            do i = il1, il2
               qcc = -pdepv(i, l, n) * adt2 / thlev(i, l)
               if ( xrow(i, l + 1, np) > 1.0e-20 ) then
                  xxx = xrow(i, l + 1, np)
               else
                  xxx = 0.0
               endif
               rtdry(i, l, np) = xxx * (exp(qcc) - 1.0) / adt2
            end do
         end do
      end do
   end do

  return
end
