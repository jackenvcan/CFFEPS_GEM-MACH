!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Creation       : Alexander Kallaur, S. Gaudreault, Sept. 2010
! Description    : Read chemistry namelists and initialize chemistry configuration
!
! Extra info     :
!
! Arguments:
!           IN     :  F_namelist-> name of namelist file
!                     lun_out   -> Unit number of diagnostic message outputs
!
!
!           IN/OUT : Integer value of chm_nml function (>0 = succesful)
!
!=============================================================================
!
!!if_on
   integer function chm_nml (F_namelist, lun_out)
!!if_off
   use chm_utils_mod,      only: chm_lun_out, global_debug, undefined
   use chm_nml_mod
   use chm_datime_mod
   use chm_headers_mod,    only: chm_pkg_fields_init
   use mach_cam_utils_mod, only: isize, icob, iincld, iblcld, cam, icoag, idrydep, i_ss
   use mach_linoz_headers_mod, only: linoz_litcoeff
   implicit none  
!!if_on
   character(len=*), intent(in) :: F_namelist
   integer(kind=4),  intent(in) :: lun_out
!!if_off
!
!  Local variable declarations
!
   integer(kind=4)   :: read_status, istatus
   logical(kind=4)   :: local_dbg
   integer (kind=4)  :: unf, nrec, err_open, err
   integer  fnom, fclos
   external fnom, fclos
!
!    Assign default values for the chem_cfgs namelist variables.
!    In the case of a garbled read from nml file, easier to detect
!    where read error happened.
!
   chm_model_s          = undefined
   chm_pkg_gas_s        = undefined
   chm_pkg_pm_s         = undefined
   chm_master           = .true.
   chm_emis_master      = .true.
   chm_get_ae_emis_l    = .false.
   chm_get_be_emis_l    = .false.
   chm_get_mj_emis_l    = .false.
   chm_htap_emis_l      = .false.
   chm_biog_s           = undefined
   chm_gas_drydep_s     = undefined
   chm_soa_s            = undefined
   chm_strato_s         = 'NIL'
   chm_vert_diff_s      = undefined
   chm_mass_s           = 'BC'
   chm_mono_s           = 'CLIP'
   chm_mj_treatment_s   = undefined
   chm_seaflux_s        = undefined
   chm_winddust_s       = undefined
   chm_hetchem_s        = undefined
   chm_hetchem_metstlb_l= .false.
   chm_hetv_single_l    = .false.
   chm_step_factor      = -1
   em_nesdt             = 0.0
   chm_pm_drydep_s      = undefined
   chm_aqueous_s        = undefined
   chm_fugitive_dust_s  = undefined
   chm_incld_l          = .false.
   chm_blcld_l          = .false.
   chm_gaschem_online_l = .false.
   chm_pm_coag_step_intvl = -1
   chm_debug_2d_i       = -1
   chm_debug_3d_i       = -1
   chm_intrsec_ndiv     = -1
   chm_intrsec_ver      = -1
   chm_aqhi_l           = .false.
   chm_diag_wetdep_l    = .false.
   chm_diag_drydep_l    = .false.
   chm_diag_accum_l     = .false. 
   chm_diag_colum_l     = .false. 
   chm_moyhr            = 24      
   chm_acchr            = 24      
   chm_get_fire_emis_l  = .false.
!
   jd                   = -1
   id                   = -1
   dlev                 = -1
   it                   = -1
   itr                  = -1
   nk_start             =  1
!
!  Set debub messing
!
   local_dbg = (.false. .or. global_debug)
   
   chm_lun_out = lun_out

!
! Return +1 if chm_nml works properly, else return -1 (start with the assumption of failure)
!
   chm_nml  = -1
   unf       = 0
!
!  Attempt to open gem_settings.nml file -> ABORT if cannot
!
   err_open = fnom (unf, F_namelist, 'SEQ+OLD' , nrec)
   if (err_open.ne.0) write (chm_lun_out, 1000) trim(F_namelist)
   call chm_stop ('CHM_NML - ERROR OPENING NML FILE',err_open)
!
!  Attempt a read
!
   read (unf, nml = chemistry_cfgs, iostat = read_status)
   if (read_status > 0) then
      if (lun_out >= 0) then
         write(lun_out, *) ' Error in reading namelist chem_cfgs (s/r chm_nml)'
         write(lun_out, *) ' Read status = ', read_status
         write(lun_out, *) 'Printout of damaged chemistry_cfgs namelist:'
         write(lun_out, *) 'chm_master            = ' ,chm_master
         write(lun_out, *) 'chm_emis_master       = ' ,chm_emis_master
         write(lun_out, *) 'chm_model_s           = ' , chm_model_s
         write(lun_out, *) 'chm_pkg_gas_s         = ' , chm_pkg_gas_s
         write(lun_out, *) 'chm_pkg_pm_s          = ' , chm_pkg_pm_s
         write(lun_out, *) 'chm_biog_s            = ' , chm_biog_s
         write(lun_out, *) 'chm_get_ae_emis_l     = ' , chm_get_ae_emis_l
         write(lun_out, *) 'chm_get_be_emis_l     = ' , chm_get_be_emis_l
         write(lun_out, *) 'chm_get_mj_emis_l     = ' , chm_get_mj_emis_l
         write(lun_out, *) 'chm_htap_emis_l       = ' , chm_htap_emis_l
         write(lun_out, *) 'chm_gas_drydep_s      = ' , chm_gas_drydep_s
         write(lun_out, *) 'chm_soa_s             = ' , chm_soa_s
         write(lun_out, *) 'chm_strato_s          = ' , chm_strato_s          
         write(lun_out, *) 'chm_vert_diff_s       = ' , chm_vert_diff_s
         write(lun_out, *) 'chm_mass_s            = ' , chm_mass_s
         write(lun_out, *) 'chm_mono_s            = ' , chm_mono_s
         write(lun_out, *) 'chm_mj_treatment_s    = ' , chm_mj_treatment_s
         write(lun_out, *) 'chm_seaflux_s         = ' , chm_seaflux_s
         write(lun_out, *) 'chm_winddust_s        = ' , chm_winddust_s
         write(lun_out, *) 'chm_hetchem_s         = ' , chm_hetchem_s
         write(lun_out, *) 'chm_hetchem_metstlb_l = ' , chm_hetchem_metstlb_l
         write(lun_out, *) 'chm_step_factor       = ' , chm_step_factor
         write(lun_out, *) 'em_nesdt              = ' , em_nesdt
         write(lun_out, *) 'chm_pm_drydep_s       = ' , chm_pm_drydep_s
         write(lun_out, *) 'chm_aqueous_s         = ' , chm_aqueous_s
         write(lun_out, *) 'chm_fugitive_dust_s   = ' , chm_fugitive_dust_s
         write(lun_out, *) 'chm_incld_l           = ' , chm_incld_l
         write(lun_out, *) 'chm_blcld_l           = ' , chm_blcld_l
         write(lun_out, *) 'chm_gaschem_online_l  = ' , chm_gaschem_online_l
         write(lun_out, *) 'chm_pm_coag_step_intvl= ' , chm_pm_coag_step_intvl
         write(lun_out, *) 'chm_debug_2d_i        = ' , chm_debug_2d_i
         write(lun_out, *) 'chm_debug_3d_i        = ' , chm_debug_3d_i
         write(lun_out, *) 'chm_intrsec_ndiv      = ' , chm_intrsec_ndiv
         write(lun_out, *) 'chm_intrsec_ver       = ' , chm_intrsec_ver
         write(lun_out, *) 'chm_aqhi_l            = ' , chm_aqhi_l
         write(lun_out, *) 'chm_diag_wetdep_l     = ' , chm_diag_wetdep_l
         write(lun_out, *) 'chm_diag_drydep_l     = ' , chm_diag_drydep_l
         write(lun_out, *) 'chm_diag_accum_l      = ' , chm_diag_accum_l       
         write(lun_out, *) 'chm_diag_colum_l      = ' , chm_diag_colum_l       
         write(lun_out, *) 'chm_moyhr             = ' , chm_moyhr   
         write(lun_out, *) 'chm_acchr             = ' , chm_acchr   
         write(lun_out, *) 'jd,id,dlev,it,itr     = ' , jd,id,dlev,it,itr
         write(lun_out, *) 'nk_start              = ' , nk_start
      endif
      err = fclos (unf)
      write (0, *) 'CHM_NML - FAULTY CHEMISTRY NAMELIST -> PLEASE REVISE '
      chm_nml     = -1
      return
   else if (read_status < 0) then
      write (0, *) ' No chemistry_cfgs found in gem_settings --> ABORT ALL!!!!'
      chm_nml     = -1
      err = fclos (unf)
      return
   endif
!
!  A chemistry namelist was read in successfully.
!  Close namelist file
!
   err = fclos (unf)
!
!  Detect Master switch. If false, NORMAL EXIT WITH MESSAGE 
!
   if (.not.chm_master) then
      if (lun_out >= 0) write(lun_out, 1010)
      chm_nml = 1
      return
   endif
!
   if (.not.chm_emis_master) then
      if (lun_out > 0) then
         if(chm_get_ae_emis_l .or. chm_get_be_emis_l .or. chm_get_mj_emis_l ) then
         write(lun_out, *) '> Warning'
         write(lun_out, *) '> Emission master switch set to false '
         write(lun_out, *) '> chm_get_ae_emis_l, chm_get_be_emis_l and chm_get_mj_emis_l set to false'
         end if
      end if
      chm_get_ae_emis_l = .false.
      chm_get_be_emis_l = .false.
      chm_get_mj_emis_l = .false.
   else
      if(.not.chm_get_ae_emis_l .and. .not.chm_get_be_emis_l .and. .not.chm_get_mj_emis_l ) &
         chm_emis_master=.false.
   endif
!
   if (.not. chm_diag_colum_l .and. chm_diag_accum_l ) then
      if (lun_out > 0) then
         write(lun_out, *) '> Warning'
         write(lun_out, *) '> Cannot request accumulator without column diagnostic '
         write(lun_out, *) '> Set chm_diag_colum_l to true '
      end if
      chm_diag_accum_l = chm_diag_colum_l
   endif

! Consistency check according to selected model (NIL, MACH, LINOZ, etc)
!
   istatus = 0
!
   select case (chm_mono_s)
     case ('CLIP', 'ILMC', 'NIL')
      continue
     case default
      write(0, *) '### Error in chm_nml ###'
      write(0, *) '# CHM_MONO_S unknown: ', chm_mono_s
      write(0, *) '###         ABORT         ###'
      istatus = min(istatus,-1)
   end select

   select case (chm_mass_s)
     case ('BC', 'NIL')
      continue
     case default
      write(0, *) '### Error in chm_nml ###'
      write(0, *) '# CHM_MASS_S unknown: ', chm_mass_s
      write(0, *) '###         ABORT         ###'
      istatus = min(istatus,-1)
   end select

   if ((chm_mono_s == 'NIL') .and. (chm_mass_s == 'NIL')) then
      write(0, *) '###              Warning in chm_nml              ###'
      write(0, *) '# When CHM_MASS_S is nil, monotonicity is applied unless adw_mono_L is set to false in adw_cfgs'
      write(0, *) '###                                              ###'
   endif
!
model: select case (chm_model_s)
   case ('NIL') model
      if (lun_out > 0) then
         write(lun_out, *) '> Warning'
         write(lun_out, *) '> No chemistry package selected'
      endif
      chm_nml    = 1
      return
   case ('MACH') model
!
!     MACH MODEL
!     =====================================================================
!
!     Gas chemistry
!     =============
      if (chm_pkg_gas_s == 'NIL') then
         chm_soa_s           = 'NIL'      !Override chm_soa_s
         chm_strato_s        = 'NIL'      !Override chm_strato_s
         if (lun_out > 0) then
            write(lun_out, *) '> Warning'
            write(lun_out, *) '> No gas package selected'
            write(lun_out, *) '> chm_soa_s = NIL'
            write(lun_out, *) '> chm_strato_s = NIL'
            if (chm_pkg_pm_s /=  'NIL') then
               write(lun_out, *) '> Warning'
               write(lun_out, *) '> chm_pkg_pm_s requires gas species '
               write(lun_out, *) '> gas fields will be created but gas chemistry will not be performed '
            end if
         end if
      end if

!     Aerosol chemistry
!     =================
      if ((chm_pkg_pm_s == 'NIL') .or.  (chm_pkg_pm_s == 'GOCART_SO2')) then
         chm_soa_s           = 'NIL'      !Override chm_soa_s
         chm_seaflux_s       = 'NIL'      !Override chm_seaflux_s
         chm_winddust_s      = 'NIL'      !Override chm_winddust_s
         chm_hetchem_s       = 'NIL'      !Override chm_hetchem_s
         chm_pm_drydep_s     = 'NIL'      !Override chm_pm_drydep_s
         chm_aqueous_s       = 'NIL'      !Override chm_aqueous_s
         chm_fugitive_dust_s = 'NIL'      !Override chm_fugitive_dust_s
         chm_blcld_l         = .false.   !Override chm_blcld_l
         chm_diag_wetdep_l   = .false.   !Override chm_diag_wetdp_l
         if (lun_out > 0) then
            write(lun_out, *) '> Warning'
            write(lun_out, *) '> No PM package selected'
            write(lun_out, *) '> chm_soa_s = NIL, chm_seaflux_s = NIL, chm_winddust_s = NIL'
            write(lun_out, *) '> chm_hetchem_s = NIL, chm_pm_drydep_s = NIL, chm_aqueous_s = NIL, chm_fugitive_dust_s = NIL' 
            write(lun_out, *) '> chm_blcld_l = .false. , chm_diag_wetdp_l = .false. ' 
         end if
      else
         if (chm_pkg_pm_s == 'CAM2BINS') then
            isize = 2
            icob  = 2
         else if (chm_pkg_pm_s == 'CAM12BINS') then
            isize = 12
            icob  = 12
         else 
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# Aerosol package unknown: ', chm_pkg_pm_s
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
         end if

         if (chm_intrsec_ndiv < 1) then
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# chm_intrsec_ndiv must be positive and greater than zero'
            write(0, *) '# you choose: ', chm_intrsec_ndiv
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
         end if
         if (chm_intrsec_ver < 1 .or. chm_intrsec_ver > 6) then
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# chm_intrsec_ver must be between 1 and 6'
            write(0, *) '# you choose: ', chm_intrsec_ver
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
         end if

!        Aerosol in/below cloud process
!        ==============================
         if (chm_incld_l) then
            iincld = 1
            if (lun_out > 0) then
               write(lun_out, *) '> Warning'
               write(lun_out, *) '> chm_incld_l not an option (unused) in current version '
            end if
         else
            iincld = 0
         end if
         if (chm_blcld_l) then
            iblcld = 1
         else
            iblcld = 0
         end if

! Aerosol with/without an online gas chemistry scheme
! Currently key controls nothing, data flow identical for cam=1. & 10.
         if (chm_gaschem_online_l) then
            cam = 10.0
         else
            cam = 1.0
         end if

!        Aerosol coagulation
!        ===================
         icoag = chm_pm_coag_step_intvl

!        Dry deposition for PM
!        =====================
         select case (chm_pm_drydep_s)
            case ('ZHANG')
               idrydep = 1
            case ('NIL')
               idrydep = 0
               if (lun_out > 0) then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> No PM dry deposition package selected'
               endif
            case default
               write(0, *) '### Error in chm_nml ###'
               write(0, *) '# PM dry deposition package unknown: ', chm_pm_drydep_s
               write(0, *) '###         ABORT         ###'
               istatus = min(istatus,-1)
         end select

!        Heterogeneous chemistry
!        =======================
         select case (chm_hetchem_s)
           case ('HETV')
              if (lun_out > 0) then
                  write(lun_out, *) '> Warning for HETV'
                  write(lun_out, *) '> chm_hetchem_metstlb_l =', chm_hetchem_metstlb_l
              endif
              continue
           case ('NIL')
              if (lun_out > 0) then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> No heterogeneous chemistry package selected'
              endif
           case default
               write(0, *) '### Error in chm_nml ###'
               write(0, *) '# Heterogeneous chemistry package unknown: ', chm_hetchem_s
               write(0, *) '###         ABORT         ###'
               istatus = min(istatus,-1)
         end select

!        Sea salt
!        ========
         select case (chm_seaflux_s)
           case ('GONG_MONAHAN')
              i_ss = 1
              continue
           case ('GONG_MONAHAN_F')
              i_ss = 1
              continue
           case ('NIL')
              if (lun_out > 0) then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> No sea salt flux treatment'
              endif
           case default
               write(0, *) '### Error in chm_nml ###'
               write(0, *) '# Sea salt flux package unknown: ', chm_seaflux_s
               write(0, *) '###         ABORT         ###'
               istatus = min(istatus,-1)
         end select

!        Wind dust
!        =========
         select case (chm_winddust_s)
           case ('CAM_WINDDUST')
              if (lun_out > 0 .and. chm_pkg_pm_s == 'CAM2BINS') then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> CAM_WINDDUST inactive when chm_pkg_pm_s == CAM2BINS'
              endif
              continue
           case ('NIL')
              if (lun_out > 0) then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> No wind dust flux treatment'
              endif
           case default
              if (chm_pkg_pm_s == 'CAM2BINS') then
                  if (lun_out > 0) then
                      write(lun_out, *) '> Warning'
                      write(lun_out, *) '> CAM_WINDDUST inactive when chm_pkg_pm_s == CAM2BINS'
                  endif
              else
                  write(0, *) '### Error in chm_nml ###'
                  write(0, *) '# Wind dust flux package unknown: ', chm_winddust_s
                  write(0, *) '###         ABORT         ###'
                  istatus = min(istatus,-1)
              endif
      end select

!        Aqueous chemistry
!        =================
         select case (chm_aqueous_s)
           case ('GONG')
              continue
           case ('NIL')
              if (lun_out > 0) then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> No Aqueous phase chemistry package selected'
              endif
           case default
               write(0, *) '### Error in chm_nml ###'
               write(0, *) '# Aqueous phase chemistry package unknown: ', chm_aqueous_s
               write(0, *) '###         ABORT         ###'
               istatus = min(istatus,-1)
         end select

!        Fugitive dust 
!        =============
         select case (chm_fugitive_dust_s)
           case ('MORAN')
              continue
           case ('NIL')
              if (lun_out > 0) then
                  write(lun_out, *) '> Warning'
                  write(lun_out, *) '> No fugitive dust reduction control applied'
              endif
           case default
               write(0, *) '### Error in chm_nml ###'
               write(0, *) '# Fugitive dust package unknown: ', chm_fugitive_dust_s
               write(0, *) '###         ABORT         ###'
               istatus = min(istatus,-1)
         end select

      end if ! End of if on value of chm_pkg_pm_s


!     Biogenic chemistry package
!     ==========================
      if ( .not. chm_get_be_emis_l ) then
        if (lun_out > 0) then
            write(lun_out, *) '> Warning'
            write(lun_out, *) '> No biogenic emissions read, biogenic chemistry package set to NIL'
        endif
        chm_biog_s = 'NIL'
      endif
      select case (chm_biog_s)
         case ('BEIS3.09')
            continue
         case ('NIL')
            if (lun_out > 0) then
               write(lun_out, *) '> No biogenic package selected'
            endif
         case default
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# Biogenic emission package unknown: ', chm_biog_s
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
      end select

!     Dry deposition for gas
!     ======================
      select case (chm_gas_drydep_s)
         case ('ROBICHAUD')
            continue
         case ('NIL')
            if (lun_out > 0) then
               write(lun_out, *) '> Warning'
               write(lun_out, *) '> No dry deposition package selected'
            endif
         case default
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# Dry deposition package unknown: ', chm_gas_drydep_s
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
      end select

!     SOA chemistry package
!     =====================
      select case (chm_soa_s)
        case ('JIANG', 'ODUM')
           continue
        case ('NIL')
           if (lun_out > 0) then
               write(lun_out, *) '> Warning'
               write(lun_out, *) '> No SOA chemistry package selected'
           endif
        case default
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# SOA chemistry package unknown: ', chm_soa_s
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
      end select
      
!
!     Stratospheric O3 chemistry
!     ==========================
      if (chm_strato_s == 'LINOZ') then
         if( Lun_out > 0 ) write(lun_out,*)'CHM_SET: calling LINOZ_TABLE'
         call linoz_litcoeff ( )

      else if (chm_strato_s == 'NIL') then
         if (lun_out > 0) then
            write(lun_out, *) '> Warning'
            write(lun_out, *) '> No stratospheric O3 package selected'
         end if
      end if
!
!     Vertical diffusion
!     ==================
      select case (chm_vert_diff_s)
         case ('RPNPHY', 'RPNPHY_I')
            continue
         case ('FLUX', 'BOUNDARY')
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# Vertical diffusion algorithm : ', chm_vert_diff_s
            write(0, *) '# not yet supported with GEM-MACH version 2'        
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
         case ('NIL')
            if (lun_out > 0) then
               write(lun_out, *) '> Warning'
               write(lun_out, *) '> No diffusion package selected'
               write(lun_out, *) '> Area emissions will not be treated '
            endif
         case default
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# Vertical diffusion algorithm unknown: ', chm_vert_diff_s
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
      end select

!     Plumerise
!     =========
      if ( .not. chm_get_mj_emis_l ) then
        if (lun_out > 0) then
            write(lun_out, *) '> Warning'
            write(lun_out, *) '> No major point emissions read, plumerise package set to NIL'
        endif
        chm_mj_treatment_s = 'NIL'
      endif
      select case (chm_mj_treatment_s)
        case ('PLUMERISE')
           continue
        case ('NIL')
           if (chm_get_mj_emis_l .and. (lun_out > 0)) then
               write(lun_out, *) '> Warning'
               write(lun_out, *) '> Major point emissions read but no plumerise '
           endif
        case default
            write(0, *) '### Error in chm_nml ###'
            write(0, *) '# Major points treatment package unknown: ', chm_mj_treatment_s
            write(0, *) '###         ABORT         ###'
            istatus = min(istatus,-1)
      end select
!
!
! Also, intialize the flag chm_do_mjpts_l to false. This flag is used
! to indicate the number of actual point sources found in the local
! domain, since it can be easily 0 in any given MPI tile due to geographic 
! location.
!
      chm_do_mjpts_l  = .false.

   case ('LINOZ') model
      if( Lun_out > 0 ) write(lun_out,*)'CHM_SET: calling LINOZ_TABLE'
      call linoz_litcoeff ( )
!!
!!     LINOZ MODEL
!!     =====================================================================
!!
!     Gas chemistry
!     =============
      chm_pkg_gas_s = 'NIL'      !Override chm_pkg_gas_s
      chm_soa_s     = 'NIL'      !Override chm_soa_s
      chm_pkg_pm_s  = 'NIL'      !Override chm_pkg_pm_s
      if (lun_out > 0) then
         write(lun_out, *) '> Warning'
         write(lun_out, *) '> GEM-LINOZ model selected'
         write(lun_out, *) '> Overriding the following gas chemistry parameters to NIL'
         write(lun_out, *) '> chm_pkg_gas_s = NIL'
         write(lun_out, *) '> chm_soa_s = NIL'
         write(lun_out, *) '> chm_pkg_pm_s =  NIL'
      end if

!     Aerosol chemistry
!     =================
      if (chm_pkg_pm_s == 'NIL') then
         chm_soa_s           = 'NIL'      !Override chm_soa_s
         chm_seaflux_s       = 'NIL'      !Override chm_seaflux_s
         chm_winddust_s      = 'NIL'      !Override chm_winddust_s
         chm_hetchem_s       = 'NIL'      !Override chm_hetchem_s
         chm_hetchem_metstlb_l = .false.  !!Override chm_hetchem_metstlb_l
         chm_pm_drydep_s     = 'NIL'      !Override chm_pm_drydep_s
         chm_aqueous_s       = 'NIL'      !Override chm_aqueous_s
         chm_fugitive_dust_s = 'NIL'      !Override chm_fugitive_dust_s
         chm_blcld_l         = .false.    !Override chm_blcld_l
         chm_diag_wetdep_l   = .false.    !Override chm_diag_wetdp_l
         if (lun_out > 0) then
            write(lun_out, *) '> Warning'
            write(lun_out, *) '> GEM-LINOZ model selected'
         write(lun_out, *) '> Overriding the following aerosol chemistry parameters to NIL'
            write(lun_out, *) '> chm_soa_s           = NIL' 
            write(lun_out, *) '> chm_seaflux_s       = NIL'
            write(lun_out, *) '> chm_winddust_s      = NIL'
            write(lun_out, *) '> chm_hetchem_s       = NIL'
            write(lun_out, *) '> chm_hetchem_metstlb_l = .false. '
            write(lun_out, *) '> chm_pm_drydep_s     = NIL'
            write(lun_out, *) '> chm_aqueous_s       = NIL'
            write(lun_out, *) '> chm_fugitive_dust_s = NIL'
            write(lun_out, *) '> chm_blcld_l         = .false. '
            write(lun_out, *) '> chm_diag_wetdp_l    = .false. '
         end if
      end if

!     Aerosol in/below cloud process
!     ==============================

      chm_incld_l = .false.
      chm_gaschem_online_l = .false.

!     Biogenic chemistry package
!     ==========================

      chm_biog_s = 'NIL'

!     Dry deposition for gas
!     ======================

      chm_gas_drydep_s = 'NIL'

!     Stratospheric O3 chemistry
!     ==========================

      chm_strato_s = 'NIL'

!     Vertical diffusion
!     ==================

      chm_vert_diff_s = 'NIL'

!     Diagnostics for dry deposition (gases and particles)
!     =============================================================

      chm_diag_drydep_L = .false.

      if (lun_out > 0) then
         write(lun_out, *) '> Warning'
         write(lun_out, *) '> GEM-LINOZ model selected'
         write(lun_out, *) '> Overriding the following namelist parameters'
         write(lun_out, *) '> chm_incld_l = .false.'
         write(lun_out, *) '> chm_gaschem_online_l = .false.'
         write(lun_out, *) '> chm_biog_s= NIL'
         write(lun_out, *) '> chm_gas_drydep_s = NIL'
         write(lun_out, *) '> chm_strato_s= NIL'
         write(lun_out, *) '> chm_vert_diff_s = NIL'
         write(lun_out, *) '> chm_diag_drydep_L = .false.'
         write(lun_out, *) '> End overriding GEM-LINOZ namelist parameters '
      end if


   case default model
!
!     INVALID MODEL NAME
!     =====================================================================
!
      write(0, *) '### Error in chm_nml ###'
      write(0, *) '# Chemistry package unknown: ', chm_model_s
      write(0, *) '###         ABORT         ###'
      istatus = min(istatus,-1)
end select model
      call chm_stop('chm_nml',istatus)

   if (lun_out >= 0 ) then
      write(lun_out, *) 'Final read for chemistry_cfgs namelist:'
      write(lun_out, *) 'chm_master            =  ' ,chm_master
      write(lun_out, *) 'chm_emis_master       =  ' ,chm_emis_master
      write(lun_out, *) 'chm_model_s           = ' , chm_model_s
      write(lun_out, *) 'chm_pkg_gas_s         = ' , chm_pkg_gas_s
      write(lun_out, *) 'chm_pkg_pm_s          = ' , chm_pkg_pm_s
      write(lun_out, *) 'chm_biog_s            = ' , chm_biog_s
      write(lun_out, *) 'chm_get_ae_emis_l     = ' , chm_get_ae_emis_l
      write(lun_out, *) 'chm_get_be_emis_l     = ' , chm_get_be_emis_l
      write(lun_out, *) 'chm_get_mj_emis_l     = ' , chm_get_mj_emis_l
      write(lun_out, *) 'chm_get_fire_emis_l   = ' , chm_get_fire_emis_l
      write(lun_out, *) 'chm_htap_emis_l       = ' , chm_htap_emis_l
      write(lun_out, *) 'chm_gas_drydep_s      = ' , chm_gas_drydep_s
      write(lun_out, *) 'chm_soa_s             = ' , chm_soa_s
      write(lun_out, *) 'chm_strato_s          = ' , chm_strato_s       
      write(lun_out, *) 'chm_vert_diff_s       = ' , chm_vert_diff_s
      write(lun_out, *) 'chm_mass_s            = ' , chm_mass_s
      write(lun_out, *) 'chm_mono_s            = ' , chm_mono_s
      write(lun_out, *) 'chm_mj_treatment_s    = ' , chm_mj_treatment_s
      write(lun_out, *) 'chm_seaflux_s         = ' , chm_seaflux_s
      write(lun_out, *) 'chm_winddust_s        = ' , chm_winddust_s
      write(lun_out, *) 'chm_hetchem_s         = ' , chm_hetchem_s
      write(lun_out, *) 'chm_hetchem_metstlb_l = ' , chm_hetchem_metstlb_l
      write(lun_out, *) 'chm_step_factor       = ' , chm_step_factor
      write(lun_out, *) 'em_nesdt              = ' , em_nesdt
      write(lun_out, *) 'chm_pm_drydep_s       = ' , chm_pm_drydep_s
      write(lun_out, *) 'chm_aqueous_s         = ' , chm_aqueous_s
      write(lun_out, *) 'chm_fugitive_dust_s   = ' , chm_fugitive_dust_s
      write(lun_out, *) 'chm_incld_l           = ' , chm_incld_l
      write(lun_out, *) 'chm_blcld_l           = ' , chm_blcld_l
      write(lun_out, *) 'chm_gaschem_online_l  = ' , chm_gaschem_online_l
      write(lun_out, *) 'chm_pm_coag_step_intvl= ' , chm_pm_coag_step_intvl
      write(lun_out, *) 'chm_debug_2d_i        = ' , chm_debug_2d_i
      write(lun_out, *) 'chm_debug_3d_i        = ' , chm_debug_3d_i
      write(lun_out, *) 'chm_intrsec_ndiv      = ' , chm_intrsec_ndiv
      write(lun_out, *) 'chm_intrsec_ver       = ' , chm_intrsec_ver
      write(lun_out, *) 'chm_aqhi_l            = ' , chm_aqhi_l
      write(lun_out, *) 'chm_diag_wetdep_l     = ' , chm_diag_wetdep_l
      write(lun_out, *) 'chm_diag_drydep_l     = ' , chm_diag_drydep_l
      write(lun_out, *) 'chm_diag_accum_l      = ' , chm_diag_accum_l  
      write(lun_out, *) 'chm_diag_colum_l      = ' , chm_diag_colum_l  
      write(lun_out, *) 'chm_moyhr             = ' , chm_moyhr         
      write(lun_out, *) 'chm_acchr             = ' , chm_acchr        
      write(lun_out, *) 'jd,id,dlev,it,itr     = ' , jd,id,dlev,it,itr
      write(lun_out, *) 'nk_start              = ' , nk_start
      write(lun_out, *) 'the following keys are currently useless: chm_incld_l, chm_gaschem_online_l'
   endif

   istatus = 0
   if (.not. chm_pkg_fields_init( )) istatus = -1 
   call chm_stop('chm_pkg_fields_init', istatus)
   chm_nml    = 1
   
1000 format (/,' NAMELIST FILE ',a,' NOT AVAILABLE - ERROR->ABORT')
1010 format (/,' CHM_NML: MASTER CHEMICAL SWITCH OFF ---> ALL CHEMISTRY SHUT OFF!!!')

end function chm_nml
