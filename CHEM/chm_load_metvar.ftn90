!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------
!
!!if_on
subroutine chm_load_metvar(busdyn, busdyn_size, busper, busper_size, busvol, busvol_size, &
                           metvar2d, metvar3d, metvar_vegf, metvar_glacier)
  use chm_metvar_mod
  use chm_ptopo_grid_mod, only: chm_ni, chm_nk
!!if_off
  use chm_utils_mod, only: ik, chm_lun_out, global_debug, chm_tlift
  use chm_headers_mod, only: chm_geopot
  use chm_consphychm_mod, only: grav
  use chm_phyvar_mod
  
  implicit none
!!if_on
 integer(kind=4), intent (in) :: busvol_size, busper_size, busdyn_size
 real(kind=4),    intent (in) :: busdyn        (busdyn_size)
 real(kind=4),    intent (in) :: busper        (busper_size)
 real(kind=4),    intent (in) :: busvol        (busvol_size)
 real(kind=4),    intent(out) :: metvar2d      (chm_ni,SIZE_MV2D)
 real(kind=4),    intent(out) :: metvar3d      (chm_ni,chm_nk,SIZE_MV3D)
 real(kind=4),    intent(out) :: metvar_vegf   (chm_ni,26)
 real(kind=4),    intent(out) :: metvar_glacier(chm_ni,2)
!!if_off
!      
!  Local variables
!
  integer(kind=4)         :: i, k, this_ik, istat, this_ikp, this_ikm
!  integer :: iomp_alloc_lock
  logical(kind=4)         :: local_dbg
  real(kind=4)            :: p_kfc_m, p_kfcl_m, p_kfcs_m, p_kfc, p_kfcprod, p_kfcevap, p_cs_p, p_cs, p_csprod, p_csevap
  real(kind=4), parameter :: smf = 1.0e-15
!
!  BEGIN CODE
!
  local_dbg = (.false. .or. global_debug)
         
  if (local_dbg) then
     write(chm_lun_out, *) "Entre dans chm_load_metvar"
  endif

  if (local_dbg) then
     write(chm_lun_out, *) "chm_ni, chm_nk        : " , chm_ni, chm_nk
     write(chm_lun_out, *) "============ 2D METVAR ================" 
     write(chm_lun_out, *) "---------------------------------------" 
     write(chm_lun_out, *) "SIZE_MV2D                  : " , SIZE_MV2D
     write(chm_lun_out, *) "MV2D_PPLUS      , pplus    : " , MV2D_PPLUS   , pplus   
     write(chm_lun_out, *) "MV2D_DXDY       , dxdy     : " , MV2D_DXDY    , dxdy    
     write(chm_lun_out, *) "MV2D_TSURF      , tsurf    : " , MV2D_TSURF   , tsurf   
     write(chm_lun_out, *) "MV2D_TDIAG      , tdiag    : " , MV2D_TDIAG   , tdiag   
     write(chm_lun_out, *) "MV2D_QDIAG      , qdiag    : " , MV2D_QDIAG   , qdiag   
     write(chm_lun_out, *) "MV2D_UDIAG      , udiag    : " , MV2D_UDIAG   , udiag   
     write(chm_lun_out, *) "MV2D_VDIAG      , vdiag    : " , MV2D_VDIAG   , vdiag   
     write(chm_lun_out, *) "MV2D_GLSEA      , glsea    : " , MV2D_GLSEA   , glsea   
     write(chm_lun_out, *) "MV2D_SNODP      , snodp    : " , MV2D_SNODP   , snodp   
     write(chm_lun_out, *) "MV2D_H          , h        : " , MV2D_H       , h       
     write(chm_lun_out, *) "MV2D_DLAT       , dlat     : " , MV2D_DLAT    , dlat    
     write(chm_lun_out, *) "MV2D_DLON       , dlon     : " , MV2D_DLON    , dlon    
     write(chm_lun_out, *) "MV2D_FLUSOLIS   , flusolis : " , MV2D_FLUSOLIS, flusolis
     write(chm_lun_out, *) "MV2D_MT         , mt       : " , MV2D_MT      , mt      
     write(chm_lun_out, *) "MV2D_UE         , ue       : " , MV2D_UE      , ue      
     write(chm_lun_out, *) "MV2D_CANG       , cang     : " , MV2D_CANG    , cang    
     write(chm_lun_out, *) "MV2D_KCL        , kcl      : " , MV2D_KCL     , kcl     
     write(chm_lun_out, *) "MV2D_RAINRATE   , rainrate : " , MV2D_RAINRATE, rainrate
     write(chm_lun_out, *) "MV2D_ILMO       , ilmo     : " , MV2D_ILMO    , ilmo    
     write(chm_lun_out, *) "---------------------------------------"   
     write(chm_lun_out, *) "============ 3D METVAR ================"
     write(chm_lun_out, *) "---------------------------------------" 
     write(chm_lun_out, *) "SIZE_MV3D                  : " , SIZE_MV3D 
     write(chm_lun_out, *) "MV3D_TPLUS      , tplus    : " , MV3D_TPLUS   , tplus         
     write(chm_lun_out, *) "MV3D_UPLUS      , uplus    : " , MV3D_UPLUS   , uplus         
     write(chm_lun_out, *) "MV3D_VPLUS      , vplus    : " , MV3D_VPLUS   , vplus         
     write(chm_lun_out, *) "MV3D_HUPLUS     , huplus   : " , MV3D_HUPLUS  , huplus        
     write(chm_lun_out, *) "MV3D_QCPLUS     , qcplus   : " , MV3D_QCPLUS  , qcplus                
     write(chm_lun_out, *) "MV3D_SIGM       , sigm     : " , MV3D_SIGM    , sigm          
     write(chm_lun_out, *) "MV3D_SIGT       , sigt     : " , MV3D_SIGT    , sigt          
     write(chm_lun_out, *) "MV3D_WPLUS      , wplus    : " , MV3D_WPLUS   , wplus 
     write(chm_lun_out, *) "MV3D_FTOT       , ftot     : " , MV3D_FTOT    , ftot          
     write(chm_lun_out, *) "MV3D_FXP        , fxp      : " , MV3D_FXP     , fxp           
     write(chm_lun_out, *) "MV3D_FDC        , fdc      : " , MV3D_FDC     , fdc           
     write(chm_lun_out, *) "MV3D_KT         , kt       : " , MV3D_KT      , kt      
     write(chm_lun_out, *) "MV3D_RNFLX      , rnflx    : " , MV3D_RNFLX   , rnflx , " + ",kfcrf        
     write(chm_lun_out, *) "MV3D_SNOFLX     , snoflx   : " , MV3D_SNOFLX  , snoflx  , " + ",kfcsf      
     write(chm_lun_out, *) "MV3D_PEVP       , pevp     : " , MV3D_PEVP    , fevp , " + eqn. "         
     write(chm_lun_out, *) "MV3D_PPRO       , ppro     : " , MV3D_PPRO    , f12  , " + ", qrkfc         
     write(chm_lun_out, *) "MV3D_AT2M       , AT2M     : " , MV3D_AT2M    , AT2M    
     write(chm_lun_out, *) "---------------------------------------" 
     write(chm_lun_out, *) "============ END METVAR PRINT ========="  
     write(chm_lun_out, *) " And now some values from metvar2d: "
     write(chm_lun_out, *) " metvar2d(1,1),metvar2d(chm_ni,SIZE_MV2D)         :  ", metvar2d(1,1),metvar2d(chm_ni,SIZE_MV2D)
     write(chm_lun_out, *) " And now some values from metvar3d: "
     write(chm_lun_out, *) " metvar3d(1,1,1),metvar3d(chm_ni,chm_nk,SIZE_MV3D):  ", metvar3d(1,1,1),metvar3d(chm_ni,chm_nk,SIZE_MV3D)
  endif
!
! Load the 2d arrays
!
!     Dynamic bus
!
  metvar2d(:,MV2D_MT)       = busdyn(mt      : (mt       + chm_ni - 1)) / grav
  metvar2d(:,MV2D_PPLUS)    = busdyn(pplus   : (pplus    + chm_ni - 1))
!
!     Permanent bus
!
  metvar2d(:,MV2D_DLAT)     = busper(dlat    : (dlat     + chm_ni - 1))
  metvar2d(:,MV2D_DLON)     = busper(dlon    : (dlon     + chm_ni - 1))
  metvar2d(:,MV2D_DXDY)     = busper(dxdy    : (dxdy     + chm_ni - 1))
  metvar2d(:,MV2D_FLUSOLIS) = busper(flusolis: (flusolis + chm_ni - 1))
  metvar2d(:,MV2D_GLSEA)    = busper(glsea   : (glsea    + chm_ni - 1))
  metvar2d(:,MV2D_H)        = busper(h       : (h        + chm_ni - 1))
  metvar2d(:,MV2D_QDIAG)    = busper(qdiag   : (qdiag    + chm_ni - 1))
  metvar2d(:,MV2D_SNODP)    = busper(snodp   : (snodp    + chm_ni - 1))
  metvar2d(:,MV2D_TDIAG)    = busper(tdiag   : (tdiag    + chm_ni - 1))
  metvar2d(:,MV2D_TSURF)    = busper(tsurf   : (tsurf    + chm_ni - 1))
  metvar2d(:,MV2D_UDIAG)    = busper(udiag   : (udiag    + chm_ni - 1))
  metvar2d(:,MV2D_VDIAG)    = busper(vdiag   : (vdiag    + chm_ni - 1))
! aggregated Inverse of Monin-Obukhov in 5th position
  do i = 1, chm_ni
     this_ik = ik(i, 5, chm_ni)
     metvar2d(i,MV2D_ILMO)      = busper(ilmo + this_ik)
  enddo
!
!     Volatile bus
!
  metvar2d(:,MV2D_CANG)     = amax1(-1.0, amin1(1.0, busvol(cang    : (cang     + chm_ni - 1))))
  metvar2d(:,MV2D_KCL)      = busvol(kcl     : (kcl      + chm_ni - 1))
  metvar2d(:,MV2D_RAINRATE) = busvol(rainrate: (rainrate + chm_ni - 1))
  metvar2d(:,MV2D_UE)       = busvol(ue      : (ue       + chm_ni - 1))
!
! Load the 3D arrays
!
  do k = 1, chm_nk
     do i = 1, chm_ni
        this_ik = ik(i, k, chm_ni)
!
!           Dynamic bus
!
        metvar3d(i, k, MV3D_HUPLUS)   = max(0.,busdyn(huplus    + this_ik))
        metvar3d(i, k, MV3D_QCPLUS)   = max(0.,busdyn(qcplus    + this_ik))
        metvar3d(i, k, MV3D_SIGM)     = busdyn(sigm      + this_ik)
        metvar3d(i, k, MV3D_SIGT)     = busdyn(sigt      + this_ik)
        metvar3d(i, k, MV3D_TPLUS)    = busdyn(tplus     + this_ik)
        metvar3d(i, k, MV3D_UPLUS)    = busdyn(uplus     + this_ik)
        metvar3d(i, k, MV3D_VPLUS)    = busdyn(vplus     + this_ik)
        metvar3d(i, k, MV3D_WPLUS)    = busdyn(wplus     + this_ik)
!
!           Permanent bus
!
        metvar3d(i, k, MV3D_FDC)      = busper(fdc       + this_ik)
        metvar3d(i, k, MV3D_FTOT)     = busper(ftot      + this_ik)
        metvar3d(i, k, MV3D_FXP)      = busper(fxp       + this_ik)
!
!           Volatile bus
!
        metvar3d(i, k, MV3D_KT)       = busvol(kt        + this_ik)
        metvar3d(i, k, MV3D_AT2M)     = busvol(AT2M      + this_ik)
!
!           Mixed sources


        if (qrkfc > 0 ) then                ! KFC used
        
!       Condensation fluxes, production and evaporation (CONSUN or MY) to be combined with those of KFC
          this_ikp = ik(i, k+1, chm_ni)
!
          p_cs_p = busvol(rnflx + this_ikp) + busvol(snoflx + this_ikp)
          p_cs   = busvol(rnflx + this_ik ) + busvol(snoflx + this_ik )
          p_csevap = p_cs
          if (busvol(fevp + this_ik) < 1.) p_csevap =  busvol(fevp + this_ik) * p_cs_p /(1.- busvol(fevp + this_ik))
          p_csprod = p_cs_p - p_cs + p_csevap
!
!         KFC fluxes, production and evaporation
          this_ikm = ik(i, k-1, chm_ni)
!
          p_kfc_m =  0.0
          p_kfcl_m =  0.0
          p_kfcs_m =  0.0
          if( k > 1) then
             p_kfc_m =  busper(kfcrf + this_ikm) + busper(kfcsf + this_ikm)
             p_kfcl_m =  busper(kfcrf + this_ikm)
             p_kfcs_m =  busper(kfcsf + this_ikm)
          endif
          p_kfc   =  busper(kfcrf + this_ik ) + busper(kfcsf + this_ik )
          p_kfcevap =  max(0.,p_kfc_m - p_kfc)
          p_kfcprod =  p_kfc - p_kfc_m + p_kfcevap
          metvar3d(i, k, MV3D_RNFLX)    = busvol(rnflx     + this_ik) + p_kfcl_m
          metvar3d(i, k, MV3D_SNOFLX)   = busvol(snoflx    + this_ik) + p_kfcs_m
          metvar3d(i, k, MV3D_PEVP)     = min(1.,max(0.,(p_csevap + p_kfcevap) / ( p_cs + p_csprod + p_kfc_m + p_kfcprod + smf)))
          metvar3d(i, k, MV3D_PPRO)     = max(0.,(busvol(f12       + this_ik) + busper(qrkfc     + this_ik)))
        else
          metvar3d(i, k, MV3D_RNFLX)    = busvol(rnflx     + this_ik)
          metvar3d(i, k, MV3D_SNOFLX)   = busvol(snoflx    + this_ik)
          metvar3d(i, k, MV3D_PEVP)     = busvol(fevp      + this_ik)
          metvar3d(i, k, MV3D_PPRO)     = max(0.,busvol(f12       + this_ik))
        endif
     end do
  end do
!
! Calculate geopotential height of thermodynamic levels as height above ground [m]
!
  call chm_geopot(metvar3d,metvar2d)
!
!           Use sigma value at level chm_nk to determine value of chm_tlift
!           if sigt(chm_nk) = sigm(chm_nk) last prognostic momentum & thermodynamic are colocated
!
  chm_tlift = 1
  if (metvar3d(1, chm_nk, MV3D_SIGT) > metvar3d(1, chm_nk, MV3D_SIGM)) chm_tlift = 0
!

  do k = 1, 2
     do i = 1, chm_ni
        metvar_glacier(i, k) = busper(glacier + ik(i, k, chm_ni))
     end do
  end do
  do k = 1, 26
     do i = 1, chm_ni
        metvar_vegf(i, k) = busper(vegf + ik(i, k, chm_ni))
     end do
  end do
  if (local_dbg) then
     write(chm_lun_out, *) "EXIT chm_load_metvar"
     write(chm_lun_out, *) " "
  endif
  
  
end subroutine chm_load_metvar

