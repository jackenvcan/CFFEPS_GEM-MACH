!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_incld_upaqr.ftn90
! Creation       : S. Menard, S. Gravel, GEM-MACH, June 2008
! Description    : Diagnostically calculate H+, OH- AND FEMN
!
! Extra info     : ADOM  VERSION: ADOMIIB(CLEAN)  LEVEL: 06/09/89  STEADY  ENSR(AES)
!
! Arguments  IN
!             b        --> Aqueous variable coefficients
!             q1       --> cloudwater conc (g-w/m3 air)
!             q2       --> Ice/Snow conc (g-w/m3 air)
!             rad1     --> CW droplet radii   (m)
!             t        --> Temperature (K)
!             ti       --> Inverse temperature (1/K)
!             rtw      --> TEMP*RGAS/WDEN
!             itask    --> itask=0 for calculations of equilibrium & kinetic reactions for q > 0
!                          itask=1 for calculations of only equilibrium reactions for q1
!             inew     --> inew is assumed=1 when itask=1
!
!            OUT
!              R       --> Rate constants for aqueous-phase
!
!            INOUT
!              AQ      --> Aqueous sp. conc(molar) in cloud water & Ice/Snow
!              PGSCAV  --> Gas/part scavenging (or diffusion)
!
!=============================================================================
!
!!if_on
subroutine mach_incld_upaqr (AQ, PGSCAV, q1, q2, rad1, t, ti, rtw, itask, inew, R, b, gaz_conc)
   use mach_cam_utils_mod, only: maxnsg, maxnsaq
!!if_off
   use mach_incld_mod,     only: doh2o2, dorooh, domnfe
   implicit none
!!if_on
   real(kind=4),    intent   (in) :: q1
   real(kind=4),    intent   (in) :: q2
   real(kind=4),    intent   (in) :: rad1
   real(kind=4),    intent   (in) :: t
   real(kind=4),    intent   (in) :: ti
   real(kind=4),    intent   (in) :: rtw
   integer(kind=4), intent   (in) :: itask
   integer(kind=4), intent   (in) :: inew
   real(kind=4),    intent   (in) :: b       (5,2)
   real(kind=4),    intent   (in) :: gaz_conc(maxnsg)
   real(kind=4),    intent  (out) :: r       (25,2)
   real(kind=4),    intent(inout) :: aq      (maxnsaq,2)
   real(kind=4),    intent(inout) :: pgscav  (maxnsg,2)
!!if_off
!
!  Local variables
!
   integer, parameter :: nraq = 25
   integer(kind=4)    :: k, i
   real(kind=4)       :: h2a, h2b, h4, h6, h8, h10, h12a, h12b, h15a, h15b, h17, rndrop, bb, arg, aa, aaa
   real(kind=4)       :: xhp, xfe, xmn, xph, tfact, tsqi

!  set mean free path in air (m), sticking coeff, etc.
   real(kind=4), parameter :: mfpl = 1.e-07, stik = 1.e-3
   real(kind=4)            :: lrt(2)

!  set molecular weights of gases
   real(kind=4), dimension(maxnsg) :: mwt = (/64., 34., 62., 98., 115., 132., 63., 17., 80., 100., 48., 44./)

   external qqexit

!  itask=0 for calculations of equilibrium & kinetic reactions for q > 0
!  itask=1 for calculations of only equilibrium reactions for q1
!  inew=1 do all reactions (bec. q, t, pgscav have changed)
!  inew is assumed = 1 when itask = 1
!
!  inew = 0 do only special reactions (bec. only [c] has chANGED)
!
!
!                 SPECIES LIST
!       AQUEOUS                    GAS/PART.
!       -
!       1.  HSO3                   1.  SO2G
!       2.  H202                   2.  HPXG
!       3.  ROOH                   3.  RPXG
!       4.  SO4=                   4.  H2SO4 = SO4P1
!       5.  NO3-                   5.  NH4HSO4 = SO4P2
!       6.  NH4+                   6.  (NH4)2SO4 = SO4P3
!       7.  CAT1                   7.  HNO3G
!       8.  HCO3-                  8.  NH3G
!       9.  H+                     9.  NH4NO3 = NNO3P
!      10.  OH-                   10.  DUST
!      11.  FEMN                  11.  O3G
!      12.  O3                    12.  CO2G (CONSTANT)
!      13.  H2OA (CONSTANT)
!
!                  REACTION LIST
!                  -
!
!  1.     1.SO4P1          -->    B1*SO4= +   B3*H+
!  2.     1.SO2G           -->    B1*HSO3 +   B1*H+
!  3.     1.HSO3 +  1.H+   -->    B2*SO2G
!  4.     1.O3G            -->    B1*O3
!  5.     1.O3             -->    B2*O3G
!  6.     1.HPXG           -->    B1*H2O2
!  7.     1.H2O2           -->    B2*HPXG
!  8.     1.HNO3           -->    B1*NO3- +   B1*H+
!  9.     1.NO3- +  1.H+   -->    B2*HNO3
! 10.     1.RPXG           -->    B1*ROOH
! 11.     1.ROOH           -->    B2*RPXG
! 12.     1.NH3G           -->    B1*NH4+ +   B1*OH-
! 13.     1.NH4+ +  1.OH-  -->    B2*NH3G
! 14.     1.DUST           -->    B5*FEMN +   B4*HCO3 + B4*CAT1+
! 15.     1.CO2G           -->    B1*HCO3 +   B1*H+
! 16.     1.HCO3 +  1.H+   -->    B2*CO2G
! 17.     1.H+   +  1.OH-  -->   1.00H2OA
! 18.     1.H2OA           -->   1.00H+   +  1.00OH-
! 19.     1.HSO3 +  1.O3   -->   1.00SO4= +  1.00H+
! 20.     1.HSO3 +  1.H2O2 -->   1.00SO4= +  1.00H+
! 21.     1.HSO3 +  1.ROOH -->   1.00SO4= +  1.00H+
! 22.     1.HSO3    (FEMN) -->   1.00SO4= +  1.00H+
! 23.     1.SO4P2          -->    B1*SO4= +   B1*H+ + B1*NH4+
! 24.     1.SO4P3          -->    B1*SO4= + B3*NH4+
! 25.     1.NNO3P          -->    B1*NO3- + B1*NH4+

!  compute lrt's
   lrt(1) = q1 * rtw
   lrt(2) = q2 * rtw

   if (itask /= 1) go to 10
   go to 15
10    continue

   if (inew == 0) go to 200

!  initialize rates
15    continue
   do k = 1, 2
      do i = 1, nraq
         r(i, k) = 0.
      end do
   end do

!  evaluate necessary henry's law coefficients
   tsqi = ti * ti
   h2a = 10. ** (-10.65 + 1410. * ti)
   h2b = 10. ** (-4.84 + 870. * ti)
   h4 = 10. ** (-11.16 + 1040. * ti)
   h6 = 10. ** (-11.15 + 2990. * ti)
   h8 = 10. ** (-12.17 + 3780. * ti)

!  use recent data (lind and kok, jgr, vol. 91, pp 7889-7895, june 1986) for rooh solubility
   h10 = exp(5607 * ti - 13.41) * 1.e-6
   h12a = 10. ** (-9.50 + 1600. * ti)
   h12b = 10. ** (-13.914 + 2730. * ti)
   h15a = 10. ** (-10.66 + 760. * ti + 58000. * tsqi)
   h15b = 10. ** (-14.25 + 5190. * ti - 850000. * tsqi)
   h17 = 10. ** (-3.83 - 3030. * ti)

!  compute forward mass transfer rates for gases to cloudwater

!  number of cloudwater drops/m**3 air

   rndrop = 2.387324146e-7 * q1 / (rad1 * rad1 * rad1)
   bb = (0.7 + (1.333333333*(1. - stik) / stik))*mfpl / rad1 + 1.
   arg = 21171.42715 * t
   aa = 4.188790204 * mfpl * sqrt(arg)
   aaa = rndrop * aa * rad1 / bb
   do k = 1, 12
      if ( k <= 3 .or. k == 7 .or. k == 8 .or.  k >= 11 ) then
         pgscav(k, 1) =  aaa/sqrt(mwt(k))
      end if
   end do

!  note: pgscav inputs for part. by q1&q2  + gases by q2 are used!
!  evaluate mass transfer/equilibrium rate constants(ie. non-special)
   do k = 1, 2
      if (lrt(k) <= 0.) go to 100
      if (k == 2) go to 60
      r(1, k) = pgscav(4, k)
      r(2, k) = pgscav(1, k)
      r(3, k) = r(2, k) / (h2a * h2b * lrt(k))
      r(4, k) = pgscav(11, k)
!  limit forward rate for ozone to reduce round-off error
      if (k == 1 .and. r(4, k) > 1.e-8) r(4, k) = 1.e-8
      if (k == 2 .and. r(4, k) > 1.e-7) r(4, k) = 1.e-7
      r(5, k) = r(4, k) / (h4 * lrt(k))
!  set ozone concentration to equilibrium value
      aq(12, k) = b(1, k) * r(4, k) * gaz_conc(11) / r(5, k)
      r(6, k) = pgscav(2, k)
      r(7, k) = r(6, k) / (h6 * lrt(k))
      r(8, k) = pgscav(7, k)
      r(9, k) = r(8, k) / (h8 * lrt(k))
      r(10, k) = pgscav(3, k)
      r(11, k) = r(10, k) / (h10 * lrt(k))
      r(12, k) = pgscav(8, k)
      r(13, k) = r(12, k) / (h12a * h12b * lrt(k))
      r(14, k) = pgscav(10, k)
      r(15, k) = min(pgscav(12, k), 1.e-9)
      r(16, k) = r(15, k) / (h15a * h15b * lrt(k))
      r(18, k) = 0.1 * aq(9, k)
      r(17, k) = r(18, k) / h17
      r(23, k) = pgscav(5, k)
      r(24, k) = pgscav(6, k)
      r(25, k) = pgscav(9, k)
      go to 100
60    continue
      r(1, k) = pgscav(4, k)
      r(8, k) = pgscav(7, k)
      r(12, k) = pgscav(8, k)
      r(14, k) = pgscav(10, k)
      r(15, k) = 1.e-9
      r(16, k) = r(15, k) / (h15a * h15b * lrt(k))
      r(18, k) = 0.
      r(17, k) = 0.
      r(23, k) = pgscav(5, k)
      r(24, k) = pgscav(6, k)
      r(25, k) = pgscav(9, k)
100 end do
!
   if (itask == 1) return
!
!  compute rate constants that depend on [c]'s (each time step)
200   continue
!
!  evaluate special rate constants
   if (rtw <= 0.) then
      write(0, *) '### Error in mach_incld_upaqr ###'
      write(0, *) '# rtw <= 0'
      write(0, *) '###         ABORT         ###'
      call qqexit(1)
   end if
   if (lrt(1) <= 0.) go to 300
!  hso3 + o3
   r(19, 1) = (9.560496e9 + 2641716. / aq(9, 1)) * exp(-3019.6 * ti)
!  hso3 + h2o2
   if (doh2o2 <= 0.) then
      r(20, 1) = 0.
   else
      r(20, 1) = (1.81507711e13 * aq(9, 1)) * exp(-3673.8 * ti)
   end if
!  hso3 + rooh
   if (dorooh <= 0.) then
      r(21, 1) = 0.

!  organic peroxide oxidation rate = 50% of lind et al. 1984
!  paa rate.  2/21/85
   else
      r(21, 1) = exp(-3994.*(ti-(1./298.)))*(1.82e7*aq(9, 1)+300.3)
   end if
!  hso3 --> in presence of fe/mn
   if (domnfe < 0.) then
      r(22, 1) = 0.
   else

!  use ibusuki and takeuchis's expression for fe/mn catalyzed
!  oxidation rate (atmos. environ., vol. 21, no. 7, pp.1555-
!  1560, 1987).
      xhp = aq(9, 1)
      xfe = .95 * aq(11, 1)
      xmn = .05 * aq(11, 1)
      xph = -alog10(xhp)
!
!  note: 0.0033693 = 1/296.8k
      tfact = exp(-8431.16 * (ti - 0.0033693))
      if (xph < 4.2) then
         r(22, 1) = 3.72e7 * xmn * xfe * tfact * xhp ** (-0.74)
      else
         r(22, 1) = 2.51e13 * xmn * xfe * tfact * xhp ** 0.67
      end if
   end if
300   continue

   return
end
