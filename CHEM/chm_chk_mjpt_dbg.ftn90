!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------
!!if_on
 subroutine chm_chk_mjpt_dbg(busvol,busvol_size,slab_index,busdyn,busdyn_size)
!!if_off
  use chm_utils_mod
  use chm_ptopo_grid_mod
  implicit none
!!!!!!!!!!!!!!!! needs to be revised with changes in reading method for major points
!
! Subroutine argument declarations
!
!!if_on
  integer(kind=4), intent   (in)  :: busvol_size,busdyn_size,slab_index
  real(kind=4),    intent(inout)  :: busvol(busvol_size)
  real(kind=4),    intent(inout)  :: busdyn(busdyn_size)
!!if_off
! 
! Local variables 
! 
  integer(kind=4)            :: i,j,k
  integer(kind=4), parameter :: nsp_gas = 16
  integer(kind=4)            :: mjp_species_gas(nsp_gas)
  logical(kind=4)            :: local_dbg
  external qqexit

! mjp_species_gas(1:nsp_gas) = (/ sp_SO2,  sp_SO4,  sp_NO,   sp_NO2,  &
!                                 sp_ALKA, sp_ETHE, sp_ALKE, &
!                                 sp_TOLU, sp_AROM, sp_HCHO, sp_ALD2, sp_MEK,  &
!                                 sp_CRES, sp_ISOP, &
!                                 sp_CO,   sp_NH3   &
!                                        /)
   call qqexit(1) 

   local_dbg = (.false. .or. global_debug)

!
! if (local_dbg) then
!    write(chm_lun_out, *) 'Sacha: INSIDE chm_chk_mjpt_dbg ==> {lnb_sources,slab_index} = ',lnb_sources,slab_index
! endif
!
! Populate the output debug field with the points where a stack is located. This 
! field is later written to the output file for verification.
! Also, a check on the bounds of the stack position is made, and flagged, if out of bounds.
!
! if (local_dbg) then
!    write(chm_lun_out, *) 'chm_chk_mjpt_dbg -> {mjpt_gilc(1),mjpt_gjlc(1)}                   = ',mjpt_gilc(1),mjpt_gjlc(1)
!    write(chm_lun_out, *) 'chm_chk_mjpt_dbg -> {mjpt_gilc(nb_sources),mjpt_gjlc(nb_sources)} = ',mjpt_gilc(nb_sources),mjpt_gjlc(nb_sources)
! endif
! do i = 1,nb_sources
!    if ((nint(mjpt_gilc(i)) < 1).or.(nint(mjpt_gilc(i)) > chm_ni )) then
!       write(chm_lun_out, *) 'OUT OF BOUNDS IN chm_chk_mjpt_dgb: GILC(',i,') = ', &
!                              nint(mjpt_gilc(i))
!       return
!    endif
!    if ((nint(mjpt_gjlc(i)) < 1).or.(nint(mjpt_gjlc(i)) > chm_nj )) then
!       write(chm_lun_out, *) 'OUT OF BOUNDS IN chm_chk_mjpt_dgb: GJLC(',i,') = ', &
!                              nint(mjpt_gjlc(i))
!       return
!    endif
!    if (nint(mjpt_gjlc(i)) == slab_index) then
!       busvol(sm(dbg_2d(1)) % vol_offset + mjpt_gilc(i) - 1) =  &
!       busvol(sm(dbg_2d(1)) % vol_offset + mjpt_gilc(i) - 1) + 1.0
!    endif
! end do
! do i=1,nsp_gas
!   busvol(sm(dbg_3d(i)) % vol_offset : sm(dbg_3d(i)) % vol_offset +chm_ni*chm_nk-1 ) = &
!     busdyn(sm(mjp_species_gas(i)) % dyn_offset : sm(mjp_species_gas(i)) % dyn_offset +chm_ni*chm_nk-1)
! enddo
! 
 end subroutine chm_chk_mjpt_dbg
