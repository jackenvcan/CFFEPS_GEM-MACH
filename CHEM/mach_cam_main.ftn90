!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_main.ftn90
! Creation       : S. Gong, W. Gong, V. Bouchet, S. Menard, S. Gravel, B. Pabla and
!                  P. Huang for GEM-MACH, June 2008
! Description    : Main entry of the CAM - CANADIAN AEROSOL MODULE VERSION 1.0
!
! Extra info     : - First version created by S. Gong Sept 05 1994 for CAM
!                  - Vectorized the whole program (S. Gong, Jan 19/1996)
!                  - Add sulphate aerosol (S. Gong, Jul 09, 1997)
!                  - Interfaced with adom gas drydeposition (S. Gong, Oct 01, 1997)
!                  - CAM version 1.0 with aerosol activation and cloud chemistry
!                    (S. Gong, Jan 01/1998)
!                  - Adapted for use in aurams. (S. Gong, Jun 20, 1999)
!                  - Modifications for aurams v0.25 (L. Zhang, V. Bouchet, Sept 2000)
!                  - Implement aerocld_new from v0.20+cldchem (W. Gong, Mar 2001)
!                  - Implement wet fluxes (modified scaveng.f) (W. Gong, May 2001)
!                  - Modification to implement het. chem. (V. Bouchet, Aug 2001)
!                  - Documentation/headers (S. Menard, July 2008)
!
! Arguments:  IN
!                  lev     -> chm_nk+1
!                  il1     -> minimum index for chm_ni
!                  il2     -> maximum index for chm_ni
!                  jlat    -> J Slice number
!                  throw   -> Temp
!                  rhrow   -> Relative humidity
!                  lon     -> longitude
!                  pressg  -> Grid row of surface pressure [Pa]
!                  shj     -> Local mid-layer sigma value
!                  it      -> Time step for diagnosis of a tracer
!                  rsfro w -> Sea salt surface flux
!                  wrow    -> Model vertical wind speed
!                  irest   -> 1
!                  ntr     -> Total number of trace substances (gases and aerosols)
!                  kount   ->
!                  luc     -> landuse categories
!                  aerosize-> aerosol bin boundaries; depends upon number of bins
!                  ohrow   -> oh concentration
!                  no3row  -> no3 concentration
!                  cldcv   -> cloud fraction
!                  zmlwc   -> CWC content (bulk) (kg/kg)
!                  qr      -> rain water/snow
!                  pres    -> pressure (Pa)
!                  roarow  -> Air density (kg/m3)
!                  thlev   -> Layer thickness [m]
!                  dshj    -> Sigma difference of bottom and top of a layer
!                  rtso2   -> so2 oxidation rate
!                  fland   -> Landuse
!                  coagfr  -> Coagulation transformation ratio
!                  pvol    -> bin volume of dry aerosol
!                  tmin    -> minimum thresold value
!                  ns      -> Seasonal periods in Robichaud Dev. vel. scheme
!                  soa     -> Secondary organics aerosols
!                  seasn   -> Assigned season descriptors
!                  ra      -> Aerodynamic resistance for species "species" (s/m)
!                  usi     -> friction velocity
!                  igf     -> Total indices of coagulation
!                  igfij   -> Indices of coagulation transformation
!                  fctr    -> Cloud-to-rain conversion rate (s-1)
!                  frevp   -> evap. of strat. precip (consun)
!                  wetflx  -> Wet flux
!
!             OUT
!                  DLEV    -> diagnostic level output
!                  TRWTROW -> Aerosol liquid water content for each bin
!                  RTNUCL  -> Nucleation
!                  CLD_CHM -> Cloud tracer concentration
!                  TS2     -> total so2 in column
!                  TS4     -> total so4 in column (bulk) before rain scavenging
!                  CLTS    -> column total S after rain scavenging
!                  CLS4    -> SO4 (bulk) column total after  rain scavenging
!                  DRYFLX  -> Dry deposition flux
!
!             IN/OUT
!                  XROW    -> tracers conncentration
!                  ITR     ->
!                  CONDNU  -> condensation
!                  TCLDCV  -> total cloud cover
!
!             LOCAL VARIABLE
!                  RTCOA   -> Coagulation rate
!                  RTBCLD  -> Rain Scavenging
!                  RTDRY   -> deposition tendencies for each layer
!============================================================================
!
!!if_on
subroutine mach_cam_main (lev, il1, il2, jlat, throw, rhrow, lon, XROW,     &
                          pressg, shj, it, ITR, wrow, irest, ntr, kount,    &
                          luc, aerosize, ohrow, no3row, cldcv, zmlwc, qr,   &
                          TRWTROW, pres, roarow, thlev, dshj, rtso2, fland, &
                          RTNUCL, coagfr, pvol, tmin, ns, soa, seasn, ra,   &
                          usi, igf, CONDNU, igfij, TCLDCV, CLD_CHM, fctr,   &
                          frevp, wetflx, TS2, TS4, CLTS, CLS4, DRYFLX)
   use chm_ptopo_grid_mod,      only: chm_ni, chm_nk
   use mach_cam_utils_mod,      only: isize
   use mach_cam_pre_mod,        only: nswdep, icom
!!if_off
   use chm_utils_mod,           only: global_debug, chm_lun_out
   use chm_nml_mod,             only: chm_intrsec_ndiv, chm_pkg_pm_s
   use mach_cam_headers_mod,    only: mach_cam_aeroprop, mach_cam_sulfate, mach_cam_condsoa, &
                                   mach_cam_aerocld, mach_cam_coagd, mach_cam_scaveng,       &
                                   mach_cam_drydepo   
   use mach_aurams_headers_mod, only: mach_aurams_tsysms
   use mach_cam_utils_mod,      only: delt, icoag, icob, iblcld, idrydep, idebug
   use chm_nml_mod,             only: chm_hetchem_s, chm_aqueous_s, chm_soa_s, dlev
   use mach_cam_pre_mod,        only: aeroname, igs_SO2, igs_SO4, iae1, ncam
   implicit none
!!if_on
   integer(kind=4),   intent   (in)                                   :: lev, il1, il2, jlat, it
   integer(kind=4),   intent   (in)                                   :: ntr, luc, lon, ns
   integer(kind=4),   intent   (in)                                   :: irest, kount
   integer(kind=4),   intent(inout)                                   :: itr
   integer(kind=4),   intent   (in)                                   :: igf(isize)
   integer(kind=4),   intent   (in)                                   :: igfij(isize, isize * isize, 2)
   real(kind=4),      intent(inout)                                   :: condnu(15)
   real(kind=4),      intent   (in)                                   :: tmin
   real(kind=4),      intent   (in), dimension(chm_ni, lev)           :: throw, rhrow
   real(kind=4),      intent   (in), dimension(chm_ni, chm_nk)        :: shj, dshj, wrow
   real(kind=4),      intent   (in), dimension(chm_ni, chm_nk)        :: soa, roarow, pres, thlev
   real(kind=4),      intent   (in), dimension(chm_ni, chm_nk)        :: fctr, frevp
   real(kind=4),      intent   (in), dimension(chm_ni)                :: pressg, seasn
   real(kind=4),      intent   (in), dimension(chm_ni, chm_nk, 2)     :: cldcv, zmlwc, qr, rtso2
   real(kind=4),      intent   (in), dimension(2, isize)              :: aerosize
   real(kind=4),      intent   (in), dimension(isize)                 :: pvol
   real(kind=4),      intent   (in), dimension(isize, isize, isize)   :: coagfr
   real(kind=4),      intent   (in), dimension(chm_ni, luc)           :: ra, usi, fland
   real(kind=4),      intent   (in), dimension(chm_ni, chm_nk)        :: ohrow, no3row
   real(kind=4),      intent  (out), dimension(chm_ni, chm_nk)        :: rtnucl
   real(kind=4),      intent  (out), dimension(chm_ni, chm_nk, isize) :: trwtrow
   real(kind=4),      intent  (out), dimension(chm_ni, chm_nk, 7)     :: cld_chm
   real(kind=4),      intent  (out), dimension(chm_ni, nswdep)        :: wetflx
   real(kind=4),      intent  (out), dimension(chm_ni, chm_nk, 3, 2)  :: ts2, ts4
   real(kind=4),      intent  (out), dimension(chm_ni, 4, 2)          :: clts, cls4
   real(kind=4),      intent  (out), dimension(chm_ni, icom)          :: dryflx
   real(kind=4),      intent(inout), dimension(chm_ni, chm_nk)        :: tcldcv
   real(kind=4),      intent(inout), dimension(chm_ni, lev, ntr)      :: xrow
!!if_off
!
! local variables
!
   logical(kind=4)                                    :: lsoa, lso4
   integer(kind=4)                                    :: izon, n, l, i, i_mx, l_mx, j_mx
   integer(kind=4)                                    :: itr_mx, k, nt
   integer(kind=4)                                    :: id, jd, nbnd
   real(kind=4)                                       :: adt2, rgrid_mx
   real(kind=4)                                       :: tmass, q_binmx
   real(kind=4)                                       :: dlevl
   real(kind=4), dimension(chm_ni, chm_nk, isize)     :: q_bin
   real(kind=4), dimension(chm_ni, nswdep, chm_nk, 2) :: flux
   real(kind=4), dimension(chm_ni, chm_nk, isize)     :: totmas, pdiff, colef, rhop
   real(kind=4), dimension(chm_ni, chm_nk, isize)     :: aeronum, pdepv, rtcond, rtso4, rhsize
   real(kind=4), dimension(chm_ni, chm_nk)            :: rcrits
   real(kind=4), dimension(chm_ni, ntr, 3)            :: gdrem
   real(kind=4), dimension(chm_ni, chm_nk, ntr)       :: rgrid, rtcoa, rtbcld, rtdry
   logical(kind=4)                                    :: local_dbg
   external qqexit

   adt2     = 0.0
   colef    = 0.0
   flux     = 0.0
   gdrem    = 0.0
   pdepv    = 0.0
   pdiff    = 0.0
   q_bin    = 0.0
   q_binmx  = 0.0
   rcrits   = 0.0
   rgrid    = 0.0
   rgrid_mx = 0.0
   rhop     = 0.0
   rhsize   = 0.0
   rtcond   = 0.0
   rtso4    = 0.0
   tmass    = 0.0

   local_dbg = (.false. .or. global_debug)

   if (idebug >= 4 .and. local_dbg) write (chm_lun_out, *) ' cam --> start'

   if(chm_pkg_pm_s == 'CAM12BINS') then
    nbnd = isize
   else
    nbnd = isize * chm_intrsec_ndiv
   end if

!  section 0: initialization
   flux   = 0.0  !PH
   rtbcld = 0.0
   gdrem  = 0.0
   rtso4  = 0.0
   rtcond = 0.0
   rtnucl = 0.0
   pdepv  = 0.0
   pdiff  = 0.0
   colef  = 0.0

   adt2     = 2.0 * delt
   izon     = 3
   lsoa     = .true.
   if (chm_soa_s == 'NIL') lsoa     = .false.
   lso4     = .true.
   rgrid_mx = 0.0
   id       = 1
   jd       = 1

   do n = iae1, ncam
      do l = 1, chm_nk
         do i = il1, il2
            rgrid(i, l, n) = xrow(i, l + 1, n)
            if (rgrid(i, l, n) > 0.1 .or. rgrid(i, l, n) < 0.0) then
               idebug = 10
               dlevl = l
               id = i
               jd = jlat
               itr = n
            end if
            if (rgrid(i, l, n) > rgrid_mx) then
            rgrid_mx = rgrid(i, l, n)
            i_mx = i
            l_mx = l
            j_mx = jlat
            itr_mx = n
            end if
         end do
      end do
   end do

   if (local_dbg .and. jlat == jd .and. kount == it) then
      call mach_aurams_prntrow(xrow(1, dlev + 1, itr), 'xrow   ', 'in cam        ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(cldcv(1, dlev, 1)     , 'cloud  ', 'stratiform    ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(cldcv(1, dlev, 2)     , 'cloud  ', 'convective    ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(tcldcv(1, dlev)       , 'cloud  ', 'total         ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(zmlwc(1, dlev, 1)     , 'clw    ', 'stratiform    ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(zmlwc(1, dlev, 2)     , 'clw    ', 'convective    ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(qr(1, dlev, 1)        , 'precip ', 'stratiform    ',  1, 1, &
                               1, lon, jlat)
      call mach_aurams_prntrow(qr(1, dlev, 2)        , 'precip ', 'convective    ',  1, 1, &
                               1, lon, jlat)
   end if

!  section 2:  aerosol properties of clear sky
!     a - ambient radius and density
!     b - number density

   ! call tmg_start0 ( 17, 'mach_cam_aeroprop')

   call mach_cam_aeroprop(ntr, il1, il2, RHSIZE, aerosize, RHOP, rhrow, throw, rgrid, &
                          AERONUM, TOTMAS, TRWTROW, roarow, shj, pressg, PDIFF, PDEPV)
  ! call tmg_stop0 ( 17 )

   if (idebug >= 1 .and. jlat == jd .and. local_dbg) then
      write(chm_lun_out, *)'kt = ', kount
      call  mach_aurams_tsysms(xrow, tmass, il1, il2, ntr, izon, 1)
      write(chm_lun_out, *)' aeroprop -> aeronum  ', aeronum(id, dlev, isize)
      write(chm_lun_out, *)' aeroprop -> totmas   ', totmas(id, dlev, isize)
      write(chm_lun_out, *)' aeroprop -> xrow   ',   xrow(id, dlev + 1, itr)
   end if

!  sections 3 and 4 have been swithed to allow for the proper addition of heterogeneous chemistry
!
!  section 4:  sulphur physics and chemistry [clear sky]
!              soa condensation
!              a - sulphur chemistry
!              b - nucleation and condensation

   do nt = 1, icom
      if (aeroname(nt) == 'SULPHATE' .and. lso4) then

   ! call tmg_start0 ( 18, 'mach_cam_sulfate')

         call mach_cam_sulfate(lev, il1, il2, RGRID, aeronum, XROW, ntr, nbnd, roarow, pressg, &
                               throw, rhrow, shj, ohrow, no3row, nt, rhsize, aerosize, delt,   &
                               RTNUCL, RTCOND, rtso2, cldcv, pvol, tmin, COLEF, 0, condnu)
   ! call tmg_stop0 ( 18 )

         if (idebug >= 1 .and. jlat == jd .and. local_dbg) then
            write(chm_lun_out, *)'kt = ', kount
            call  mach_aurams_tsysms(xrow, tmass, il1, il2, ntr, izon, 3)
            write(chm_lun_out, *)' sulfate -> rtnucl  ', rtnucl(id, dlev)
            write(chm_lun_out, *)' sulfate -> rtcon   ', rtcond(id, dlev, isize)
            write(chm_lun_out, *)' sulfate -> rtso2   ', rtso2(id, dlev, 1)
            write(chm_lun_out, *)' sulfate -> xrow   ', xrow(id, dlev + 1, itr)
         end if
      end if

      if (aeroname(nt) == 'OMCARBON' .and. lsoa) then
   ! call tmg_start0 ( 19, 'mach_cam_condsoa')
   call mach_cam_condsoa(lev, il1, il2, RGRID, aeronum, XROW, ntr, nbnd, roarow, nt, jlat, &
                         delt, RTCOND, pvol, colef, soa, pressg, throw, shj, aerosize)

   ! call tmg_stop0 ( 19 )
      end if

   end do


!  section 3: aerosol-cloud interaction
!          a - aerosol activation
!          b - gas-aqueous phase transfer and in-cloud oxidation of siv to svi
!          c - cloud-to-rain conversion and removal
!  RTSO2 is not used in mach_cam_aerocld, WG mar 2001.

   if (chm_aqueous_s == 'GONG' .or. chm_hetchem_s /= 'NIL') then
   ! call tmg_start0 ( 20, 'mach_cam_aerocld')

   call mach_cam_aerocld(THROW, XROW, LEV, IL1, IL2, RHSIZE, RHOP, AERONUM, NTR, &
                         nbnd, THLEV, ROAROW, PRES, ZMLWC, WROW, JLAT, RCRITS,   &
                         Q_bin, AEROSIZE, tcldcv, cld_chm, ADT2, flux, wetflx,   &
                         fctr, frevp, ts2, ts4, clts, cls4, rhrow, kount,        &
                         chm_hetchem_s, chm_aqueous_s)
   ! call tmg_stop0 ( 20 )
   end if

   rgrid_mx = 0.0
   q_binmx = 0.0
   do n = iae1, ncam
      do l = 1, chm_nk
         do i = il1, il2
            rgrid(i, l, n) = xrow(i, l + 1, n)
            if (rgrid(i, l, n) > 0.1 .or. rgrid(i, l, n) < 0.0) then
               idebug = 10
               dlev = l
               id = i
               jd = jlat
               itr = n
            end if
            if (rgrid(i, l, n) > rgrid_mx) then
               rgrid_mx = rgrid(i, l, n)
               i_mx = i
               l_mx = l
               j_mx = jlat
               itr_mx = n
            end if
         end do
      end do
   end do


   if (idebug >= 1 .and. jlat == jd .and. local_dbg) then
      write(chm_lun_out, *)'kt = ', kount
      call  mach_aurams_tsysms(xrow, tmass, il1, il2, ntr, izon, 2)
      write(chm_lun_out, *)' aerocld -> cld fr  ', cldcv(id, dlev, 1), cldcv(id, dlev, 2), tcldcv(id, dlev)
      write(chm_lun_out, *)' aerocld -> cld wt  ', zmlwc(id, dlev, 1), zmlwc(id, dlev, 2)
      write(chm_lun_out, *)' aerocld -> precip  ', qr(id, dlev, 1), qr(id, dlev, 2)
      write(chm_lun_out, *)' aerocld -> rtso4   ', rtso4(id, dlev, isize)
      write(chm_lun_out, *)' aerocld -> rtso2   ', rtso2(id, dlev, 2)
      write(chm_lun_out, *)' aerocld -> xrow   ' , xrow(id, dlev + 1, itr)
   end if


! Section 5: coagulation
   if (icoag == 0) go to 110

   ! call tmg_start0 ( 21, 'mach_cam_coagd')
   call mach_cam_coagd(il1, il2, throw, roarow, RTCOA, rhsize, TOTMAS, AERONUM, ntr,    &
                       coagfr, kount, adt2, irest, XROW, pvol, jlat, icob, tmin, pdepv, &
                       pdiff, 0, igf, igfij, rhop, aerosize)
  ! call tmg_stop0 ( 21 )

   if (idebug >= 1 .and. jlat == jd .and. local_dbg) then
      write(chm_lun_out, *)'kt = ', kount
      write(chm_lun_out, *)' coagd -> rtcoa  ', rtcoa(id, dlev, itr), icob
      write(chm_lun_out, *)' coagd -> xrow   ', xrow(id, dlev + 1, itr)
      call  mach_aurams_tsysms(xrow, tmass, il1, il2, ntr, izon, 4)
   end if
  110 continue

!  section 6: below-cloud scavenging of aerosols
!          a - rain or snow scavenging

   if (iblcld == 0) go to 120
   ! call tmg_start0 ( 22, 'mach_cam_scaveng')
   call mach_cam_scaveng(THROW, XROW, tcldcv, frevp, LEV, IL1, IL2, SHJ, PRESSG, PDEPV, &
                         QR, RTBCLD, RHSIZE, RHOP, DSHJ, PDIFF, TMIN, NTR, THLEV, ADT2, &
                         GDREM, ROAROW, wetflx, flux, jlat, ts2, ts4, clts, cls4)
   ! call tmg_stop0 ( 22 )

   if (idebug >= 1 .and. jlat == jd .and. local_dbg) then
      write(chm_lun_out, *)'kt = ', kount
      call mach_aurams_tsysms(xrow, tmass, il1, il2, ntr, izon, 5)
      write(chm_lun_out, *)' scaveng -> rtbcld  ', rtbcld(id, dlev, itr)
      write(chm_lun_out, *)' scaveng -> xrow    ', xrow(id, dlev + 1, itr)
   end if

!  section 7: sedimentation and dry deposition
!          a - particle dry deposition and gravitational settling
!          b - gas dry deposition

  120 if (idrydep == 0) go to 150

!  check column total S and column so4p before dry deposition

   do k = 1, chm_nk
      do i = 1, chm_ni
         ts4(i, k, 1, 1) = 0.0
         ts4(i, k, 1, 2) = 0.0
      end do
   end do

!  SO2, SO4 (bulk) and column SO4p and total S; (mole/m3 and mole/m2, respectively)

   do i = 1, chm_ni
      clts(i, 4, 1) = wetflx(i, 4) + wetflx(i, 1)
   end do
   do k = 1, chm_nk
      do i = 1, chm_ni
         ts2(i, k, 1, 1) = xrow(i, k + 1, igs_SO2) * 1000.0 * roarow(i, k) / 64.0
      end do
   end do
   do n = iae1, iae1 + isize - 1
      do k = 1, chm_nk
         do i = 1, chm_ni
            ts4(i, k, 1, 1) = ts4(i, k, 1, 1) + xrow(i, k + 1, n) * 1000.0 * roarow(i, k) / 96.0
         end do
      end do
   end do
   do k = 1, chm_nk
      do i = 1, chm_ni
         clts(i, 4, 1) = clts(i, 4, 1) + (ts2(i, k, 1, 1) + ts4(i, k, 1, 1) + xrow(i, k + 1, igs_SO4) *  &
                         1000.0 * roarow(i, k) / 98.0) * thlev(i, k)
         cls4(i, 4, 1) = cls4(i, 4, 1) + ts4(i, k, 1, 1) * thlev(i, k)
      end do
   end do

!  drygas subroutine is removed from drydepo, thus all drygas
!  related varibles are removed from drydepo and this subroutine (Sep. 2000, Leiming Zhang)

   ! call tmg_start0 ( 23, 'mach_cam_drydepo')
   call mach_cam_drydepo(lev, il1, il2, seasn, ra, usi, throw, ntr, adt2, pressg, tmin, &
                         thlev, roarow, rhsize, fland, xrow, Pdepv, RTDRY, dshj, gdrem, &
                         pdiff, luc, ns, dryflx, aerosize)
  ! call tmg_stop0 ( 23 )


!  SO2, SO4 (bulk) and column SO4p and total S; (mole/m3 and mole/m2, respectively)

   do i = 1, chm_ni
      clts(i, 4, 2) = wetflx(i, 4) + wetflx(i, 1)
   end do
   do k = 1, chm_nk
      do i = 1, chm_ni
         ts2(i, k, 1, 2) = xrow(i, k + 1, igs_SO2) * 1000.0 * roarow(i, k) / 64.0
      end do
   end do
   do n = iae1, iae1 + isize - 1
      do i = 1, chm_ni
         clts(i, 4, 2) = clts(i, 4, 2) + gdrem(i, n, 1) * 1000.0 / 96.0
      end do
      do k = 1, chm_nk
         do i = 1, chm_ni
            ts4(i, k, 1, 2) = ts4(i, k, 1, 2) + xrow(i, k + 1, n) * 1000.0 * roarow(i, k) / 96.0
         end do
      end do
   end do
   do k = 1, chm_nk
      do i = 1, chm_ni
         clts(i, 4, 2) = clts(i, 4, 2) + (ts2(i, k, 1, 2) + ts4(i, k, 1, 2) + xrow(i, k + 1, igs_SO4) *  &
                         1000.0 * roarow(i, k) / 98.0) * thlev(i, k)
         cls4(i, 4, 2) = cls4(i, 4, 2) + ts4(i, k, 1, 2) * thlev(i, k)
      end do
   end do

   if (idebug >= 1 .and. jlat == jd .and. local_dbg) then
      write(chm_lun_out, *)'kt = ', kount
      call mach_aurams_tsysms(xrow, tmass, il1, il2, ntr, izon, 6)
      write(chm_lun_out, *)' drydepo -> rtdry  ', rtdry(id, dlev, itr)
      write(chm_lun_out, *)' drydepo -> xrow    ', xrow(id, dlev + 1, itr)
   end if
150 continue

!  section 8: diagnostic outputs

   if (local_dbg .and. jlat == jd .and. kount == it) then
      call  mach_aurams_prntrow(rtdry(1, dlev, itr),   'rtdry  ', 'after drydepo ',  1, 1, &
                                1, lon, jlat)
      call  mach_aurams_prntrow(rtbcld(1, dlev, itr),  'rtbcld ', 'after drydepo ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rhsize(1, dlev, 1),     'rhsize ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(totmas(1, dlev, 1),     'totmas ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(aeronum(1, dlev, 1),    'aeronum', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rhop(1, dlev, 1),       'rhop   ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rtso4(1, dlev, isize),  'rtso4  ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rtso2(1, dlev, 1),      'rtso2-1', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rtso2(1, dlev, 2),      'rtso2-2', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rtcond(1, dlev, isize), 'rtcond ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rtnucl(1, dlev),        'rtnucl ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
      call mach_aurams_prntrow(rcrits(1, dlev),        'rcrit  ', 'in cam        ',  1, 1, &
                                1, lon, jlat)
   end if

   if (idebug == 10 .and. local_dbg) then
         write (0, *)' tracer concentration is too high or negative'
         write (0, *)' overflow is likely. cam stops '
         write (0, *)' tracer ', itr, '= ', rgrid(id, dlevl, itr)
         write (0, *)' dlev    id      jd    itr      it '
         write (0, *) dlevl, id, jd, itr, it
         call qqexit(1)
   end if

   return
end
