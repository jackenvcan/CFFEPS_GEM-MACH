!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_hetv_case2.ftn90
! Creation       : P. Makar, V. Bouchet, A. Nenes, S. Gravel, B. Pabla, S. Menard
! Description    : Heterogeneous chemistry solver for case2.  Based on algorithm's
!                  in Nenes et al's ISORROPIA solver, recoded to vectorize over the
!                  gridpoint dimension.  All input arrays are of length npts (total
!                  number of gridpoints submitted from the calling code.  The
!                  subsection of each 1-D array between index ns2 and ne2 (inclusive)
!                  has been pre-sorted, and contains the gridpoint data that must
!                  be solved using case 2's algorithm.  Operations within this
!                  subroutine therefore take place over array bounds from ns2 to ne2.
!
!                  Units on input are moles/kg air.
!
! Extra info     : Athanasios Nenes, Mail Code 210-41, Dept. of Chemical Engineering,
!                  California Institute of Technology, Pasadena, Ca., 91125, USA
!                  nenes@its.caltech.edu
!
!                  The conditions for which this case is called are as follows:
!                  tats <  1.0, rh >= drh_ambis
!                  The reactions representing this case are as follows(bracketed numbers
!                  indicate that the solution is done in stages, as numbered):
!
!                     HSO4 <=> H + SO4 , kHSO4
!                     NH4 = TA
!                     H + NH4 = 2 SO4 + HSO4,
!                     TS = HSO4 + SO4
!                  The system of equations to be solved in this case are as follows:
!
!                     kHSO4 (HSO4) - (H)(SO4) = 0,
!                     NH4 = TA
!                     H + NH4 - 2 SO4 - HSO4,
!                     TS - HSO4 - SO4 = 0
!                  The solution to the system of equations:
!
!                     Let
!                     b = (kHSO4 - TA + TS),
!                     c  = - kHSO4 TS.
!                     SO4 = 0.5*(-b + sqrt(b**2 -4c)),
!                     H = - TA + SO4 + TS
!                     HSO4 = TS - SO4
!                     NH4 = TA
!
! Arguments  IN
!
!            OUT
!
!=============================================================================
!
!!if_on
subroutine mach_hetv_case2(npts, nr, ns2, ne2, so4, no3, nh4, hso4, hno3, h, nh3, amsul, &
                           ambis, amnit, leto, t, tc, aw, itero, k0, p1, p2, eps2,       &
                           lwn, ta, ts, tn, tstd, smrt)
!!if_off
   use mach_hetv_headers_mod, only: mach_hetv_water, mach_hetv_activity
   implicit none   
!!if_on
   integer(kind=4), intent   (in) :: nr
   integer(kind=4), intent   (in) :: npts
   integer(kind=4), intent   (in) :: ns2
   integer(kind=4), intent   (in) :: ne2
   integer(kind=4), intent   (in) :: itero
   real(kind=8),    intent   (in) :: eps2
   real(kind=8),    intent   (in) :: tstd
   real(kind=8),    intent   (in) :: smrt
   real(kind=8),    intent   (in) :: k0   (nr)
   real(kind=8),    intent   (in) :: p1   (nr)
   real(kind=8),    intent   (in) :: p2   (nr)
   real(kind=8),    intent  (out) :: so4  (npts)
   real(kind=8),    intent(inout) :: no3  (npts)
   real(kind=8),    intent  (out) :: nh4  (npts)
   real(kind=8),    intent  (out) :: hso4 (npts)
   real(kind=8),    intent(inout) :: hno3 (npts)
   real(kind=8),    intent(inout) :: h    (npts)
   real(kind=8),    intent(inout) :: nh3  (npts)
   real(kind=8),    intent(inout) :: amsul(npts)
   real(kind=8),    intent(inout) :: ambis(npts)
   real(kind=8),    intent(inout) :: amnit(npts)
   real(kind=8),    intent(inout) :: leto (npts)
   real(kind=8),    intent   (in) :: t    (npts)
   real(kind=8),    intent   (in) :: tc   (npts)
   real(kind=8),    intent   (in) :: aw   (npts)
   real(kind=8),    intent  (out) :: lwn  (npts)
   real(kind=8),    intent(inout) :: ta   (npts)
   real(kind=8),    intent(inout) :: ts   (npts)
   real(kind=8),    intent(inout) :: tn   (npts)
!!if_off
!
!  Local variables:
!
   integer(kind=4)               :: i, jo
   real(kind=8)                  :: del
!  Workspace arrays:
   real(kind=8), dimension(npts) :: b, c, v, oh
   real(kind=8), dimension(npts) :: g_h_no3, g_h_no3_o
   real(kind=8), dimension(npts) :: g_h_hso4, g_h_hso4_o
   real(kind=8), dimension(npts) :: g_nh4_hso4, g_nh4_hso4_o
   real(kind=8), dimension(npts) :: g_nh42_so4, g_nh42_so4_o
   real(kind=8), dimension(npts) :: g_h_oh, g_h_oh_o
   real(kind=8), dimension(npts) :: g_nh4_oh, g_nh4_oh_o
   real(kind=8), dimension(npts) :: g_nh4_no3, g_nh4_no3_o
   real(kind=8), dimension(npts) :: g_h2_so4, g_h2_so4_o
   real(kind=8), dimension(npts) :: g_nh43_hso42, g_nh43_hso42_o
   real(kind=8), dimension(npts) :: lwo
   real(kind=8), dimension(npts) :: g0_h_no3, g0_h2_so4, g0_h_hso4, g0_nh4_no3, g0_nh42_so4, g0_nh4_hso4
!  arrays for reaction rates:
   real(kind=8), dimension(npts) :: khso4, kh2o
!  Local variables that may be used in the solution:
   character(len=20), parameter  :: method = 'KM'
   external qqexit

!  Array dimensioning check:

   if(ns2 < 1 .or. ns2 > npts .or. ne2 > npts .or. ne2 < ns2) then
      write(0, *) '### Error in mach_hetv_case2 ###'
      write(0, *) '# Error in array bounds in case2'
      write(0, *) '###         ABORT         ###'
      call qqexit(1)
   end if

!  Initial guess for ions:  TS split evenly between SO4 and HSO4,
!  NH4 = TA, and H = max(0, 2 SO4 + HSO4 - NH4):

   so4(ns2:ne2) = 0.5 * ts(ns2:ne2)
   hso4(ns2:ne2) = 0.5 * ts(ns2:ne2)
   nh4(ns2:ne2) = ta(ns2:ne2)
   do i = ns2,ne2
      h(i) = max(0.D0, 2.D0 * so4(i) + hso4(i) - nh4(i))
   end do

!   Initial guess for liquid water content (will be replaced in calculations to follow:
   lwo(ns2:ne2) = 1.D0

!  Zero the 'old value' activity coefficient arrays
   g_h_no3_o(ns2:ne2)      = 0.D0
   g_h_hso4_o(ns2:ne2)     = 0.D0
   g_nh4_hso4_o(ns2:ne2)   = 0.D0
   g_nh4_no3_o(ns2:ne2)    = 0.D0
   g_nh4_oh_o(ns2:ne2)     = 0.D0
   g_nh42_so4_o(ns2:ne2)   = 0.D0
   g_h_oh_o(ns2:ne2)       = 0.D0
   g_h2_so4_o(ns2:ne2)     = 0.D0
   g_nh43_hso42_o(ns2:ne2) = 0.D0

!  Looping point for outer iteration:
   jo = 0

1000  continue
   jo = jo + 1

!  Calculate liquid water, based on current ion concentration.
   call mach_hetv_water(npts, ns2, ne2, so4, h, no3, nh4, hso4, aw, lwo, lwn)
!
!
!  (2)  Calculate new concentrations of ions and other phases; multiply old concentration by
!  ratio of old to new liquid water contents
   do i = ns2, ne2
      ta(i)    = ta(i)    * lwo(i) / lwn(i)
      ts(i)    = ts(i)    * lwo(i) / lwn(i)
      tn(i)    = tn(i)    * lwo(i) / lwn(i)
      nh3(i)   = nh3(i)   * lwo(i) / lwn(i)
      hno3(i)  = hno3(i)  * lwo(i) / lwn(i)
      so4(i)   = so4(i)   * lwo(i) / lwn(i)
      h(i)     = h(i)     * lwo(i) / lwn(i)
      no3(i)   = no3(i)   * lwo(i) / lwn(i)
      nh4(i)   = nh4(i)   * lwo(i) / lwn(i)
      hso4(i)  = hso4(i)  * lwo(i) / lwn(i)
      amnit(i) = amnit(i) * lwo(i) / lwn(i)
      amsul(i) = amsul(i) * lwo(i) / lwn(i)
      ambis(i) = ambis(i) * lwo(i) / lwn(i)
      leto(i)  = leto(i)  * lwo(i) / lwn(i)
   end do
!  Update liquid water content
   do i = ns2, ne2
      lwo(i) = lwn(i)
   end do

!  Calculate rates for Equilibrium constants
   do i = ns2, ne2
!  5:  HSO4- <=> SO4= + H+
      khso4(i) = k0(5) * exp( p1(5) * (tstd / t(i) - 1.D+00)             &
               + p2(5) * (1.d+00 + log( tstd / t(i) ) - tstd / t(i) )  )
   end do

!  Calculate OH concentration for activity coefficient calculations
   do i = ns2, ne2
      kh2o(i) = k0(10) * exp( p1(10) * (tstd / t(i) - 1.D+00) + p2(10) * &
                (1.d+00 + log( tstd / t(i) ) - tstd / t(i) )  )

!  OH assumed to be small; can't get [OH] from given
!  system of equations, closest one can isolate is
!  [OH]*gamma(OH)*gamma(H)
!         oh(i)=aw(i)*kh2o(i)/h(i)*0.5*
!     1  ( 1.+(sign(1., real(h(i))-2.*1.E-30)) )
!     1  + 1.D-30*0.5*( 1.+(sign(1., 2.*1.E-30-real(h(i)))) )
      oh(i) = 1.D-30
   end do

!  Calculate activity coefficients
   call mach_hetv_activity (method, npts, ns2, ne2, h, hso4, nh4, no3, so4, oh, g_h_no3,  &
                           g_h_hso4, g_nh4_hso4, g_nh42_so4, g_h_oh, g_nh4_oh, g_nh4_no3, &
                           g_h2_so4, g_nh43_hso42, g0_h_no3, g0_h2_so4, g0_h_hso4,        &
                           g0_nh4_no3, g0_nh42_so4, g0_nh4_hso4, tc)

!  Calculate maximum change in activity coefficients since the previous call in this subroutine:
   del = 0.D0
   do i = ns2, ne2
      del = max(del, abs( (g_h_no3(i) - g_h_no3_o(i)) / g_h_no3(i) ) )
      g_h_no3_o(i) = g_h_no3(i)
      del = max(del, abs( (g_h_hso4(i) - g_h_hso4_o(i)) / g_h_hso4(i) ) )
      g_h_hso4_o(i) = g_h_hso4(i)
      del = max(del, abs( (g_nh4_hso4(i) - g_nh4_hso4_o(i)) / g_nh4_hso4(i) ) )
      g_nh4_hso4_o(i) = g_nh4_hso4(i)
      del = max(del, abs( (g_nh4_no3(i) - g_nh4_no3_o(i)) / g_nh4_no3(i) ) )
      g_nh4_no3_o(i) = g_nh4_no3(i)
      del = max(del, abs( (g_nh4_oh(i) - g_nh4_oh_o(i)) / g_nh4_oh(i) ) )
      g_nh4_oh_o(i) = g_nh4_oh(i)
      del = max(del, abs( (g_nh42_so4(i) - g_nh42_so4_o(i)) / g_nh42_so4(i) ) )
      g_nh42_so4_o(i) = g_nh42_so4(i)
      del = max(del, abs( (g_h_oh(i) - g_h_oh_o(i)) / g_h_oh(i) ) )
      g_h_oh_o(i) = g_h_oh(i)
      del = max(del, abs( (g_h2_so4(i) - g_h2_so4_o(i)) / g_h2_so4(i) ) )
      g_h2_so4_o(i) = g_h2_so4(i)
      del = max(del, abs( (g_nh43_hso42(i) - g_nh43_hso42_o(i)) / g_nh43_hso42(i) ) )
      g_nh43_hso42_o(i) = g_nh43_hso42(i)
   end do
!  Factor activity coefficients into equilibrium constants
!  to simplify calculations.
!  *  Conversion factors:
!  *
!  *        atmospheres -> moles/kg H2O:
!  *
!  *   atmospheres *1.01325E5(kg m^-1 s^-2 /atm) /
!  *    { 8.3144 (kg m^2 s^-2 mol^-1 K^-1) * T (K) * Lw (kg H2O/kg air)
!  *          * rho (kg air/m3 air)  }    =  moles/(kg H2O)
!  *
!  *        atmospheres^-1 -> (moles/kg H2O)^-1 :
!  *
!  *         1          8.3144 * T * Lw * rho     kg H2O
!  *   ------------- * ----------------------  = --------
!  *   atmospheres      1.01325E5                 moles

   do i = ns2, ne2
! 5:  HSO4- <=> SO4= + H+
!  Multiply by the square of the H-HSO4 activity coefficient,
!  and divide by the cube of the H2SO4 activity coefficient:
      khso4(i) = khso4(i) * (g_h_hso4(i) * g_h_hso4(i)) / (g_h2_so4(i) * g_h2_so4(i) * g_h2_so4(i))
   end do

!   Solve system of equations.
   do i = ns2, ne2
      b(i) = khso4(i) - ta(i) + ts(i)
      c(i) = - khso4(i) * ts(i)
   end do
   do i = ns2, ne2
      if(b(i)  /= 0.D0) then
         v(i) = 4.d0 * (c(i)) / (b(i) * b(i))
      else
         v(i) = 1.D+03
      end if
   end do
   do i = ns2, ne2
         if(abs(v(i)) <= smrt .and. b(i) > 0.D0) then
            so4(i) =  - ((((  14.D0 * c(i) / (b(i) * b(i)) + 5.D0) &
                      * c(i) / (b(i) * b(i)) + 2.D0)               &
                      * c(i) / (b(i) * b(i)) + 1.D0)               &
                      * c(i) / (b(i) * b(i)) + 1.D0) * c(i) / b(i)
         else
             so4(i) = 0.5d0 * (-b(i) + sqrt(b(i) * b(i) - 4.d0 * c(i)) )
         end if
         so4(i) = max(so4(i),0.D0)
   end do
   do i = ns2, ne2
      h(i) = max((- ta(i) + so4(i) + ts(i)), 0.D0)
      hso4(i) = max((ts(i) - so4(i)), 0.D0)
      nh4(i) = ta(i)
   end do

!  Convergence check:  Have the activity coefficients
!  changed by more than eps2 in the last iteration?  If
!  so, repeat the calculation with the new activity
!  coefficients.  Keep track of the number of iterations.
   if(del > eps2 .and. jo < itero) goto 1000

!   Activity coefficients changed by less than eps2 during
!   the previous iteration; the problem has converged.  Zero
!   the particle nitrate, the gas-phase ammonia, and the salts,
!   and return to the calling code.

   do i = ns2, ne2
      no3(i)   = 0.D0
      nh3(i)   = 0.D0
      ambis(i) = 0.D0
      amsul(i) = 0.D0
      amnit(i) = 0.D0
      leto(i)  = 0.D0
      hno3(i)  = tn(i)
   end do

!  Convert values back to moles/kg air from moles/kg water by
!  multiplying by the liquid water content:
   do i = ns2, ne2
      ta(i)    = ta(i)    * lwn(i)
      ts(i)    = ts(i)    * lwn(i)
      tn(i)    = tn(i)    * lwn(i)
      nh3(i)   = nh3(i)   * lwn(i)
      hno3(i)  = hno3(i)  * lwn(i)
      so4(i)   = so4(i)   * lwn(i)
      h(i)     = h(i)     * lwn(i)
      no3(i)   = no3(i)   * lwn(i)
      nh4(i)   = nh4(i)   * lwn(i)
      hso4(i)  = hso4(i)  * lwn(i)
      amnit(i) = amnit(i) * lwn(i)
      amsul(i) = amsul(i) * lwn(i)
      ambis(i) = ambis(i) * lwn(i)
      leto(i)  = leto(i)  * lwn(i)
   end do
!  CHECK
   do i = ns2,ne2
     if(h(i) < 0.0D0) then
        write(0, *) '### Error in mach_hetv_case2 ###'
        write(0, *) 'Negative H+ value detected in case2 for i = ',i
        write(0, *) 'H+ : '   ,h(i)
        write(0, *) 'HSO4-: ' ,hso4(i)
        write(0, *) 'SO4=: '  ,so4(i)
        write(0, *) 'NO3-: '  ,no3(i)
        write(0, *) 'NH4+: '  ,nh4(i)
        write(0, *) 'HNO3: '  ,hno3(i)
        write(0, *) 'NH3: '   ,nh3(i)
        write(0, *) '###         ABORT         ###'
        call qqexit(1)
     end if
   end do

   return
end
