!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_hetv_v.ftn90
! Creation       : P. Makar,  V. Bouchet,  S. Gravel,  B. Pabla,  S. Menard
! Description    : This subroutine solves the heterogeneous system for NH4-NO3-SO4,
!                  vectorizing over the gridpoint dimension and utilizing the
!                  systems of equations set out in Nenes and Pandis 1998 ISORROPIA code.
!
! Extra info     : Data arrays for equilibrium constant calculations:
!
!                      data react /
!                   1'1:  HNO3(g_eq) <=> HNO3(aq)',
!                   2'2:  HNO3(aq) <=> H+ + NO3-',
!                   3'3:  NH3(g_eq) <=> NH3(aq)',
!                   4'4:  NH3(aq) + H2O <=> NH4+ + OH-',
!                   5'5:  HSO4- <=> SO4= + H+',
!                   6'6:  NH4HSO4(s) <=> NH4+ + HSO4-',
!                   7'7:  (NH4)2SO4(s) <=> 2 NH4+ + SO4=',
!                   8'8:  (NH4)3H(SO4)2 <=> 3 NH4+ + HSO4- + SO4=',
!                   9'9:  NH4NO3(s) <=> NH3(g_eq) + HNO3(g_eq)',
!                   1'10:  H2O <=> H+ + OH-'/
!                The Equilibrium constants are calculated using the
!                formulae described in Pilinis and Seinfeld,  1987,  from the
!                following table of thermodynamic data.  Sources:  "Lange":  Lange's
!                handbook of chemistry,  14th edition,  1992.  "CRC":  1996 CRC
!                Handbook of Chemistry and Physics.  A&P:  Ansari and Pandis,  1999.
!                "Kim (I)":  Kim et al.(I),  Aerosol Sci and Techn. 1993.
!
!                   Species          Delta Hf0     Delta Gf0      Cp0        Source
!                                  kJ/mol        kJ/mol        J/K/mol
!                HNO3(g)           -134.3         -73.94        53.34       Lange
!                HNO3(aq)          -207.36       -111.34       -86.6        Lange
!                H+                   0             0            0          Lange
!                NO3-              -207.4        -111.3        -86.6        CRC
!                NH3(g)             -45.940       -16.407       35.630      CRC
!                NH3(aq)            -80.29        -26.57        79.9(Kim I) Lange
!                NH4+              -132.51        -79.37        79.9        CRC
!                OH-               -229.99       -157.28      -148.5        Lange
!                HSO4-             -887.3        -755.9        -84.0        CRC
!                SO4=              -909.3        -744.5       -293.0        CRC
!                NH4NO3(s)         -365.56       -184.01       139.3        Lange
!                NH4HSO4(s)       -1026.96       -823.00       127.50       A&P
!                (NH4)2SO4(s)     -1180.85(A&P)  -901.90       187.49       Lange
!                (NH4)3H(SO4)2(s) -2207.00      -1730.00       315.00       A&P
!                H2O               -285.830      -237.129       75.291      Kim (I)
!
!
! Arguments  IN
!
!            OUT
!
!=============================================================================
!
!!if_on
subroutine mach_hetv_main_single (so4, no3, nh4, hso4, hno3, h, nh3, amsul,     &
                  ambis, amnit, leto, t, rh, eps, eps2, iter, itero,            &
                  rho, lwn, ndiv, lwmin, tstd, small, smrt, case_number)
!!if_off
   use chm_utils_mod,         only: chm_lun_out, global_debug
   use mach_hetv_headers_mod, only: mach_hetv_case12_single, mach_hetv_case2_single, &
                                    mach_hetv_corrhno3_single

   implicit none
!!if_on
   integer(kind=4), intent   (in) :: iter
   integer(kind=4), intent   (in) :: itero
   integer(kind=4), intent   (in) :: ndiv
   real(kind=8),    intent   (in) :: lwmin
   real(kind=8),    intent   (in) :: tstd
   real(kind=8),    intent   (in) :: small
   real(kind=8),    intent   (in) :: smrt
   real(kind=8),    intent   (in) :: eps
   real(kind=8),    intent   (in) :: eps2
   real(kind=8),    intent(inout) :: so4      
   real(kind=8),    intent(inout) :: no3      
   real(kind=8),    intent(inout) :: nh4      
   real(kind=8),    intent(inout) :: hso4     
   real(kind=8),    intent(inout) :: hno3     
   real(kind=8),    intent(inout) :: h        
   real(kind=8),    intent(inout) :: nh3      
   real(kind=8),    intent(inout) :: amsul    
   real(kind=8),    intent(inout) :: ambis    
   real(kind=8),    intent(inout) :: amnit    
   real(kind=8),    intent(inout) :: leto     
   real(kind=8),    intent   (in) :: t        
   real(kind=8),    intent   (in) :: rh       
   real(kind=8),    intent   (in) :: rho      
   real(kind=8),    intent  (out) :: lwn      
   real(kind=4),    intent  (out) :: case_number
!!if_off
!
! Local variables
!
   logical(kind=4)               :: output =.false.
   logical(kind=4),  parameter   :: diag = .false.
   integer(kind=4),  parameter   :: nsp  = 15       !species in eq rate calculations
   integer(kind=4),  parameter   :: nr   = 10        !number of eq reactions
   real(kind=8),  dimension(nsp) :: dh0 = (/ -134.3d0,   -207.36d0,     0.0d0,   -207.4d0,   -45.940d0,       &
                                             -80.29d0,  -132.51d0,  -229.99d0,  -887.3d0,  -909.3d0,          &
                                             -365.56d0,  -1026.96d0,  -1180.85d0,  -2207.00d0,  -285.830d0/)
   real(kind=8),  dimension(nsp) :: dg0 = (/ -73.94d0,  -111.34d0,    0.0d0,   -111.3d0,   -16.407d0,         &
                                             -26.57d0,  -79.37d0,  -157.28d0,  -755.9d0,  -744.5d0,           &
                                             -184.01d0,  -823.00d0,  -901.90d0,  -1730.00d0,  -237.129d0/)
   real(kind=8),  dimension(nsp) :: cp0 = (/ 53.34d0,  -86.6d0,    0.0d0,  -86.6d0,   35.630d0,               &
                                             79.9d0,   79.9d0,  -148.5d0,  -84.0d0,  -293.0d0,                &
                                             139.3d0,  127.50d0,  187.49d0,  315.00d0,  75.291d0/)

   real(kind=8)                       :: k0(nr), p1(nr), p2(nr)
   real(kind=8), parameter            :: r = 8.314d0
   real(kind=8)                       :: tx1, tx2

   real(kind=8)    :: tc, oh
   real(kind=8)    :: tats, tcf, drh_ambis, ta, ts, tn, drh_amnit,            &
                       drh_leto, drh_amsul, mdrh_leto_ambis, mdrh_leto_amsul,  &
                       mdrh_amnit_amsul, mdrh_leto_ambis_r, drh_ambis_r,       &
                       mdrh_leto_amsul_r, drh_leto_r, mdrh_amnit_amsul_r,      &
                       drh_amnit_r
!
!  Start of het_v
!  (0) Calculate DG0/(RT),  DH0/(RT),  DCp0/R  for each reaction.
!  1:  HNO3(g_eq) <=> HNO3(aq)
       k0(1) = exp(-(dg0(2) - dg0(1)) * 1.0D+03 / (r * tstd))
       p1(1) = (-(dh0(2) - dh0(1)) * 1.0D+03 / (r * tstd))
       p2(1) = -(cp0(2) - cp0(1)) / r
!  2:  HNO3(aq) <=> H+ + NO3-
       k0(2) = exp(-(dg0(3) + dg0(4) - dg0(2)) * 1.0D+03 / (r * tstd))
       p1(2) = (-(dh0(3) + dh0(4) - dh0(2)) * 1.0D+03 / (r * tstd))
       p2(2) = -(cp0(3) + cp0(4) - cp0(2)) / r
!  3:  NH3(g_eq) <=> NH3(aq)
       k0(3) = exp(-(dg0(6) - dg0(5)) * 1.0D+03 / (r * tstd))
       p1(3) = (-(dh0(6) - dh0(5)) * 1.0D+03 / (r * tstd))
       p2(3) = -(cp0(6) - cp0(5)) / r
!  4:  NH3(aq) + H2O <=> NH4+ + OH-
       k0(4) = exp(-(dg0(7) + dg0(8) - dg0(15) - dg0(6)) * 1.0D+03 / (r * tstd))
       p1(4) = (-(dh0(7) + dh0(8) - dh0(15) - dh0(6)) * 1.0D+03 / (r * tstd))
       p2(4) = -(cp0(7) + cp0(8) - cp0(15) - cp0(6)) / r
!  5:  HSO4- <=> SO4= + H+
       k0(5) = exp(-(dg0(10) + dg0(3) - dg0(9)) * 1.0D+03 / (r * tstd))
       p1(5) = (-(dh0(10) + dh0(3) - dh0(9)) * 1.0D+03 / (r * tstd))
       p2(5) = -(cp0(10) + cp0(3) - cp0(9)) / r
!  6:  NH4HSO4(s) <=> NH4+ + HSO4-
       k0(6) = exp(-(dg0(7) + dg0(9) - dg0(12)) * 1.0D+03 / (r * tstd))
       p1(6) = (-(dh0(7) + dh0(9) - dh0(12)) * 1.0D+03 / (r * tstd))
       p2(6) = -(cp0(7) + cp0(9) - cp0(12)) / r
!  7:  (NH4)2SO4(s) <=> 2 NH4+ + SO4=
       k0(7) = exp(-(2.0d0 * dg0(7) + dg0(10) - dg0(13)) * 1.0D+03 / (r * tstd))
       p1(7) = (-(2.0d0 * dh0(7) + dh0(10) - dh0(13)) * 1.0D+03 / (r * tstd))
       p2(7) = -(2.0d0 * cp0(7) + cp0(10) - cp0(13)) / r
!  8:  (NH4)3H(SO4)2 <=> 3 NH4+ + HSO4- + SO4=
       k0(8) = exp(-(3.0d0 * dg0(7) + dg0(9) + dg0(10) - dg0(14)) * 1.0D+03 /  &
         (r * tstd))
       p1(8) = (-(3.0d0 * dh0(7) + dh0(9) + dh0(10) - dh0(14)) * 1.0D+03 / (r * tstd))
       p2(8) = -(3.0d0 * cp0(7) + cp0(9) + cp0(10) - cp0(14)) / r
!  9:  NH4NO3(s) <=> NH3(g_eq) + HNO3(g_eq)
       k0(9) = exp(-(dg0(5) + dg0(1) - dg0(11)) * 1.0D+03 / (r * tstd))
       p1(9) = (-(dh0(5) + dh0(1) - dh0(11)) * 1.0D+03 / (r * tstd))
       p2(9) = -(cp0(5) + cp0(1) - cp0(11)) / r
! 10:  H2O <=> H+ + OH-
       k0(10) = exp(-(dg0(3) + dg0(8) - dg0(15)) * 1.0D+03 / (r * tstd))
       p1(10) = (-(dh0(3) + dh0(8) - dh0(15)) * 1.0D+03 / (r * tstd))
       p2(10) = -(cp0(3) + cp0(8) - cp0(15)) / r

!  (1)  Rearrange the input arrays so that cases that
!     must be solved by the same method are in contiguous
!     sections of the gridpoint array.
!        (a) Determine (total ammonia)/(total sulphate)

   tats = (nh4 + nh3 + 2.0 * amsul + ambis + amnit + 3 * leto) /  &
               (so4 + hso4 + amsul + ambis + 2.0d0 * leto)
!        (b) Determine the relevant DRH,  MDRH values for
!        each case.  Formulae from ISORROPIA subroutine INIT2

   tcf = (1.0d0 / t - 1.0d0 / 298.15d0)
   drh_ambis = 0.4000d0 * exp(384.0d0 * tcf)
   drh_amnit = 0.6183d0 * exp(852.0d0 * tcf)
   drh_leto  = 0.6900d0 * exp(186.0d0 * tcf)
   drh_amsul = 0.7997d0 * exp(80.0d0  * tcf)
   mdrh_leto_ambis  = max(0.01d0, min(drh_ambis, drh_leto) - 0.022d0)    !0.3780d0
   mdrh_leto_amsul  = max(0.01d0, min(drh_amsul, drh_leto) - 0.02d0)     !0.6700d0  !0.6900d0
   mdrh_amnit_amsul = max(0.01d0, min(drh_amnit, drh_amsul) - 0.0183d0)  !0.6000d0

!  Set temperatures of crossovers in DRH.  TX1 is the
!  point where the ammonium sulphate and letovicite
!  curves intersect.  TX2 is the point where the
!  ammonium sulphate and ammonium nitrate curves intersect.
!  These values are based on equating the appropriate
!  pair of DRH functions above,  and solving for the temperature
!  where the DRH functions intersect.  They should therefore
!  be updated if the DRH values are updated.

   tx1 = 2.107059277D+02   ! (NH4)2SO4 and (NH4)3H(SO4)2
   tx2 = 2.712042017D+02   ! NH4NO3 and (NH4)2SO4

!  Calculate the temperature in Celcius (to avoid having to recalculate it in the activity coefficient routine:

   tc = t - 273.15d0

!  Determine the values of ta, ts, tn for each test case,  in the transformed domain:

   ta = nh4 + nh3 + 2.0 * amsul + ambis + amnit + 3 * leto
   ts = so4 + hso4 + amsul + ambis + 2.0 * leto
   tn = no3 + amnit + hno3
   
   if (tats < 1.0d0) then
      case_number = 2.1
      call mach_hetv_case2_single(nr, so4, no3, nh4, hso4, hno3, h,           &
                  nh3, amsul, ambis, amnit, leto, t, tc, rh, itero,           &
                  k0, p1, p2, eps2, lwn, ta, ts, tn, tstd, smrt)
      call mach_hetv_corrhno3_single(nr, so4, no3, nh4, hso4, hno3, h,       &
                              t, tc, rh, k0, p1, p2, rho, lwn, lwmin, tstd )

   else if (tats >= 1.0d0 .and. tats < 1.5d0) then
      case_number = 2.2
      call mach_hetv_case2_single(nr, so4, no3, nh4, hso4, hno3, h,           &
                           nh3, amsul, ambis, amnit, leto, t, tc, rh, itero,           &
                           k0, p1, p2, eps2, lwn, ta, ts, tn, tstd, smrt)
      call mach_hetv_corrhno3_single(nr, so4, no3, nh4, hso4, hno3, h,       &
                              t, tc, rh, k0, p1, p2, rho, lwn, lwmin, tstd )

   else if (tats >= 1.5d0 .and. tats < 2.0d0) then
      case_number = 12.1
      call mach_hetv_case12_single(nr, so4, no3, nh4, hso4, hno3, h,       &
                        nh3, t, tc, rh, iter, itero,    &
                        k0, p1, p2, eps, eps2, rho, lwn, ta, ts, tn, oh, tstd,     &
                        small, smrt)

      ambis = 0.0D0
      amsul = 0.0D0
      amnit = 0.0D0
      leto = 0.0D0
   else if (tats >= 2.0d0) then
      case_number =12.2
      call mach_hetv_case12_single(nr, so4, no3, nh4, hso4, hno3, h,       &
                        nh3, t, tc, rh, iter, itero,    &
                        k0, p1, p2, eps, eps2, rho, lwn, ta, ts, tn, oh, tstd,     &
                        small, smrt)

      ambis = 0.0D0
      amsul = 0.0D0
      amnit = 0.0D0
      leto = 0.0D0
   else
      write(0, *) '### Error in mach_hetv_main ###'
      write(0, *) '# Other than case 2 or 12!'
   end if

!  Reorder the results back into the order of the starting arrays:



!  the following line is for test only and will removed after test
!    write(6,*)'No. of grodpoints in each case:',ne1-ns1+1,ne2-ns2+1,ne3-ns3+1,ne4-ns4+1, &
!    ne5-ns5+1,ne6-ns6+1,ne7-ns7+1,ne8-ns8+1,ne9-ns9+1,ne10-ns10+1,ne11-ns11+1,ne12-ns12+1

return
end
