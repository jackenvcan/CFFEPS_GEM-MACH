!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_incld_diffun.ftn90
! Creation       : S. Menard,  GEM-MACH,  June 2008.
!:
! Description    : Compute mass transfer / chemistry derivatives in the form
!                  (dc / dt) = cd = p - d * c
!
! Extra info     : Based on ADOMIIB,  level: 06/09/89,  ENSR(AES)
!
! Arguments:
!           IN
!              kk
!              gaz_conc  --> Gas/part species conc (ppm)
!              baq       --> Aqueous variable coefficients
!              tempk     --> Atmospheric Temperature (Kelvin)
!              tempi     --> Inverse of tempk (1.0 / tempk)
!              rtemp     --> Rgas * tempk / wden (wden = 1e+6 gm / m3)
!              psacw     --> CW to snow collection rates (gm / m3 s):
!              rad1      --> CW droplet radii   (m)
!              ng        --> Number of integrated gas/aerosol species
!              naq       --> No. of integrate aqueous species
!              ideriv
!           OUT
!              PGSCAV    --> Gas/part scavenging (or diffusion)
!              RAQ       --> Rate constants for aqueous-phase
!              PG
!              DG
!              CDG
!              AQ        --> Aqueous sp. conc(molar) in cloud
!              PAQ
!              DAQ
!              CDAQ
!              Q         --> Liquid water concentrations of cloudwater
!
!=============================================================================
!
!!if_on
subroutine mach_incld_diffun (kk, ng, gaz_conc, PG, DG, CDG, naq, AQ, PAQ, DAQ, CDAQ, Q,   &
                   ideriv, baq, pgscav, tempk, tempi, rtemp, raq, psacw, rad1              )
   use mach_cam_utils_mod,     only: maxnsg, maxcnz, maxnsaq
!!if_off
   use chm_utils_mod,          only: chm_lun_out
   use mach_incld_headers_mod, only: mach_incld_upaqr, mach_incld_rates, mach_incld_intrqf
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: kk
   integer(kind=4), intent   (in) :: ng
   integer(kind=4), intent   (in) :: naq
   integer(kind=4), intent   (in) :: ideriv
   real(kind=4),    intent   (in) :: q(3)
   real(kind=4),    intent   (in) :: baq(5, 2)
   real(kind=4),    intent(inout) :: raq(25, 2)
   real(kind=4),    intent(inout) :: pgscav  (maxnsg, 2, maxcnz)
   real(kind=4),    intent   (in) :: gaz_conc(maxnsg)
   real(kind=4),    intent  (out) :: pg      (maxnsg)
   real(kind=4),    intent  (out) :: dg      (maxnsg)
   real(kind=4),    intent  (out) :: cdg     (maxnsg)
   real(kind=4),    intent   (in) :: tempk   (maxcnz)
   real(kind=4),    intent   (in) :: tempi   (maxcnz)
   real(kind=4),    intent   (in) :: rtemp   (maxcnz)
   real(kind=4),    intent   (in) :: psacw   (maxcnz)
   real(kind=4),    intent   (in) :: rad1    (maxcnz)
   real(kind=4),    intent  (out) :: paq     (maxnsaq, 2)
   real(kind=4),    intent  (out) :: daq     (maxnsaq, 2)
   real(kind=4),    intent  (out) :: cdaq    (maxnsaq, 2)
   real(kind=4),    intent(inout) :: aq      (maxnsaq, 2)
!!if_off
!
!  Local variables
!
   integer(kind=4) :: izero = -1, iprt = -1
   integer(kind=4) :: k, naqend, i, j, itask, inew
   real(kind=4)    :: zero = 0.e0
   real(kind=4)    :: ppaq(maxnsaq, 2), ddaq(maxnsaq, 2), ccdaq(maxnsaq, 2)

   k = kk
   naqend = naq
   if (ideriv < 0) then
      naqend = 3
   end if

!  zero out

   if (izero < 0) go to 210
   do i = 1, ng
      pg(i) = zero
      dg(i) = zero
      cdg(i) = zero
   end do
   do j = 1, 2
      if (q(j) <= 0.) go to 205
      do i = 1, naq
         paq(i, j) = zero
         daq(i, j) = zero
         cdaq(i, j) = zero
      end do
205 end do
210 continue

!  Update rate constants that depend on [c] if ideriv > 0

   if (ideriv < 0) go to 401
   itask = 0
   inew = 0
      call mach_incld_upaqr(aq, pgscav(:, :, k), q(1), q(2), rad1(k),       &
               tempk(k), tempi(k), rtemp(k), itask, inew,                   &
               raq, baq(:, :), gaz_conc)
401   continue

! Compute derivatives for chemical kinetics and
! mass transfer (excluding intra-hydrometeor fluxes)

   call mach_incld_rates( ng, gaz_conc, dg, pg, cdg, naq,                          &
               aq(:, 1), daq(:, 1), paq(:, 1), cdaq(:, 1), raq(:, 1), baq(:, 1),   &
               aq(:, 2), daq(:, 2), paq(:, 2), cdaq(:, 2), raq(:, 2), baq(:, 2),   &
            q(1), q(2), ideriv)

! Compute intra-hydrometeor flux terms - only riming terms
! computed in this version.

   if (q(1) > 0 .and. q(2) > 0 .and. psacw(k) > 0.) then
      call mach_incld_intrqf(naq, aq, ppaq, ddaq, ccdaq, q, psacw(k), ideriv, tempk(k))

! Combine terms

      do j = 1, 2
         do i = 1, naqend
            paq(i, j)  = paq(i, j)  + ppaq(i, j)
            daq(i, j)  = daq(i, j)  + ddaq(i, j)
            cdaq(i, j) = cdaq(i, j) + ccdaq(i, j)
         end do
      end do
   end if
!
   if (iprt < 0) return
   write (chm_lun_out, 307)k
   write (chm_lun_out, 290)(gaz_conc(i), i = 1, ng)
   write (chm_lun_out, 300)(pg(i), i = 1, ng)
   write (chm_lun_out, 301)(dg(i), i = 1, ng)
   write (chm_lun_out, 302)(cdg(i), i = 1, ng)
   do j = 1, 2
      if (q(j) <= 0.) go to 250
      write (chm_lun_out, 306)j
      write (chm_lun_out, 295)(aq(i, j), i = 1, naq)
      write (chm_lun_out, 303)(paq(i, j), i = 1, naq)
      write (chm_lun_out, 304)(daq(i, j), i = 1, naq)
      write (chm_lun_out, 305)(cdaq(i, j), i = 1, naq)
250 end do
return
290   format ('   g    ', 12e10.3)
295   format ('   aq   ', 12e10.3)
300   format ('   pg   ', 12e10.3)
301   format ('   dg   ', 12e10.3)
302   format ('   cdg: ', 12e10.3)
303   format ('   paq: ', 12e10.3)
304   format ('   daq: ', 12e10.3)
305   format ('   cdaq:', 12e10.3)
307   format (' diffun gas/part derivative terms --  level =', i3)
306   format (' diffun aqueous derivative terms hydrometeor class =', i2)
end
