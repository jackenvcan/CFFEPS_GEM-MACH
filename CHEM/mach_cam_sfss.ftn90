!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_sfss.ftn90
! Creation       : S. Gong, P. Huang, S. Gravel and B. Pabla for GEM-MACH, Sept. 2008
!
! Description    : A subroutine to evaluate the generation rate of sea salt aerosols
!                  as a function of meteorologic conditions.
!
! Extra info     : - First version created by S. Gong Nov 21 1994 for CAM
!                    Aerosol surface flux computation for sea-salt
!                    Method:
!                      1.  Monahan et al (Oceanic Whitecaps, E.C. Monahan
!                          and G.Mac Niocail (eds), 1986)
!                      2.  Smith et al.
!                      3.  Gong, Global Biogeochemical Cycles 2003
!                  - As in previous SFSALT but optimized by vectorization
!                    (S. Gong, Dec 19, 1996)
!                  - New landuse catagory fland array is used to replace gc.
!                    the fland is based upon eos 1x1 km resolution data sets.
!                    (S. Gong, Dec 12, 1997)
!                  - Flux integration over each size bin is done now when model
!                    starts or restarts. the integrated efficient is saved in
!                    fintrow. (S. Gong Jun 11, 1998)
!                  - Add the Smith's sea-salt surface flux function.
!                    (S. Gong, Sep 02, 1999)
!                  - The surf zone production of sea spray function of de Leeuw
!                     et al (2001) was added with ocean cover less than 20% grid.
!                    (S. Gong, Aug 01, 2001)
!                  - The particle mass of each sub-devided bin is now computed
!                    in the do pos=1,n*35 loop: pmass. it was done on an averaged
!                    mass in a bin. Version 5C. (S. Gong, Oct 31, 2001)
!                  - A new scheme - GONG-MONAHAN [Gong, Global Biogeochemical
!                    Cycles,2003] was used re replace the old Monahan's scheme so
!                    that the appliable range of sea-salt production is expanded
!                    to less than 0.1 miron. (S. Gong, Nov 04, 2002)
!
! Arguments:  IN
!                dshj       -> sigma difference of bottom and top of a layer
!                lev        -> chm_nk + 1
!                t          -> temperature
!                ntr        -> total number of trace substances (gases and aerosols)
!                nn         -> species index of sea-salt
!                aerosize   -> Dry radius
!                surfwd     -> surface wind module
!                pressg     -> Grid row of surface pressure [Pa]
!                gc         -> Sea ice fraction
!                fland      -> Landuse
!                il1        -> minimum index for chm_ni
!                il2        -> maximum index for chm_ni
!                iae1       -> first aerosol bin tracer
!                flux_L     -> .t. only emissions are calculated
!                              .f. emissions calculated and  added to surface layer concentration
!
!             OUT
!                RSFROW     -> sea salt surface flux
!
!             IN/OUT
!                TRAC       -> sea salt aerosols concentration
!
!============================================================================
!
!!if_on
subroutine mach_cam_sfss (TRAC, dshj, lev, t, ntr, nn,                 &
                          aerosize, surfwd, rsfrow, pressg, gc, fland, &
                          il1, il2, iae1, flux_L                       )
   use chm_ptopo_grid_mod,    only: chm_ni, chm_nk
   use mach_cam_utils_mod,    only: isize
!!if_off
   use chm_consphychm_mod,    only: grav, pi
   use mach_cam_pre_mod,      only: icom, rhop0
   use mach_cam_utils_mod,    only: delt, i_ss
   use mach_gas_chemicbi_mod, only: lucprm
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: ntr
   integer(kind=4), intent   (in) :: lev
   integer(kind=4), intent   (in) :: nn
   integer(kind=4), intent   (in) :: il1
   integer(kind=4), intent   (in) :: il2
   integer(kind=4), intent   (in) :: iae1
   logical(kind=4), intent   (in) :: flux_l
   real(kind=4),    intent(inout) :: trac    (chm_ni,lev,ntr)
   real(kind=4),    intent   (in) :: dshj    (chm_ni,chm_nk)
   real(kind=4),    intent   (in) :: t       (chm_ni,lev)
   real(kind=4),    intent   (in) :: aerosize(2,isize)
   real(kind=4),    intent   (in) :: surfwd  (chm_ni)
   real(kind=4),    intent  (out) :: rsfrow  (chm_ni,isize)
   real(kind=4),    intent   (in) :: pressg  (chm_ni)
   real(kind=4),    intent   (in) :: gc      (chm_ni)
   real(kind=4),    intent   (in) :: fland   (chm_ni,15)
!!if_off
!
! Local variables
!
   integer(kind=4) :: n, i, pos, np
   real(kind=4)    :: b, del
   real(kind=4)    :: flx0, flx1, flx2, flx3, rwi, pvol, pmass, rr1, rr2, cc3, delr0, a1, a2, x
   real(kind=4)    :: r1(chm_ni), r2(chm_ni), df0(chm_ni), df1(chm_ni), df2(chm_ni)
   real(kind=4)    :: cc(4, 4)
   real(kind=4)    :: fintrow(chm_ni, isize, 3)
   data cc/ 0.7674, 3.079, 2.572e-11, -1.424, 0.3926, 3.101, 4.190e-11, -1.404, &
            0.2789, 3.115, 5.415e-11, -1.399, 0.4809, 3.082, 3.110e-11, -1.428 /



!  (1) Gong-Monahan's source
   b(x)  = (0.433333-log10(x))/0.433333
   flx0(x)=1.373 * x ** (-4.7 * (1.+35.0 * x) ** (-0.017 * x ** (-1.44))) * (1.0 +  &
                         0.057 * x ** 3.45) * 10.0 ** (1.607 * exp( - b(x) * b(x)))

!  (2) Smith's source
   flx1(x) = exp(-3.1 * (log(x / 2.1)) ** 2)
   flx2(x) = exp(-3.3 * (log(x / 9.2)) ** 2)

!  (3)  Surf zone production
   flx3(x) = 1.1 * x ** (-1.65)

   a1    = 0.0
   a2    = 0.0
   cc3   = 0.0
   del   = 0.0
   delr0 = 0.0
   df0   = 0.0
   df1   = 0.0
   df2   = 0.0
   pmass = 0.0
   pvol  = 0.0
   r1    = 0.0
   r2    = 0.0
   rr1   = 0.0
   rr2   = 0.0
   rwi   = 0.0
   x     = 0.0


!  otherwise compute the integration of sea-salt for this model run - fintrow
   fintrow=0.0

   do n = 1, isize
      rr1 = aerosize(1, n) * 100.0     !from m to cm
      rr2 = aerosize(2, n) * 100.0
      do i = il1, il2
!
!  convert the dry size of sea-salt aerosols into wet size by taking rh into account.
!  The wet size (80% rh) is used in the surface flux calculation.
!
!  temperature effect

        cc3   = cc(3, 1) * (1.0 + 0.004 * (298.0 - t(i, chm_nk + 1)))
        r1(i) = (rr1 ** 3 + cc(1, 1) * rr1 ** cc(2, 1) / (cc3 * rr1 ** cc(4, 1) - log10(0.8)) &
                 ) ** (1.0 / 3.0) * 10000.00
        r2(i) = (rr2 ** 3 + cc(1, 1) * rr2 ** cc(2, 1) / (cc3 * rr2 ** cc(4, 1) - log10(0.8)) &
                 ) ** (1.0 / 3.0) * 10000.00

!  df0 is for the indirect mechanism (via bubbles)

        df0(i) = 0.0
        df1(i) = 0.0
        df2(i) = 0.0
      end do
      do pos = 1, n * 35
         do i = il1, il2
!  gc(chm_ni) = 1 for sea-ice excluded from sea-salt production

            del = (rr2 - rr1) / real(n * 35)          !del in cm
            rwi = (rr1 + del * real(pos - 1)) * 1.e-2  !from cm to m

!  dry volume and mass of an aerosol particle of size rwi

            pvol = 4.0 / 3.0 * pi * rwi ** 3
            pmass = pvol * rhop0(nn)
            delr0 = (r2(i) - r1(i)) / real(n * 35)

            if (fland(i, 14) > 0.0 .and. gc(i) /= 1.0) then
               if (i_ss == 1) then      !gong's scheme
                  df0(i) = df0(i) + delr0 * pmass * flx0(r1(i) + delr0 * real(pos - 1))

               else                     !smith's scheme
                  df0(i) = df0(i) + delr0 * pmass * flx1(r1(i) + delr0 * real(pos - 1))
                  df1(i) = df1(i) + delr0 * pmass * flx2(r1(i) + delr0 * real(pos - 1))
               end if

!  surf zone production

               if (fland(i, 14) < 1.0) then
                  df2(i) = df2(i) + delr0 * 2.0 * pmass * flx3(r1(i) * 2.0 &
                         + delr0 * 2.0 * real(pos - 1))
               end if
            end if
         end do
      end do
      do i=il1, il2
         fintrow(i, n, 1) = df0(i)
         fintrow(i, n, 2) = df1(i)
         fintrow(i, n, 3) = df2(i)
      end do
   end do

!  insertion du flux de surface

   do n = 1, isize
      np = isize * (nn - 1) + n + (iae1 - 1)
      do i = il1, il2
         if (surfwd(i) > 0.0 .and. gc(i) /= 1.0 .and. fland(i,14) > 0.0) then
            if (i_ss == 1) then      !gong-monahan's scheme
               rsfrow(i, n) = fintrow(i, n, 1) * surfwd(i) ** 3.41 * fland(i,14)
            else                     !smith's scheme
               a1 = 10 ** (0.0676 * surfwd(i) + 2.430)
               a2 = 10 ** (0.9590 * sqrt(surfwd(i)) - 1.476)
               rsfrow(i, n) = (a1 * fintrow(i, n, 1) + a2 * fintrow(i, n, 2)) &
                             * fland(i,14)
            end if

!  calculating surfing production flux
            rsfrow(i, n) = rsfrow(i, n) + fintrow(i, n, 3) &
                          * exp(0.23 * surfwd(i)) * fland(i, 14)
!  adding surfing production flux
            if (.not. flux_L) trac(i, chm_nk + 1, np) = trac(i, chm_nk + 1, np) + rsfrow(i, n) &
                                   / (dshj(i, chm_nk) * pressg(i) / grav) * 2.0 * delt
         end if
      end do
   end do
   return
end
