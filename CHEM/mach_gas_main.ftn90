!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_gas_main.ftn90
! Creation       : P. Makar, B. Pabla, S. Menard Feb 2007 for GEM-MACH
!                  Janusz Pudykiewicz for CHRONOS 1995
! Description    : Entry point for Gas-phase chemistry process describing NOX/VOC system
!
! Extra info     : - Modifications to do cloud photolysis correction (P. Makar, Sept 1998)
!                  - Modification to calculate NON-mass conserving condensable
!                    organic mass for later SOA calculations. Method of Odum
!                    et al., and the two product yield method from Seinfeld's
!                    lab, along with corrections to account for lumping, have
!                    been used. (P. Makar, July 1999).
!                  - Changed test variable for first time step from KT to
!                    IFIRST for initialization of initial total SOA mass (M. Moran, Jan 2000)
!                  - Implement the general form of the instantaneous aerosol yield,
!                    split OC into primary and secondary (Jiang, July 2004)
!
! Arguments:  IN
!               metvar3d(i, k, MV3D_FTOT)             -> Total cloud fraction at each layer (0.0-1.0)
!               metvar3d(i, k, MV3D_QCPLUS)             -> Cloud water/ice (kg/kg) air
!               metvar3d(i, k, MV3D_TPLUS)         ->  Temperature (K)
!               metvar3d(i, k, MV3D_HUPLUS)        -> Specific humidity (kg H2O/kg air)
!               metvar2d(i, MV2D_CANG)             -> Cosine of solar zenith angle
!               step         -> Flag for first chem. step in current
!
!             INOUT
!               BUSVOL   -> Volatile bus
!               BUSDYN   -> Dynamic bus
!
!             LOCAL
!               p2d            -> pressure (pa) on thermodynamic levels
!               rho            -> 3-d air density array (kg/m^3)
!
!
!============================================================================
!
!!if_on
subroutine mach_gas_main(busdyn, busvol, busdyn_size, busvol_size, &
                         step, metvar2d, metvar3d)
   use chm_metvar_mod,       only: SIZE_MV2D, SIZE_MV3D
   use chm_ptopo_grid_mod,   only: chm_ni, chm_nk
!!if_off
   use chm_metvar_mod,       only: MV2D_CANG , MV3D_FTOT  , MV3D_QCPLUS, &
                                   MV3D_TPLUS, MV3D_HUPLUS, MV3D_SIGT  , &
                                   MV3d_SIGM , MV2D_PPLUS,  MV2D_MT
   use chm_utils_mod,        only: chm_lun_out, global_debug, ik, chm_timestep
   use chm_consphychm_mod,   only: consth, conva, rgm, mwt_air, grav
   use chm_nml_mod,          only: chm_soa_s, nk_start, chm_strato_s, chm_diag_colum_l, chm_step_factor
   use mach_gas_chemicbi_mod
   use chm_species_info_mod, only: species_info, sm, UNASSIGNED
   use chm_species_idx_mod
! Comment/Uncomment this when all "only" vars are being defined.
   use chm_phyvar_mod
   use mach_gas_headers_mod, only: mach_gas_chemi, mach_gas_jcorr, mach_gas_uprate, mach_gas_drive, mach_gas_soa_yield
   use mach_pkg_debug_mod
   use mach_linoz_headers_mod, only: mach_gas_strato, mach_strato_xcol
   use linoz_mod, only: p_linoz, hu_linoz, nk_start_linoz
   implicit none
!
! Declare subroutine arguments
!
!!if_on
   integer(kind=4), intent   (in) :: busvol_size
   integer(kind=4), intent   (in) :: busdyn_size
   integer(kind=4), intent   (in) :: step
   real(kind=4),    intent(inout) :: busdyn  (busdyn_size)
   real(kind=4),    intent(inout) :: busvol  (busvol_size)
   real(kind=4),    intent   (in) :: metvar2d(chm_ni,SIZE_MV2D)
   real(kind=4),    intent   (in) :: metvar3d(chm_ni,chm_nk,SIZE_MV3D)
!!if_off
!
!  Declare local variables
!
   real(kind=4)                :: p2d     (chm_ni,chm_nk)
   real(kind=4)                :: rho     (chm_ni,chm_nk)
   real(kind=4)                :: bus     (chm_ni)
!
!  declare other variables
!
   type(species_info), pointer :: cur_sp_ptr
   integer(kind=4)             :: i, k, npt, ii, kcrit, n0
   integer(kind=4)             :: istop, jstop
   real   (kind=4)             :: cxma
!  number of gas-phase species
   integer(kind=4), parameter  ::  nst = 47
!  number of advected species - "dust" and "nh3" (i.e. advected species which are chemically active)
   integer(kind=4), parameter  ::  nsi = 28
!  nreac is number of reactions in the mechanim
   integer(kind=4), parameter  ::  nreac = 114
!  nprcf is number of variable product coefficients (function of t, etc.) used in the adom mechani
   integer(kind=4), parameter  ::  nprcf = 30
   real(kind=4)                ::  bgs(nprcf), rgs(nreac), tppmgs(nst)
!  gas-phase species in ppmv units
   real(kind=4)                ::  tppmg(chm_ni * chm_nk, nst)
!
! BEGIN -> Linoz Related
!
   real(kind=4)                :: p2m        (chm_ni, chm_nk)
   real(kind=4)                :: lino3_new  (chm_ni, chm_nk)
   real(kind=4)                :: o3_old     (chm_ni, chm_nk)
   real(kind=4)                :: o3_new     (chm_ni, chm_nk)
   real(kind=4)                :: o3_tend    (chm_ni, chm_nk)
   real(kind=4)                :: hu_vmr     (chm_ni, chm_nk)
!
   real(kind=4)                :: p_top, p_bot
   real(kind=4)                :: o3, no2, no, pan, hno3, no3, n2o5, so2, so4, co, hcho, isop
!
   real(kind=4)                :: o3_vmr  , no2_vmr, no_vmr  , pan_vmr
   real(kind=4)                :: hno3_vmr, no3_vmr, n2o5_vmr, so2_vmr
   real(kind=4)                :: so4_vmr , co_vmr , hcho_vmr, isop_vmr
!
   real(kind=4)                :: o3_over  , no2_over, no_over  , pan_over 
   real(kind=4)                :: hno3_over, no3_over, n2o5_over, so2_over 
   real(kind=4)                :: so4_over , co_over , hcho_over, isop_over
   real(kind=4)                :: hu_over
!
! END -> Linoz Related 
!
   real(kind=8)                :: rga(chm_ni * chm_nk, nreac)
   real(kind=8)                :: bg(chm_ni * chm_nk, nprcf)
!  pressure (mb) at current slice of gridsquares
   real(kind=4)                :: zpres(chm_ni * chm_nk)
!  conversion factor array to convert 1/kg air to (1/moles air).
!  = 0.08314 * t(kelvin) *rho(kg/m3) / p(mb) note that the constant includes conversion
   real(kind=4)                :: conv1(chm_ni * chm_nk)
!  solar zenith angle (time average)
   real(kind=4)                :: zen(chm_ni * chm_nk)
!  no concentration array.  used in hcho + ho2 reaction rate (no. 53)
   real(kind=4)                :: cno(chm_ni * chm_nk)
!  liquid water flag. if < 0, n2o5 +h2 reaction rate is reset to 5 x the gas-phase reaction rate.
!  currently set to -1 by defaul
!
   real(kind=4)                ::  skyo(chm_ni, chm_nk)
   integer(kind=4)             :: index
   real(kind=4)                :: ymin, ymin2, ymin3
!  index remapping 2-d arrays to 1-d
   integer(kind=4)             :: nn
!   "i_*" are pointer to "*" chemical species
   integer(kind=4), parameter  :: i_so2   = 1
   integer(kind=4), parameter  :: i_so4   = 2
   integer(kind=4), parameter  :: i_no    = 3
   integer(kind=4), parameter  :: i_no2   = 4
   integer(kind=4), parameter  :: i_o3    = 5
   integer(kind=4), parameter  :: i_h2o2  = 6
   integer(kind=4), parameter  :: i_hno3  = 7
   integer(kind=4), parameter  :: i_pan   = 8
   integer(kind=4), parameter  :: i_c3h8  = 9
   integer(kind=4), parameter  :: i_alka  = 10
   integer(kind=4), parameter  :: i_ethe  = 11
   integer(kind=4), parameter  :: i_alke  = 12
   integer(kind=4), parameter  :: i_tolu  = 13
   integer(kind=4), parameter  :: i_arom  = 14
   integer(kind=4), parameter  :: i_hcho  = 15
   integer(kind=4), parameter  :: i_ald2  = 16
   integer(kind=4), parameter  :: i_mek   = 17
   integer(kind=4), parameter  :: i_mgly  = 18
   integer(kind=4), parameter  :: i_dial  = 19
   integer(kind=4), parameter  :: i_rooh  = 20
   integer(kind=4), parameter  :: i_cres  = 21
   integer(kind=4), parameter  :: i_hono  = 22
   integer(kind=4), parameter  :: i_rno3  = 23
   integer(kind=4), parameter  :: i_isop  = 24
   integer(kind=4), parameter  :: i_ho2   = 25
   integer(kind=4), parameter  :: i_ro2   = 26
   integer(kind=4), parameter  :: i_mco3  = 27
   integer(kind=4), parameter  :: i_co    = 28
   integer(kind=4), parameter  :: i_nh3   = 29
   integer(kind=4), parameter  :: i_dust  = 30

   integer(kind=4), parameter  :: i_ch4   = 43
   integer(kind=4), parameter  :: i_c2h6  = 44

   integer(kind=4)             :: ix, kz, nb

   logical(kind=4)             :: local_dbg
   external qqexit
!
!  CODE BEGINS HERE
!
   local_dbg = (.false. .or. global_debug)

   if (local_dbg) then
      write(chm_lun_out, *) "in mach_gas_main consth, conva, rgm", consth, conva, rgm
   end if

!  number of gridpoints in one slice of data
   npt = chm_ni * chm_nk

!  initialize various constants for the gas-phase mechanism and solver:
   call mach_gas_chemi(BG, npt, nprcf)
!
!  determine the cloudy/clear sky correction factor for
!  photolysis rates:
! cosine of solar zenith angle is positive; sun is
! above the horizon.  calculate photolysis correction
! factor for clouds. (Sylvain note: Photolysis correction are compute on the full column height;
! this is the only subroutine in the gas chemistry where vertical loops are still done from
! (1, chm_nk) and not from (nk_start, chm_nk). It's a feature.
!

   do k = 1, chm_nk
      do i = 1, chm_ni
         p2d(i,k)   = busvol(sm(sp_pressure) % vol_offset + ik(i, k, chm_ni))
         rho(i,k)   = busvol(sm(sp_density) % vol_offset + ik(i, k, chm_ni))
      end do
   end do
!
   call mach_gas_jcorr(rho, SKYO, metvar2d, metvar3d)

   nn = (nk_start - 1) * chm_ni
   do k = nk_start, chm_nk
      do i = 1, chm_ni
         nn = nn + 1
         zpres(nn)  = p2d(i, k)/100.  ! pa to mb
         conv1(nn)  = (rgm * metvar3d(i, k, MV3D_TPLUS) * rho(i, k)) / zpres(nn) ! rgm is gas constant * 0.01, used in conversion of ug/kg to ppmv
         zen(nn)    = acos(metvar2d(i, MV2D_CANG)) * conva ! conva is conversion factor from radians to degrees
!        Patch to avoid zero concentration for NO
         cno(nn) = max( 1.0e-12, busdyn(sm(sp_NO) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_NO) % mol_wt)
      end do
   end do

!  Calculate reaction rate constants for current slice:
   call mach_gas_uprate(metvar2d(:,MV2D_MT), zpres, skyo, zen, cno, rga, bg, metvar3d, nreac, nprcf, npt)
!
!  Transfer chemicals and do gas-phase chemistry
   ymin  = real(yming)
   ymin2 = real(ymin2g)
   ymin3 = real(ymin3g)

!   call tmg_start0 ( 24, 'mach_gas_drive')
! Some constant values
   tppmgs(i_ch4)  = ch4  ! constant concentration of methane as a function of height
   tppmgs(46) = o2       !  should relative amount of o2 change? upper atm?
   tppmgs(47) = aircon
!
   nn = (nk_start_linoz - 1) * chm_ni
   do k = nk_start_linoz, chm_nk
      do i = 1, chm_ni
         nn = nn + 1
!
! Save ozone mmr in ug/kg at T-dT
!
         o3_old(i,k)    = busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni))         !ug/kg

      end do
   end do


   nn = (nk_start - 1) * chm_ni
   do k = nk_start, chm_nk
      do i = 1, chm_ni
         nn = nn + 1

!    Convert units from mass mixing ratio to ppmv and place into
!  separate array for gas-phase chemical integration.  Note that
!  explicit referencing to specific locations in the master array
!  is used to maintain the correct species order expected by the
!  chemical integration subroutine ("drive").  P.A. Makar, Dec 30, 1998.

         tppmgs(i_so2)  = busdyn(sm(sp_SO2 ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_SO2 ) % mol_wt
         tppmgs(i_so4)  = busdyn(sm(sp_SO4 ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_SO4 ) % mol_wt
         tppmgs(i_no)   = busdyn(sm(sp_NO  ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_NO  ) % mol_wt
         tppmgs(i_no2)  = busdyn(sm(sp_NO2 ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_NO2 ) % mol_wt
         tppmgs(i_o3)   = busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_O3  ) % mol_wt
         tppmgs(i_h2o2) = busdyn(sm(sp_H2O2) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_H2O2) % mol_wt
         tppmgs(i_hno3) = busdyn(sm(sp_HNO3) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_HNO3) % mol_wt
         tppmgs(i_pan)  = busdyn(sm(sp_PAN ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_PAN ) % mol_wt
         tppmgs(i_c3h8) = busdyn(sm(sp_C3H8) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_C3H8) % mol_wt
         tppmgs(i_alka) = busdyn(sm(sp_ALKA) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_ALKA) % mol_wt

         tppmgs(i_ethe) = busdyn(sm(sp_ETHE) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_ETHE) % mol_wt
         tppmgs(i_alke) = busdyn(sm(sp_ALKE) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_ALKE) % mol_wt
         tppmgs(i_tolu) = busdyn(sm(sp_TOLU) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_TOLU) % mol_wt
         tppmgs(i_arom) = busdyn(sm(sp_AROM) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_AROM) % mol_wt
         tppmgs(i_hcho) = busdyn(sm(sp_HCHO) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_HCHO) % mol_wt
         tppmgs(i_ald2) = busdyn(sm(sp_ALD2) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_ALD2) % mol_wt
         tppmgs(i_mek)  = busdyn(sm(sp_MEK ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_MEK ) % mol_wt
         tppmgs(i_mgly) = busdyn(sm(sp_MGLY) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_MGLY) % mol_wt
         tppmgs(i_dial) = busdyn(sm(sp_DIAL) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_DIAL) % mol_wt
         tppmgs(i_rooh) = busdyn(sm(sp_ROOH) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_ROOH) % mol_wt

         tppmgs(i_cres) = busdyn(sm(sp_CRES) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_CRES) % mol_wt
         tppmgs(i_hono) = busdyn(sm(sp_HONO) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_HONO) % mol_wt
         tppmgs(i_rno3) = busdyn(sm(sp_RNO3) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_RNO3) % mol_wt
         tppmgs(i_isop) = busdyn(sm(sp_ISOP) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_ISOP) % mol_wt
         tppmgs(i_ho2)  = busdyn(sm(sp_HO2 ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_HO2 ) % mol_wt
         tppmgs(i_ro2)  = busdyn(sm(sp_RO2 ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_RO2 ) % mol_wt
         tppmgs(i_mco3) = busdyn(sm(sp_MCO3) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_MCO3) % mol_wt
         tppmgs(i_co)   = busdyn(sm(sp_CO  ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_CO  ) % mol_wt
         tppmgs(i_nh3)  = busdyn(sm(sp_NH3 ) % dyn_offset + ik(i, k, chm_ni)) * conv1(nn) / sm(sp_NH3 ) % mol_wt
         tppmgs(i_dust) = 1.0 ! "dust" is not used in the gas-phase chemistry
!  factor of 0.001:  these values are returned to the main code
!  as ppbv for consistency with the output units of the transported variables.
!  here, they are converted back to the ppmv units required by "drive".
!  constant species were reset in the previous loop to ppmv values, so no
!  need to multiply the master array values by 0.001.

         tppmgs(31)     = busdyn(sm(sp_OSD ) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(32)     = busdyn(sm(sp_O   ) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(33)     = busdyn(sm(sp_NO3 ) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(34)     = busdyn(sm(sp_N2O5) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(35)     = busdyn(sm(sp_HNO4) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(36)     = busdyn(sm(sp_OH  ) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(37)     = busdyn(sm(sp_RO2R) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(38)     = busdyn(sm(sp_R2O2) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(39)     = busdyn(sm(sp_RO2N) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(40)     = busdyn(sm(sp_BZO ) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(41)     = busdyn(sm(sp_CRG1) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(42)     = busdyn(sm(sp_CRG2) % dyn_offset + ik(i, k, chm_ni)) * 0.001
         tppmgs(i_c2h6) = layerconcentration1 ! constant concentration of ethane  as a function of height.
         if ( metvar3d(i, k, MV3D_SIGT) >  layerboundary1 ) tppmgs(i_c2h6) = layerconcentration2
         if ( metvar3d(i, k, MV3D_SIGT) >  layerboundary2 ) tppmgs(i_c2h6) = layerconcentration3


!  determine value of water vapour from the meteorology:
!     "consth" is a constant for
!            (a) converting humidity variable to ppmv, and
!            (b) taking the average of the met value to determine the value for the given time step.  for humidity in
!                kg(h2o)/kg(air) to ppmv, the conversion is * 1.e+06/(m(h2o)/m(air)); 28.96 used for molecular mass of air,
!                18.015 for molecular mass of h2o
         tppmgs(45) = consth *  max(1.0e-10, metvar3d(i, k, MV3D_HUPLUS))
         do ii=1, nreac
            rgs(ii)   = real(rga(nn, ii))
         end do

         do ii=1, nprcf
            bgs(ii)   = real(bg(nn, ii))
         end do

!  set up for gas-phase solver, called in scalar mode
         if (step - chm_step_factor /= 0) then
!  for "initialization" steps, use the high accuracy, small
!  internal time step option in the solver (index = 1)
            index = 0
         else
            index = 1
         end if

!  call solver for current grid-point's gas-phase chemistry:
         istop = 0
         jstop = 0
         if (local_dbg) then
            do ii=1, nst
               if(tppmgs(ii) <= 0.0) then
                  write (chm_lun_out, *) 'initial concentration less than or equal to zero for species ', ii, tppmgs(ii)
               end if
            end do
            do ii = 1, nreac
               if(rgs(ii) <= 0.0) then
                  write (chm_lun_out, *) 'zero rate constant found for reaction ', ii
               end if
            end do
         end if

         call mach_gas_drive(TPPMGS, nst, nsi, INDEX,                           &
                                  zen(nn), i, k, rgs, bgs, nreac, nprcf,        &
                                  ymin, ymin2, ymin3, hstart, hsub, hmax        )
         if (index < 0) then
            write(0,*) '### Error in mach_gas_main ###'
            write(0,*) '# Return code from mach_gas_drive: ', index
            select case(index)
               case(-1)
                  write(0,*) '# Integration failed'
               case(-10)
                  write(0,*) '# Integration took too many steps'
               case(-20, -21, -22)
                  write(0,*) '# Integration aborted because it was about'
                  write(0,*) '# to make a division by zero'
            end select
            write(0,*) '###          ABORT         ###'
            call qqexit(1)
         end if
         do ii=1, nst
               tppmg(nn, ii) = tppmgs(ii)
         end do
      end do
   end do

   ! call tmg_stop0 ( 24 )

  if (chm_soa_s /= 'NIL') then
! Calculate the change in concentration of soa using ODUM or JIANG et al. yield approaches
      call mach_gas_soa_yield(busdyn, busvol, busdyn_size, busvol_size, p2d,  rho,    tppmg, conv1, metvar3d, nst)
  end if

!
!================================================================================================
! Start of Gas Phase Stratospheric Chemistry (only between level (nk_start and level chm_nk)
!================================================================================================
!


  select case (chm_strato_s)
     case ('LINOZ')
        if(local_dbg) then
           write (chm_lun_out, *) 'Calculate stratospheric O3 using LINOZ: ', chm_strato_s
        end if

  ! call tmg_start0 ( 25, 'mach_gas_strato')
        call mach_gas_strato(busdyn     , busvol     , &
                             busdyn_size, busvol_size, &
                             metvar3d, metvar2d                   , &
                             rho, step, lino3_new                   )

  ! call tmg_stop0 ( 25 )

     case default
        if(local_dbg) then
           write (chm_lun_out, *) '> Warning '
           write (chm_lun_out, *) '> No stratospheric O3 processes: ', chm_strato_s
        end if
  end select


! --> END: Gas Phase Stratospheric Chemistry (only between level (nk_start and level chm_nk)

!  gas species:  convert units back to ug/kg and ppbv,  and place back into buses:
   nn = (nk_start - 1) * chm_ni
   do k = nk_start, chm_nk
      do i = 1, chm_ni
         nn = nn + 1

!  Apply ADOM tendencies below hu_linoz (10 ppmv specific humidity) used with nk_start (36 or aproximately 100mb)
!
      hu_vmr(i, k)  = consth * metvar3d(i, k, MV3D_HUPLUS)      ! units ppmv
      if ( (chm_strato_s == 'NIL') .or.(hu_vmr(i,k) >= hu_linoz)) then                         ! 10 ppmv

         busdyn(sm(sp_SO2 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_so2)  / conv1(nn) * sm(sp_SO2 ) % mol_wt
         busdyn(sm(sp_SO4 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_so4)  / conv1(nn) * sm(sp_SO4 ) % mol_wt
         busdyn(sm(sp_NO  ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_no)   / conv1(nn) * sm(sp_NO  ) % mol_wt
         busdyn(sm(sp_NO2 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_no2)  / conv1(nn) * sm(sp_NO2 ) % mol_wt
         busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_o3)  / conv1(nn) * sm(sp_O3  ) % mol_wt
         busdyn(sm(sp_H2O2) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_h2o2) / conv1(nn) * sm(sp_H2O2) % mol_wt
         busdyn(sm(sp_HNO3) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_hno3) / conv1(nn) * sm(sp_HNO3) % mol_wt
         busdyn(sm(sp_PAN ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_pan)  / conv1(nn) * sm(sp_PAN ) % mol_wt
         busdyn(sm(sp_C3H8) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_c3h8) / conv1(nn) * sm(sp_C3H8) % mol_wt
         busdyn(sm(sp_ALKA) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_alka) / conv1(nn) * sm(sp_ALKA) % mol_wt
         busdyn(sm(sp_ETHE) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_ethe) / conv1(nn) * sm(sp_ETHE) % mol_wt
         busdyn(sm(sp_ALKE) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_alke) / conv1(nn) * sm(sp_ALKE) % mol_wt
         busdyn(sm(sp_TOLU) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_tolu) / conv1(nn) * sm(sp_TOLU) % mol_wt
         busdyn(sm(sp_AROM) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_arom) / conv1(nn) * sm(sp_AROM) % mol_wt
         busdyn(sm(sp_HCHO) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_hcho) / conv1(nn) * sm(sp_HCHO) % mol_wt
         busdyn(sm(sp_ALD2) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_ald2) / conv1(nn) * sm(sp_ALD2) % mol_wt
         busdyn(sm(sp_MEK ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_mek)  / conv1(nn) * sm(sp_MEK ) % mol_wt
         busdyn(sm(sp_MGLY) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_mgly) / conv1(nn) * sm(sp_MGLY) % mol_wt
         busdyn(sm(sp_DIAL) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_dial) / conv1(nn) * sm(sp_DIAL) % mol_wt
         busdyn(sm(sp_ROOH) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_rooh) / conv1(nn) * sm(sp_ROOH) % mol_wt
         busdyn(sm(sp_CRES) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_cres) / conv1(nn) * sm(sp_CRES) % mol_wt
         busdyn(sm(sp_HONO) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_hono) / conv1(nn) * sm(sp_HONO) % mol_wt
         busdyn(sm(sp_RNO3) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_rno3) / conv1(nn) * sm(sp_RNO3) % mol_wt
         busdyn(sm(sp_ISOP) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_isop) / conv1(nn) * sm(sp_ISOP) % mol_wt
         busdyn(sm(sp_HO2 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_ho2)  / conv1(nn) * sm(sp_HO2 ) % mol_wt
         busdyn(sm(sp_RO2 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_ro2)  / conv1(nn) * sm(sp_RO2 ) % mol_wt
         busdyn(sm(sp_MCO3) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_mco3) / conv1(nn) * sm(sp_MCO3) % mol_wt
         busdyn(sm(sp_CO  ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_co)   / conv1(nn) * sm(sp_CO  ) % mol_wt
         busdyn(sm(sp_NH3 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , i_nh3)  / conv1(nn) * sm(sp_NH3 ) % mol_wt

         busdyn(sm(sp_OSD ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 31) / 0.001
         busdyn(sm(sp_O   ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 32) / 0.001
         busdyn(sm(sp_NO3 ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 33) / 0.001
         busdyn(sm(sp_N2O5) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 34) / 0.001
         busdyn(sm(sp_HNO4) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 35) / 0.001
         busdyn(sm(sp_OH  ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 36) / 0.001
         busdyn(sm(sp_RO2R) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 37) / 0.001
         busdyn(sm(sp_R2O2) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 38) / 0.001
         busdyn(sm(sp_RO2N) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 39) / 0.001
         busdyn(sm(sp_BZO ) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 40) / 0.001
         busdyn(sm(sp_CRG1) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 41) / 0.001
         busdyn(sm(sp_CRG2) % dyn_offset + ik(i, k, chm_ni)) = tppmg(nn , 42) / 0.001

      end if    !  if ( (chm_strato_s == 'NIL') .or.(hu_vmr(i,k) >= hu_linoz))

      end do
   end do

   IF_APPLIN: if (chm_strato_s == 'LINOZ') then

!  gas species:  convert units back to ug/kg and ppbv,  and place back into buses:
   do k = nk_start_linoz, chm_nk
      do i = 1, chm_ni

         ! Pressure on momentum levels
         p2m(i, k) = metvar3d(i, k, MV3D_SIGM) * metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         hu_vmr(i, k)  = consth * metvar3d(i, k, MV3D_HUPLUS)      ! units ppmv

!     Apply LINOZ tendencies above hu_linoz specific humidity or for pressure lower than p_linoz ,  the lower of two
         if (p2d(i, k) < p_linoz) then        !pressure (Pa) 

             busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni)) = lino3_new(i,k)    !ug /kg

         else 

             if (hu_vmr(i,k) < hu_linoz) then
                  ! write (chm_lun_out, *) '> mach_gas_main: Linoz humidity (ppmv) ', hu_vmr(i,k), hu_linoz
                  busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni)) = lino3_new(i,k)    !ug /kg
             end if

         end if

      end do
   end do


!    Output diagnostics 
!
   IF_DIAG: if( chm_diag_colum_L) then
      do k = 1, chm_nk
      do i = 1, chm_ni

         ! Save ozone mmr in ug/kg at T+dT
         o3_new(i,k)    = busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni))         !ug /kg

         ! Ozone tendency
         o3_tend(i,k)   = (o3_new(i,k) - o3_old(i,k)) / chm_timestep                  !ug /kg /sec
         busvol(sm(sp_tend_o3) % vol_offset + ik(i, k, chm_ni)) = o3_tend(i,k)
         busvol(sm(sp_diff_o3) % vol_offset + ik(i, k, chm_ni)) = o3_tend(i,k)

      end do
      end do

!    Column amounts NO2 NO PAN HNO3 NO3 N2O5 (molec /cm2)
!
      do i = 1, chm_ni

!    Total column
      no2_over    = 0.
      no_over     = 0.

      do k = 1, chm_nk

         p_top = metvar3d(i, k, MV3D_SIGM) * metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         if (k == chm_nk) then
            p_bot = metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         else
            p_bot = metvar3d(i, k+1, MV3D_SIGM) * metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         endif

         call mach_strato_xcol(hu_vmr(i,k), p_bot, p_top, hu_over)           !1E+15 molec /cm2

         no2    = busdyn(sm(sp_NO2 ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         no2_vmr= no2 * mwt_air/(species_master(sp_NO2) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(no2_vmr, p_bot, p_top, no2_over)          !1E+15 molec /cm2

         no     = busdyn(sm(sp_NO ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         no_vmr = no * mwt_air/(species_master(sp_NO) % mol_wt)*1.E-9    !mole/mole vmr
         call mach_strato_xcol(no_vmr, p_bot, p_top, no_over)            !1E+15 molec /cm2

!     YHU: Column water vapor
         busvol(sm(sp_col_hu)  % vol_offset + ik(i, k, chm_ni)) = hu_over         !1E+15 molec /cm2

!     YNO2: Column NO2 
         busvol(sm(sp_col_no2) % vol_offset + ik(i, k, chm_ni)) = no2_over        !1E+15 molec /cm2

!     YNO: Column NO
         busvol(sm(sp_col_no ) % vol_offset + ik(i, k, chm_ni)) = no_over         !1E+15 molec /cm2

      enddo

!    Tropospheric column
      o3_over     =0.0
      no2_over    =0.0
      no_over     =0.0
      pan_over    =0.0
      hno3_over   =0.0
      no3_over    =0.0
      n2o5_over   =0.0
      so2_over    =0.0
      so4_over    =0.0
      co_over     =0.0
      hcho_over   =0.0
      isop_over   =0.0

      do k = 1, chm_nk
!
! Comment out (or not) to calculate total column (tropospheric column)
         if (p2d(i, k) >= p_linoz) then             !pressure (Pa)   ADOM lid 100 mb
            if (  hu_vmr(i,k) >= hu_linoz  ) then !humidity (ppmv) ADOM lid 10 ppmv

         p_top = metvar3d(i, k, MV3D_SIGM) * metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         if (k == chm_nk) then
            p_bot = metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         else
            p_bot = metvar3d(i, k+1, MV3D_SIGM) * metvar2d(i, MV2D_PPLUS)    ! Pressure(Pa)  on momentum levels
         endif

!
! Tropospheric Total Column Amounts NO2 NO PAN HNO3 NO3 N2O5 (molec /cm2)
!

         o3     = busdyn(sm(sp_O3  ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         o3_vmr = o3  * mwt_air/(species_master(sp_O3 ) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(o3_vmr , p_bot, p_top, o3_over )          !1E+15 molec /cm2

         no2    = busdyn(sm(sp_NO2 ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         no2_vmr= no2 * mwt_air/(species_master(sp_NO2) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(no2_vmr, p_bot, p_top, no2_over)          !1E+15 molec /cm2

         if (local_dbg .and. step <=  1 .and. i == 33 ) write (chm_lun_out, *) &
            'mach_gas_main: NO2 Partial Column:',step, k,      &
                             p_top,p_bot,(p_bot - p_top)/grav, &
                             no2_vmr, no2_over

         no     = busdyn(sm(sp_NO ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         no_vmr = no * mwt_air/(species_master(sp_NO) % mol_wt)*1.E-9    !mole/mole vmr
         call mach_strato_xcol(no_vmr, p_bot, p_top, no_over)            !1E+15 molec /cm2

         pan    = busdyn(sm(sp_PAN ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         pan_vmr= pan * mwt_air/(species_master(sp_PAN) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(pan_vmr, p_bot, p_top, pan_over)          !1E+15 molec /cm2

         hno3    = busdyn(sm(sp_HNO3 ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         hno3_vmr= hno3 * mwt_air/(species_master(sp_HNO3) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(hno3_vmr, p_bot, p_top, hno3_over)           !1E+15 molec /cm2

         no3    = busdyn(sm(sp_NO3 ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         no3_vmr= no3 * mwt_air/(species_master(sp_NO3) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(no3_vmr, p_bot, p_top, no3_over)          !1E+15 molec /cm2

         n2o5    = busdyn(sm(sp_N2O5 ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         n2o5_vmr= n2o5 * mwt_air/(species_master(sp_N2O5) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(n2o5_vmr, p_bot, p_top, n2o5_over)           !1E+15 molec /cm2

! Column amounts SO2 SO4 (molec /cm2)
!
         so2    = busdyn(sm(sp_SO2 ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         so2_vmr= so2 * mwt_air/(species_master(sp_SO2) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(so2_vmr, p_bot, p_top, so2_over)          !1E+15 molec /cm2

         so4    = busdyn(sm(sp_SO4 ) % dyn_offset + ik(i, k, chm_ni))    !ug /kg
         so4_vmr= so4 * mwt_air/(species_master(sp_SO4) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(so4_vmr, p_bot, p_top, so4_over)          !1E+15 molec /cm2

! Column amounts CO HCHO ISOP (molec /cm2)
!
         co     = busdyn(sm(sp_CO ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         co_vmr = co * mwt_air/(species_master(sp_CO) % mol_wt)*1.E-9    !mole/mole vmr
         call mach_strato_xcol(co_vmr, p_bot, p_top, co_over)            !1E+15 molec /cm2

         hcho    = busdyn(sm(sp_HCHO ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         hcho_vmr= hcho * mwt_air/(species_master(sp_HCHO) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(hcho_vmr, p_bot, p_top, hcho_over)           !1E+15 molec /cm2

         isop    = busdyn(sm(sp_ISOP ) % dyn_offset + ik(i, k, chm_ni))     !ug /kg
         isop_vmr= isop * mwt_air/(species_master(sp_ISOP) % mol_wt)*1.E-9  !mole/mole vmr
         call mach_strato_xcol(isop_vmr, p_bot, p_top, isop_over)           !1E+15 molec /cm2

! Comment to apply ADOM tendencies in stratosphere
           end if !hu_linoz
         endif    !p_linoz

! -------------------------------
! End loop on all vertical levels
! -------------------------------

      end do  ! do 1, chm_ni (k-loop)

!  Output Total Tropospheric Column amounts 1E+15 (Peta) molecules cm-2
!
! ZO3: Total Column O3
      ! o3_col  (i) = o3_over     !1E+15 molec /cm2
      busvol(sm(sp_tcol_O3  ) % vol_offset + i - 1 ) = o3_over  
!
! ZNO2: Total Column NO2
      ! no2_col (i) = no2_over    !1E+15 molec /cm2
      busvol(sm(sp_tcol_NO2 ) % vol_offset + i - 1 ) = no2_over
!
! ZNOX: Total Column NO
      ! no_col  (i) = no_over     !1E+15 molec /cm2
      busvol(sm(sp_tcol_NO  ) % vol_offset + i - 1 ) = no_over
!
! ZPAN: Total Column PAN
      ! pan_col (i) = pan_over  
      busvol(sm(sp_tcol_PAN ) % vol_offset + i - 1 ) = pan_over
!
! ZHN3: Total Column HNO3
      ! hno3_col(i) = hno3_over
      busvol(sm(sp_tcol_HNO3) % vol_offset + i - 1 ) = hno3_over
!
! ZN25: Total Column N2O5
      ! n2o5_col(i) = n2o5_over
      busvol(sm(sp_tcol_N2O5) % vol_offset + i - 1 ) = n2o5_over
!
! ZSO2: Total Column SO2
      ! so2_col (i) = so2_over
      busvol(sm(sp_tcol_SO2 ) % vol_offset + i - 1 ) = so2_over
!
! ZSO4: Total Column SO4
      ! so4_col (i) = so4_over
      busvol(sm(sp_tcol_SO4 ) % vol_offset + i - 1 ) = so4_over
!
! ZCO: Total Column CO
      ! co_col  (i) = co_over
      busvol(sm(sp_tcol_CO  ) % vol_offset + i - 1 ) = co_over
!
! ZHCH: Total Column HCHO
      ! hcho_col(i) = hcho_over
      busvol(sm(sp_tcol_HCHO) % vol_offset + i - 1 ) = hcho_over
!
! ZISO: Total Column ISOP
      ! isop_col(i) = isop_over
      busvol(sm(sp_tcol_ISOP) % vol_offset + i - 1 ) = isop_over
!
! ----------------------
! End loop on longitudes
! ----------------------
     end do      !i-loop

   endif IF_DIAG
   endif IF_APPLIN

return
end subroutine mach_gas_main


