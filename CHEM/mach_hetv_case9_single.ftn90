!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_hetv_case9.ftn90
! Creation       : P. Makar,  V. Bouchet,  A. Nenes,  S. Gravel,  B. Pabla,  S. Menard
! Description    : Heterogeneous chemistry solver for case9.  Based on algorithm's
!                  in Nenes et al's ISORROPIA solver, recoded to vectorize over the
!                  gridpoint dimension.  All input arrays are of length npts (total
!                  number of gridpoints submitted from the calling code.  The
!                  subsection of each 1-D array between index ns9 and ne9 (inclusive)
!                  has been pre-sorted, and contains the gridpoint data that must
!                  be solved using case 9's algorithm.  Operations within this
!                  subroutine therefore take place over array bounds from ns9 to ne9.
!
!                  Units on input are moles/kg air!
!
! Extra info     : Athanasios Nenes, Mail Code 210-41, Dept. of Chemical Engineering,
!                  California Institute of Technology, Pasadena, Ca., 91125, USA
!                  nenes@its.caltech.edu
!
!                  The conditions for which this case is called are as follows:
!                        tats >= 2.0, rh <  mdrh_amnit_amsul
!                  The reactions representing this case are as follows(bracketed numbers
!                  indicate that the solution is done in stages, as numbered):
!                     NH4NO3 (s) <=> NH3 + HNO3, kNH4NO3
!                     TA = 2 (NH4)2SO4 + NH4NO3 + NH3
!                     TS = (NH4)2SO4
!                     TN = HNO3 + NH4NO3
!                  The system of equations to be solved in this case are as follows:
!                     kNH4NO3 - (NH3)(HNO3) = 0,
!                     TA - 2 (NH4)2SO4 - NH4NO3 - NH3 = 0,
!                     TN - HNO3 = 0,
!                     TS = (NH4)2SO4
!                  The solution to the system of equations:
!                     b = - TA + 2 (NH4)2SO4 + TN,
!                     c = - kNH4NO3,
!                     NH3 = 0.5*(-b + sqrt(b**2 -4c)),
!                     HNO3 = - TA + 2 (NH4)2SO4 + TN + NH3
!                     NH4NO3 = TA - 2 (NH4)2SO4 - NH3
!
! Arguments  IN
!
!            OUT
!
!=============================================================================
!
!!if_on
subroutine mach_hetv_case9_single (nr, hno3, nh3, amsuldry, amnitdry, t, k0, p1, p2, rho, ta, ts, tn, tstd, smrt)
!!if_off
   implicit none
!!if_on
   integer(kind=4), intent (in) :: nr
   real(kind=8),    intent(out) :: hno3 
   real(kind=8),    intent(out) :: nh3  
   real(kind=8),    intent(out) :: amsuldry
   real(kind=8),    intent(out) :: amnitdry
   real(kind=8),    intent (in) :: t    
   real(kind=8),    intent (in) :: k0(nr)
   real(kind=8),    intent (in) :: p1(nr)
   real(kind=8),    intent (in) :: p2(nr)
   real(kind=8),    intent (in) :: rho  
   real(kind=8),    intent (in) :: ta   
   real(kind=8),    intent (in) :: ts   
   real(kind=8),    intent (in) :: tn   
   real(kind=8),    intent (in) :: tstd
   real(kind=8),    intent (in) :: smrt
!!if_off
!
!  Local variables:
!

!  arrays for reaction rates:
   real(kind=8) :: kamnit, b, c, v
   real(kind=8), parameter       :: rg = 8.3144 / 1.01325d+05 ! gas constant, atm->pa

!  Dry particle, so no water calculation and no iteration required
!  Calculate rates for Equilibrium constants
!  9:  NH4NO3(s) <=> NH3(g_eq) + HNO3(g_eq)
   kamnit = k0(9) * exp(p1(9) * (tstd / t - 1.0D+00)          &
               + p2(9) * (1.0d+00 + log(tstd / t) - tstd / t))

!  Original units are atm^2:  Gas is in molal units already; convert rate constant to (kg^3 air)/mole:
   kamnit = kamnit / ((rg * t * rho) * (rg * t * rho))

!   Solve system of equations.
   amsuldry = ts
   b = -ta + 2.0d0 * amsuldry + tn
   c = -kamnit
   if (b /= 0.0d0) then
      v = 4.0d0 * (c) / (b * b)
   else
      v = 1.0d+03
   end if
   if (abs(v) <= smrt .and. b > 0.0d0) then
      nh3 = -((((14.0d0 * c / (b * b) + 5.0d0)    &
               * c / (b * b) + 2.0d0)                &
               * c / (b * b) + 1.0d0)                &
               * c / (b * b) + 1.0d0) * c / b
   else
      nh3 = 0.5d0 * (-b + sqrt(b * b - 4.0d0 * c))
   end if

!  Note:  system of equations ensures mass conservation, but not
!  monotonicity.  Extra boundary conditions are therefore required on
!  the value of NH3.  Gas phase NH3 can be no larger than the value which
!  would zero ammonium nitrate (otherwise, the ammonium nitrate concentration
!  would be negative).  Values of less than zero for NH3 are possible if
!  round-off error affects the calculation; this is also corrected.
   nh3   = min(nh3, ta - 2.0d0 * amsuldry)
   nh3   = max(nh3, 0.0d0)
   amnitdry = max(0.0d0, (ta - 2.0d0 * amsuldry - nh3))
!  Correction:  P.A. Makar, Nov 2008
   if(amnitdry .gt. 0.0D0) then
      hno3 = max(-ta + 2.0D0 * amsuldry + tn + nh3,0.0D0)
   else
      hno3 = tn
   end if

return
end
