!---------------------------------- LICENCE BEGIN -------------------------------
! GEM-MACH - Atmospheric chemistry library for the GEM numerical atmospheric model
! Copyright (C) 2007-2013 - Air Quality Research Division &
!                           National Prediction Operations division
!                           Environnement Canada
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
!---------------------------------- LICENCE END ---------------------------------

!============================================================================!
!         Environnement Canada         |        Environment Canada           !
!                                      |                                     !
! - Service meteorologique du Canada   | - Meteorological Service of Canada  !
! - Direction generale des sciences    | - Science and Technology Branch     !
!   et de la technologie               |                                     !
!============================================================================!
!                            http://www.ec.gc.ca                             !
!============================================================================!
!
! Projet/Project : GEM-MACH
! Fichier/File   : mach_cam_tenddist.ftn90
! Creation       : S. Gong, B. Pabla and S. Gravel for GEM-MACH, June 2008
! Description    : Mass balance calculation for each layer.
!
! Extra info     : - First version created by S. Gong Jul 08 1994 for CAM
!                    Method:
!                     1. For each level, compute the falling distance in the
!                        time step far(I)
!                     2. Check the layer thichness below the level and determine
!                        which level it will land
!                     3. Add the mass to the level
!
!                  - Vectorized the whole program and add working spaces.
!                    (S. Gong, Jan 19, 1996)
!
! Arguments:  IN
!
!                pdepv   -> gravitational settling velocity
!                adt2    -> advection time ste
!                thlev   -> Layer thickness [m]
!                nrem    -> tendency: 1 for dry deposition, 2 for below-cloud, 3 for in-cloud
!                il1     -> minimum index for chm_ni
!                il2     -> maximum index for chm_ni
!                ntr     -> total number of trace substances (gases and aerosols)
!                dshj    -> Sigma difference of bottom and top of a layer
!                pressg  -> Grid row of surface pressure [Pa]
!                isize   -> size bin number for aerosols
!
!             IN/OUT
!
!                RTALL   -> tracer tendency for each layer as input
!                           the net tracer tendency by taking the downward transport
!                           from layers above into consideration. output
!                GDREM   -> total removal tendency
!
!============================================================================
!
!!if_on
subroutine mach_cam_tenddist (RTALL, pdepv, adt2, thlev, nrem, il1, il2,  &
                              ntr, dshj, pressg, GDREM)
   use chm_ptopo_grid_mod, only: chm_ni, chm_nk
   use mach_cam_utils_mod, only: isize
!!if_off
   use chm_consphychm_mod, only: grav
   use mach_cam_pre_mod,   only: iae1, icom
   implicit none
!!if_on
   integer(kind=4), intent   (in) :: ntr
   integer(kind=4), intent   (in) :: nrem
   integer(kind=4), intent   (in) :: il1
   integer(kind=4), intent   (in) :: il2
   real(kind=4),    intent   (in) :: adt2
   real(kind=4),    intent(inout) :: rtall (chm_ni,chm_nk,ntr)
   real(kind=4),    intent   (in) :: pdepv (chm_ni,chm_nk,isize)
   real(kind=4),    intent   (in) :: thlev (chm_ni,chm_nk)
   real(kind=4),    intent   (in) :: dshj  (chm_ni,chm_nk)
   real(kind=4),    intent   (in) :: pressg(chm_ni)
   real(kind=4),    intent(inout) :: gdrem (chm_ni,ntr,3)
!!if_off
!
! Local variables
!
   integer(kind=4) :: nt, n, np, l, i, ll1
   real(kind=4)    :: dhl
   real(kind=4)    :: far(1000), lar(1000)
   real(kind=4)    :: pnew(chm_ni, chm_nk, ntr)

   dhl   = 0.0
   far   = 0.0
   lar   = 0.0
   pnew  = 0.0

   do nt = 1, icom
      do n = 1, isize
         np = isize * (nt - 1) + n + (iae1 - 1)
         do l = 1, chm_nk - 1
            do i = il1, il2
               far(i) = 0.0
               lar(i) = 1.0
            end do
            do ll1 = l + 1, chm_nk
               do i = il1, il2
                  dhl = pdepv(i, l, n) * adt2
                  far(i) = far(i) + thlev(i, ll1)
                  if (dhl <= far(i) .and. lar(i) == 1.0) then
!  not reaching the ground, lar = 0
!  assign the mass to the layer it will be in during the time step
                     pnew(i, ll1, np) = -rtall(i, l, np) * dshj(i, l) / dshj(i, ll1)
                     lar(i) = 0.0
                  end if
               end do
            end do

!  if reached the ground, the tendency at this layer is added to the total removal
!  tendency -- gdrem(i, n, nrem)
!      nrem = 1   for dry deposition
!      nrem = 2   for below-cloud
!      nrem = 3   for in-cloud
            do i = il1, il2
               if (lar(i) == 1.0) then
                  gdrem(i, np, nrem) = gdrem(i, np, nrem) + rtall(i, l, np) *  &
                                       dshj(i, l) * pressg(i) / grav
                end if
            end do
         end do
      end do
   end do

!  add the first layer removal tendency to the total ground tendency gdrem(..)
   do n = iae1, isize * icom + (iae1 - 1)
      do i = il1, il2
         gdrem(i, n, nrem) = gdrem(i, n, nrem) + rtall(i, chm_nk, n) *  &
                             dshj(i, chm_nk) * pressg(i) / grav
      end do
   end do

!  calculate the net tendency of each alyer
   do n = iae1, isize * icom + (iae1 - 1)
      do l = 1, chm_nk
         do i = il1, il2
            pnew(i, l, n) = rtall(i, l, n) + pnew(i, l, n)
         end do
      end do
   end do

!     return the original array of tendency
   do n = iae1, isize * icom + (iae1 - 1)
      do l = 1, chm_nk
         do i = il1, il2
            rtall(i, l, n) = pnew(i, l, n)
         end do
      end do
   end do
   return
end
